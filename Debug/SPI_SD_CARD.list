
SPI_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1f8  0800a1f8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1f8  0800a1f8  0001a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a200  0800a200  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a200  0800a200  0001a200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a204  0800a204  0001a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800a208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004848  200000ac  0800a2b4  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048f4  0800a2b4  000248f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190bc  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f8  00000000  00000000  00039198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  0003c790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  0003d960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b935  00000000  00000000  0003e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000116ce  00000000  00000000  0006a2ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdb07  00000000  00000000  0007b9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001794c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb0  00000000  00000000  00179540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009b94 	.word	0x08009b94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	08009b94 	.word	0x08009b94

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b972 	b.w	8000d78 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4688      	mov	r8, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14b      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4615      	mov	r5, r2
 8000abe:	d967      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0720 	rsb	r7, r2, #32
 8000aca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ace:	fa20 f707 	lsr.w	r7, r0, r7
 8000ad2:	4095      	lsls	r5, r2
 8000ad4:	ea47 0803 	orr.w	r8, r7, r3
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ae4:	fa1f fc85 	uxth.w	ip, r5
 8000ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af0:	fb07 f10c 	mul.w	r1, r7, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000afe:	f080 811b 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8118 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b08:	3f02      	subs	r7, #2
 8000b0a:	442b      	add	r3, r5
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	192c      	adds	r4, r5, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8107 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b2e:	45a4      	cmp	ip, r4
 8000b30:	f240 8104 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b34:	3802      	subs	r0, #2
 8000b36:	442c      	add	r4, r5
 8000b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b3c:	eba4 040c 	sub.w	r4, r4, ip
 8000b40:	2700      	movs	r7, #0
 8000b42:	b11e      	cbz	r6, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0xbe>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80eb 	beq.w	8000d32 <__udivmoddi4+0x286>
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b62:	4638      	mov	r0, r7
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f783 	clz	r7, r3
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d147      	bne.n	8000c02 <__udivmoddi4+0x156>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0xd0>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80fa 	bhi.w	8000d70 <__udivmoddi4+0x2c4>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	4698      	mov	r8, r3
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d0e0      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b8e:	e7dd      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000b90:	b902      	cbnz	r2, 8000b94 <__udivmoddi4+0xe8>
 8000b92:	deff      	udf	#255	; 0xff
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f040 808f 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9e:	1b49      	subs	r1, r1, r5
 8000ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba4:	fa1f f885 	uxth.w	r8, r5
 8000ba8:	2701      	movs	r7, #1
 8000baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bae:	0c23      	lsrs	r3, r4, #16
 8000bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	f200 80cd 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x14c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x14a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80b6 	bhi.w	8000d62 <__udivmoddi4+0x2b6>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e79f      	b.n	8000b42 <__udivmoddi4+0x96>
 8000c02:	f1c7 0c20 	rsb	ip, r7, #32
 8000c06:	40bb      	lsls	r3, r7
 8000c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c10:	fa01 f407 	lsl.w	r4, r1, r7
 8000c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c20:	4325      	orrs	r5, r4
 8000c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c26:	0c2c      	lsrs	r4, r5, #16
 8000c28:	fb08 3319 	mls	r3, r8, r9, r3
 8000c2c:	fa1f fa8e 	uxth.w	sl, lr
 8000c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c34:	fb09 f40a 	mul.w	r4, r9, sl
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1e 0303 	adds.w	r3, lr, r3
 8000c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c4c:	f080 8087 	bcs.w	8000d5e <__udivmoddi4+0x2b2>
 8000c50:	429c      	cmp	r4, r3
 8000c52:	f240 8084 	bls.w	8000d5e <__udivmoddi4+0x2b2>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4473      	add	r3, lr
 8000c5c:	1b1b      	subs	r3, r3, r4
 8000c5e:	b2ad      	uxth	r5, r5
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c70:	45a2      	cmp	sl, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1e 0404 	adds.w	r4, lr, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	d26b      	bcs.n	8000d56 <__udivmoddi4+0x2aa>
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d969      	bls.n	8000d56 <__udivmoddi4+0x2aa>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4474      	add	r4, lr
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8e:	eba4 040a 	sub.w	r4, r4, sl
 8000c92:	454c      	cmp	r4, r9
 8000c94:	46c2      	mov	sl, r8
 8000c96:	464b      	mov	r3, r9
 8000c98:	d354      	bcc.n	8000d44 <__udivmoddi4+0x298>
 8000c9a:	d051      	beq.n	8000d40 <__udivmoddi4+0x294>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d069      	beq.n	8000d74 <__udivmoddi4+0x2c8>
 8000ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	40fc      	lsrs	r4, r7
 8000cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e747      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000cbc:	f1c2 0320 	rsb	r3, r2, #32
 8000cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cc4:	4095      	lsls	r5, r2
 8000cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cca:	fa21 f303 	lsr.w	r3, r1, r3
 8000cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd2:	4338      	orrs	r0, r7
 8000cd4:	0c01      	lsrs	r1, r0, #16
 8000cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cda:	fa1f f885 	uxth.w	r8, r5
 8000cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb07 f308 	mul.w	r3, r7, r8
 8000cea:	428b      	cmp	r3, r1
 8000cec:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x256>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cf8:	d22f      	bcs.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d92d      	bls.n	8000d5a <__udivmoddi4+0x2ae>
 8000cfe:	3f02      	subs	r7, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	b281      	uxth	r1, r0
 8000d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d12:	fb00 f308 	mul.w	r3, r0, r8
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d907      	bls.n	8000d2a <__udivmoddi4+0x27e>
 8000d1a:	1869      	adds	r1, r5, r1
 8000d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d20:	d217      	bcs.n	8000d52 <__udivmoddi4+0x2a6>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d915      	bls.n	8000d52 <__udivmoddi4+0x2a6>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4429      	add	r1, r5
 8000d2a:	1ac9      	subs	r1, r1, r3
 8000d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d30:	e73b      	b.n	8000baa <__udivmoddi4+0xfe>
 8000d32:	4637      	mov	r7, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e709      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d38:	4607      	mov	r7, r0
 8000d3a:	e6e7      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fb      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d40:	4541      	cmp	r1, r8
 8000d42:	d2ab      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d48:	eb69 020e 	sbc.w	r2, r9, lr
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	4613      	mov	r3, r2
 8000d50:	e7a4      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d52:	4660      	mov	r0, ip
 8000d54:	e7e9      	b.n	8000d2a <__udivmoddi4+0x27e>
 8000d56:	4618      	mov	r0, r3
 8000d58:	e795      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5a:	4667      	mov	r7, ip
 8000d5c:	e7d1      	b.n	8000d02 <__udivmoddi4+0x256>
 8000d5e:	4681      	mov	r9, r0
 8000d60:	e77c      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	442c      	add	r4, r5
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0x14c>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	442b      	add	r3, r5
 8000d6e:	e72f      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d70:	4638      	mov	r0, r7
 8000d72:	e708      	b.n	8000b86 <__udivmoddi4+0xda>
 8000d74:	4637      	mov	r7, r6
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0xa0>

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2110      	movs	r1, #16
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f001 ff1e 	bl	8002bc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f001 fa97 	bl	80022c0 <HAL_Delay>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f001 ff11 	bl	8002bc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f001 fa8a 	bl	80022c0 <HAL_Delay>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dba:	bf00      	nop
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <SPI_TxByte+0x30>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d1f8      	bne.n	8000dbc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000dca:	1df9      	adds	r1, r7, #7
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <SPI_TxByte+0x30>)
 8000dd2:	f003 fb7e 	bl	80044d2 <HAL_SPI_Transmit>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200017e0 	.word	0x200017e0

08000de4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000df0:	bf00      	nop
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <SPI_TxBuffer+0x30>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d1f8      	bne.n	8000df2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000e00:	887a      	ldrh	r2, [r7, #2]
 8000e02:	2364      	movs	r3, #100	; 0x64
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <SPI_TxBuffer+0x30>)
 8000e08:	f003 fb63 	bl	80044d2 <HAL_SPI_Transmit>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200017e0 	.word	0x200017e0

08000e18 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e22:	bf00      	nop
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <SPI_RxByte+0x34>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d1f8      	bne.n	8000e24 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e32:	1dba      	adds	r2, r7, #6
 8000e34:	1df9      	adds	r1, r7, #7
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <SPI_RxByte+0x34>)
 8000e3e:	f003 fcb6 	bl	80047ae <HAL_SPI_TransmitReceive>

	return data;
 8000e42:	79bb      	ldrb	r3, [r7, #6]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200017e0 	.word	0x200017e0

08000e50 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e58:	f7ff ffde 	bl	8000e18 <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	701a      	strb	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <SD_ReadyWait+0x30>)
 8000e74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e78:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e7a:	f7ff ffcd 	bl	8000e18 <SPI_RxByte>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2bff      	cmp	r3, #255	; 0xff
 8000e86:	d004      	beq.n	8000e92 <SD_ReadyWait+0x26>
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SD_ReadyWait+0x30>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f3      	bne.n	8000e7a <SD_ReadyWait+0xe>

	return res;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20002878 	.word	0x20002878

08000ea0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000ea6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000eaa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000eac:	f7ff ff73 	bl	8000d96 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	e005      	b.n	8000ec2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000eb6:	20ff      	movs	r0, #255	; 0xff
 8000eb8:	f7ff ff7a 	bl	8000db0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b09      	cmp	r3, #9
 8000ec6:	ddf6      	ble.n	8000eb6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000ec8:	f7ff ff58 	bl	8000d7c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000ecc:	2340      	movs	r3, #64	; 0x40
 8000ece:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ee0:	2395      	movs	r3, #149	; 0x95
 8000ee2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2106      	movs	r1, #6
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff7b 	bl	8000de4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eee:	e002      	b.n	8000ef6 <SD_PowerOn+0x56>
	{
		cnt--;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ef6:	f7ff ff8f 	bl	8000e18 <SPI_RxByte>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d002      	beq.n	8000f06 <SD_PowerOn+0x66>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f4      	bne.n	8000ef0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000f06:	f7ff ff46 	bl	8000d96 <DESELECT>
	SPI_TxByte(0XFF);
 8000f0a:	20ff      	movs	r0, #255	; 0xff
 8000f0c:	f7ff ff50 	bl	8000db0 <SPI_TxByte>

	PowerFlag = 1;
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <SD_PowerOn+0x80>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000c9 	.word	0x200000c9

08000f24 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <SD_PowerOff+0x14>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	200000c9 	.word	0x200000c9

08000f3c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <SD_CheckPower+0x14>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200000c9 	.word	0x200000c9

08000f54 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <SD_RxDataBlock+0x5c>)
 8000f60:	22c8      	movs	r2, #200	; 0xc8
 8000f62:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f64:	f7ff ff58 	bl	8000e18 <SPI_RxByte>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2bff      	cmp	r3, #255	; 0xff
 8000f70:	d104      	bne.n	8000f7c <SD_RxDataBlock+0x28>
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <SD_RxDataBlock+0x5c>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f3      	bne.n	8000f64 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2bfe      	cmp	r3, #254	; 0xfe
 8000f80:	d001      	beq.n	8000f86 <SD_RxDataBlock+0x32>
 8000f82:	2300      	movs	r3, #0
 8000f84:	e00f      	b.n	8000fa6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5f 	bl	8000e50 <SPI_RxBytePtr>
	} while(len--);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	603a      	str	r2, [r7, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f4      	bne.n	8000f86 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000f9c:	f7ff ff3c 	bl	8000e18 <SPI_RxByte>
	SPI_RxByte();
 8000fa0:	f7ff ff3a 	bl	8000e18 <SPI_RxByte>

	return TRUE;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20002879 	.word	0x20002879

08000fb4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000fc4:	f7ff ff52 	bl	8000e6c <SD_ReadyWait>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2bff      	cmp	r3, #255	; 0xff
 8000fcc:	d001      	beq.n	8000fd2 <SD_TxDataBlock+0x1e>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e02f      	b.n	8001032 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff feeb 	bl	8000db0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	2bfd      	cmp	r3, #253	; 0xfd
 8000fde:	d020      	beq.n	8001022 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fefd 	bl	8000de4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000fea:	f7ff ff15 	bl	8000e18 <SPI_RxByte>
		SPI_RxByte();
 8000fee:	f7ff ff13 	bl	8000e18 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000ff2:	e00b      	b.n	800100c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ff4:	f7ff ff10 	bl	8000e18 <SPI_RxByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	2b05      	cmp	r3, #5
 8001004:	d006      	beq.n	8001014 <SD_TxDataBlock+0x60>
			i++;
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	3301      	adds	r3, #1
 800100a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	2b40      	cmp	r3, #64	; 0x40
 8001010:	d9f0      	bls.n	8000ff4 <SD_TxDataBlock+0x40>
 8001012:	e000      	b.n	8001016 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001014:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001016:	bf00      	nop
 8001018:	f7ff fefe 	bl	8000e18 <SPI_RxByte>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0fa      	beq.n	8001018 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	2b05      	cmp	r3, #5
 800102a:	d101      	bne.n	8001030 <SD_TxDataBlock+0x7c>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	6039      	str	r1, [r7, #0]
 8001044:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001046:	f7ff ff11 	bl	8000e6c <SD_ReadyWait>
 800104a:	4603      	mov	r3, r0
 800104c:	2bff      	cmp	r3, #255	; 0xff
 800104e:	d001      	beq.n	8001054 <SD_SendCmd+0x1a>
 8001050:	23ff      	movs	r3, #255	; 0xff
 8001052:	e042      	b.n	80010da <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff feaa 	bl	8000db0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	0e1b      	lsrs	r3, r3, #24
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fea4 	bl	8000db0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	b2db      	uxtb	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe9e 	bl	8000db0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe98 	bl	8000db0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fe93 	bl	8000db0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b40      	cmp	r3, #64	; 0x40
 800108e:	d102      	bne.n	8001096 <SD_SendCmd+0x5c>
 8001090:	2395      	movs	r3, #149	; 0x95
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e007      	b.n	80010a6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b48      	cmp	r3, #72	; 0x48
 800109a:	d102      	bne.n	80010a2 <SD_SendCmd+0x68>
 800109c:	2387      	movs	r3, #135	; 0x87
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e001      	b.n	80010a6 <SD_SendCmd+0x6c>
	else crc = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe81 	bl	8000db0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b4c      	cmp	r3, #76	; 0x4c
 80010b2:	d101      	bne.n	80010b8 <SD_SendCmd+0x7e>
 80010b4:	f7ff feb0 	bl	8000e18 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80010b8:	230a      	movs	r3, #10
 80010ba:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80010bc:	f7ff feac 	bl	8000e18 <SPI_RxByte>
 80010c0:	4603      	mov	r3, r0
 80010c2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80010c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da05      	bge.n	80010d8 <SD_SendCmd+0x9e>
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	73bb      	strb	r3, [r7, #14]
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f1      	bne.n	80010bc <SD_SendCmd+0x82>

	return res;
 80010d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SD_disk_initialize+0x14>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0d6      	b.n	80012a6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80010f8:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <SD_disk_initialize+0x1cc>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <SD_disk_initialize+0x2a>
 8001106:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <SD_disk_initialize+0x1cc>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	e0cb      	b.n	80012a6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800110e:	f7ff fec7 	bl	8000ea0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001112:	f7ff fe33 	bl	8000d7c <SELECT>

	/* check disk type */
	type = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800111a:	2100      	movs	r1, #0
 800111c:	2040      	movs	r0, #64	; 0x40
 800111e:	f7ff ff8c 	bl	800103a <SD_SendCmd>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 80a6 	bne.w	8001276 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800112a:	4b62      	ldr	r3, [pc, #392]	; (80012b4 <SD_disk_initialize+0x1d0>)
 800112c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001130:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001132:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001136:	2048      	movs	r0, #72	; 0x48
 8001138:	f7ff ff7f 	bl	800103a <SD_SendCmd>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d158      	bne.n	80011f4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e00c      	b.n	8001162 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001148:	7bfc      	ldrb	r4, [r7, #15]
 800114a:	f7ff fe65 	bl	8000e18 <SPI_RxByte>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4423      	add	r3, r4
 8001158:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d9ef      	bls.n	8001148 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001168:	7abb      	ldrb	r3, [r7, #10]
 800116a:	2b01      	cmp	r3, #1
 800116c:	f040 8083 	bne.w	8001276 <SD_disk_initialize+0x192>
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2baa      	cmp	r3, #170	; 0xaa
 8001174:	d17f      	bne.n	8001276 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001176:	2100      	movs	r1, #0
 8001178:	2077      	movs	r0, #119	; 0x77
 800117a:	f7ff ff5e 	bl	800103a <SD_SendCmd>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d807      	bhi.n	8001194 <SD_disk_initialize+0xb0>
 8001184:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001188:	2069      	movs	r0, #105	; 0x69
 800118a:	f7ff ff56 	bl	800103a <SD_SendCmd>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001194:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <SD_disk_initialize+0x1d0>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1eb      	bne.n	8001176 <SD_disk_initialize+0x92>
 800119e:	e000      	b.n	80011a2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80011a0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80011a2:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <SD_disk_initialize+0x1d0>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d064      	beq.n	8001276 <SD_disk_initialize+0x192>
 80011ac:	2100      	movs	r1, #0
 80011ae:	207a      	movs	r0, #122	; 0x7a
 80011b0:	f7ff ff43 	bl	800103a <SD_SendCmd>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d15d      	bne.n	8001276 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e00c      	b.n	80011da <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80011c0:	7bfc      	ldrb	r4, [r7, #15]
 80011c2:	f7ff fe29 	bl	8000e18 <SPI_RxByte>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4423      	add	r3, r4
 80011d0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	3301      	adds	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d9ef      	bls.n	80011c0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80011e0:	7a3b      	ldrb	r3, [r7, #8]
 80011e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SD_disk_initialize+0x10a>
 80011ea:	230c      	movs	r3, #12
 80011ec:	e000      	b.n	80011f0 <SD_disk_initialize+0x10c>
 80011ee:	2304      	movs	r3, #4
 80011f0:	73bb      	strb	r3, [r7, #14]
 80011f2:	e040      	b.n	8001276 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80011f4:	2100      	movs	r1, #0
 80011f6:	2077      	movs	r0, #119	; 0x77
 80011f8:	f7ff ff1f 	bl	800103a <SD_SendCmd>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d808      	bhi.n	8001214 <SD_disk_initialize+0x130>
 8001202:	2100      	movs	r1, #0
 8001204:	2069      	movs	r0, #105	; 0x69
 8001206:	f7ff ff18 	bl	800103a <SD_SendCmd>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d801      	bhi.n	8001214 <SD_disk_initialize+0x130>
 8001210:	2302      	movs	r3, #2
 8001212:	e000      	b.n	8001216 <SD_disk_initialize+0x132>
 8001214:	2301      	movs	r3, #1
 8001216:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d10e      	bne.n	800123c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800121e:	2100      	movs	r1, #0
 8001220:	2077      	movs	r0, #119	; 0x77
 8001222:	f7ff ff0a 	bl	800103a <SD_SendCmd>
 8001226:	4603      	mov	r3, r0
 8001228:	2b01      	cmp	r3, #1
 800122a:	d80e      	bhi.n	800124a <SD_disk_initialize+0x166>
 800122c:	2100      	movs	r1, #0
 800122e:	2069      	movs	r0, #105	; 0x69
 8001230:	f7ff ff03 	bl	800103a <SD_SendCmd>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <SD_disk_initialize+0x166>
 800123a:	e00d      	b.n	8001258 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800123c:	2100      	movs	r1, #0
 800123e:	2041      	movs	r0, #65	; 0x41
 8001240:	f7ff fefb 	bl	800103a <SD_SendCmd>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <SD_disk_initialize+0x1d0>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e1      	bne.n	8001218 <SD_disk_initialize+0x134>
 8001254:	e000      	b.n	8001258 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001256:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <SD_disk_initialize+0x1d0>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <SD_disk_initialize+0x18e>
 8001262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001266:	2050      	movs	r0, #80	; 0x50
 8001268:	f7ff fee7 	bl	800103a <SD_SendCmd>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SD_disk_initialize+0x192>
 8001272:	2300      	movs	r3, #0
 8001274:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001276:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <SD_disk_initialize+0x1d4>)
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800127c:	f7ff fd8b 	bl	8000d96 <DESELECT>
	SPI_RxByte();
 8001280:	f7ff fdca 	bl	8000e18 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <SD_disk_initialize+0x1cc>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <SD_disk_initialize+0x1cc>)
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e001      	b.n	80012a0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800129c:	f7ff fe42 	bl	8000f24 <SD_PowerOff>
	}

	return Stat;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <SD_disk_initialize+0x1cc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd90      	pop	{r4, r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20002879 	.word	0x20002879
 80012b8:	200000c8 	.word	0x200000c8

080012bc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SD_disk_status+0x14>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e002      	b.n	80012d6 <SD_disk_status+0x1a>
	return Stat;
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SD_disk_status+0x28>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000

080012e8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <SD_disk_read+0x1c>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <SD_disk_read+0x20>
 8001304:	2304      	movs	r3, #4
 8001306:	e051      	b.n	80013ac <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <SD_disk_read+0xcc>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SD_disk_read+0x32>
 8001316:	2303      	movs	r3, #3
 8001318:	e048      	b.n	80013ac <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <SD_disk_read+0xd0>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <SD_disk_read+0x44>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	025b      	lsls	r3, r3, #9
 800132a:	607b      	str	r3, [r7, #4]

	SELECT();
 800132c:	f7ff fd26 	bl	8000d7c <SELECT>

	if (count == 1)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d111      	bne.n	800135a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	2051      	movs	r0, #81	; 0x51
 800133a:	f7ff fe7e 	bl	800103a <SD_SendCmd>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d129      	bne.n	8001398 <SD_disk_read+0xb0>
 8001344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001348:	68b8      	ldr	r0, [r7, #8]
 800134a:	f7ff fe03 	bl	8000f54 <SD_RxDataBlock>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d021      	beq.n	8001398 <SD_disk_read+0xb0>
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	e01e      	b.n	8001398 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2052      	movs	r0, #82	; 0x52
 800135e:	f7ff fe6c 	bl	800103a <SD_SendCmd>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d117      	bne.n	8001398 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f7ff fdf1 	bl	8000f54 <SD_RxDataBlock>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00a      	beq.n	800138e <SD_disk_read+0xa6>
				buff += 512;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800137e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	3b01      	subs	r3, #1
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1ed      	bne.n	8001368 <SD_disk_read+0x80>
 800138c:	e000      	b.n	8001390 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800138e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	204c      	movs	r0, #76	; 0x4c
 8001394:	f7ff fe51 	bl	800103a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001398:	f7ff fcfd 	bl	8000d96 <DESELECT>
	SPI_RxByte();
 800139c:	f7ff fd3c 	bl	8000e18 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2301      	movne	r3, #1
 80013a8:	2300      	moveq	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000000 	.word	0x20000000
 80013b8:	200000c8 	.word	0x200000c8

080013bc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <SD_disk_write+0x1c>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <SD_disk_write+0x20>
 80013d8:	2304      	movs	r3, #4
 80013da:	e06b      	b.n	80014b4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <SD_disk_write+0x100>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SD_disk_write+0x32>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e062      	b.n	80014b4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <SD_disk_write+0x100>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SD_disk_write+0x44>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e059      	b.n	80014b4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <SD_disk_write+0x104>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <SD_disk_write+0x56>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	607b      	str	r3, [r7, #4]

	SELECT();
 8001412:	f7ff fcb3 	bl	8000d7c <SELECT>

	if (count == 1)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d110      	bne.n	800143e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	2058      	movs	r0, #88	; 0x58
 8001420:	f7ff fe0b 	bl	800103a <SD_SendCmd>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d13a      	bne.n	80014a0 <SD_disk_write+0xe4>
 800142a:	21fe      	movs	r1, #254	; 0xfe
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f7ff fdc1 	bl	8000fb4 <SD_TxDataBlock>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d033      	beq.n	80014a0 <SD_disk_write+0xe4>
			count = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	e030      	b.n	80014a0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <SD_disk_write+0x104>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800144a:	2100      	movs	r1, #0
 800144c:	2077      	movs	r0, #119	; 0x77
 800144e:	f7ff fdf4 	bl	800103a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	2057      	movs	r0, #87	; 0x57
 8001456:	f7ff fdf0 	bl	800103a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	2059      	movs	r0, #89	; 0x59
 800145e:	f7ff fdec 	bl	800103a <SD_SendCmd>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d11b      	bne.n	80014a0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001468:	21fc      	movs	r1, #252	; 0xfc
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f7ff fda2 	bl	8000fb4 <SD_TxDataBlock>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00a      	beq.n	800148c <SD_disk_write+0xd0>
				buff += 512;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800147c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ee      	bne.n	8001468 <SD_disk_write+0xac>
 800148a:	e000      	b.n	800148e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800148c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800148e:	21fd      	movs	r1, #253	; 0xfd
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fd8f 	bl	8000fb4 <SD_TxDataBlock>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <SD_disk_write+0xe4>
			{
				count = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80014a0:	f7ff fc79 	bl	8000d96 <DESELECT>
	SPI_RxByte();
 80014a4:	f7ff fcb8 	bl	8000e18 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2301      	movne	r3, #1
 80014b0:	2300      	moveq	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	200000c8 	.word	0x200000c8

080014c4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	603a      	str	r2, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	460b      	mov	r3, r1
 80014d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SD_disk_ioctl+0x1e>
 80014de:	2304      	movs	r3, #4
 80014e0:	e113      	b.n	800170a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d121      	bne.n	8001532 <SD_disk_ioctl+0x6e>
	{
		switch (*ptr)
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d009      	beq.n	800150a <SD_disk_ioctl+0x46>
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <SD_disk_ioctl+0x52>
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d115      	bne.n	800152a <SD_disk_ioctl+0x66>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80014fe:	f7ff fd11 	bl	8000f24 <SD_PowerOff>
			res = RES_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001508:	e0fd      	b.n	8001706 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800150a:	f7ff fcc9 	bl	8000ea0 <SD_PowerOn>
			res = RES_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001514:	e0f7      	b.n	8001706 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	1c5c      	adds	r4, r3, #1
 800151a:	f7ff fd0f 	bl	8000f3c <SD_CheckPower>
 800151e:	4603      	mov	r3, r0
 8001520:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001522:	2300      	movs	r3, #0
 8001524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001528:	e0ed      	b.n	8001706 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800152a:	2304      	movs	r3, #4
 800152c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001530:	e0e9      	b.n	8001706 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001532:	4b78      	ldr	r3, [pc, #480]	; (8001714 <SD_disk_ioctl+0x250>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SD_disk_ioctl+0x80>
 8001540:	2303      	movs	r3, #3
 8001542:	e0e2      	b.n	800170a <SD_disk_ioctl+0x246>

		SELECT();
 8001544:	f7ff fc1a 	bl	8000d7c <SELECT>

		switch (ctrl)
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	2b0d      	cmp	r3, #13
 800154c:	f200 80cc 	bhi.w	80016e8 <SD_disk_ioctl+0x224>
 8001550:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <SD_disk_ioctl+0x94>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	08001653 	.word	0x08001653
 800155c:	08001591 	.word	0x08001591
 8001560:	08001643 	.word	0x08001643
 8001564:	080016e9 	.word	0x080016e9
 8001568:	080016e9 	.word	0x080016e9
 800156c:	080016e9 	.word	0x080016e9
 8001570:	080016e9 	.word	0x080016e9
 8001574:	080016e9 	.word	0x080016e9
 8001578:	080016e9 	.word	0x080016e9
 800157c:	080016e9 	.word	0x080016e9
 8001580:	080016e9 	.word	0x080016e9
 8001584:	08001665 	.word	0x08001665
 8001588:	08001689 	.word	0x08001689
 800158c:	080016ad 	.word	0x080016ad
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001590:	2100      	movs	r1, #0
 8001592:	2049      	movs	r0, #73	; 0x49
 8001594:	f7ff fd51 	bl	800103a <SD_SendCmd>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 80a8 	bne.w	80016f0 <SD_disk_ioctl+0x22c>
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2110      	movs	r1, #16
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fcd4 	bl	8000f54 <SD_RxDataBlock>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 809e 	beq.w	80016f0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80015b4:	7b3b      	ldrb	r3, [r7, #12]
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d10e      	bne.n	80015dc <SD_disk_ioctl+0x118>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015be:	7d7b      	ldrb	r3, [r7, #21]
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	7d3b      	ldrb	r3, [r7, #20]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80015d2:	8bfb      	ldrh	r3, [r7, #30]
 80015d4:	029a      	lsls	r2, r3, #10
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e02e      	b.n	800163a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80015dc:	7c7b      	ldrb	r3, [r7, #17]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	7dbb      	ldrb	r3, [r7, #22]
 80015e6:	09db      	lsrs	r3, r3, #7
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	7d7b      	ldrb	r3, [r7, #21]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f003 0306 	and.w	r3, r3, #6
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	3302      	adds	r3, #2
 8001600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001604:	7d3b      	ldrb	r3, [r7, #20]
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	b2db      	uxtb	r3, r3
 800160a:	b29a      	uxth	r2, r3
 800160c:	7cfb      	ldrb	r3, [r7, #19]
 800160e:	b29b      	uxth	r3, r3
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	b29b      	uxth	r3, r3
 8001614:	4413      	add	r3, r2
 8001616:	b29a      	uxth	r2, r3
 8001618:	7cbb      	ldrb	r3, [r7, #18]
 800161a:	029b      	lsls	r3, r3, #10
 800161c:	b29b      	uxth	r3, r3
 800161e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001622:	b29b      	uxth	r3, r3
 8001624:	4413      	add	r3, r2
 8001626:	b29b      	uxth	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800162c:	8bfa      	ldrh	r2, [r7, #30]
 800162e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001632:	3b09      	subs	r3, #9
 8001634:	409a      	lsls	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001640:	e056      	b.n	80016f0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001650:	e055      	b.n	80016fe <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001652:	f7ff fc0b 	bl	8000e6c <SD_ReadyWait>
 8001656:	4603      	mov	r3, r0
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d14b      	bne.n	80016f4 <SD_disk_ioctl+0x230>
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e047      	b.n	80016f4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001664:	2100      	movs	r1, #0
 8001666:	2049      	movs	r0, #73	; 0x49
 8001668:	f7ff fce7 	bl	800103a <SD_SendCmd>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d142      	bne.n	80016f8 <SD_disk_ioctl+0x234>
 8001672:	2110      	movs	r1, #16
 8001674:	6a38      	ldr	r0, [r7, #32]
 8001676:	f7ff fc6d 	bl	8000f54 <SD_RxDataBlock>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d03b      	beq.n	80016f8 <SD_disk_ioctl+0x234>
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001686:	e037      	b.n	80016f8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001688:	2100      	movs	r1, #0
 800168a:	204a      	movs	r0, #74	; 0x4a
 800168c:	f7ff fcd5 	bl	800103a <SD_SendCmd>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d132      	bne.n	80016fc <SD_disk_ioctl+0x238>
 8001696:	2110      	movs	r1, #16
 8001698:	6a38      	ldr	r0, [r7, #32]
 800169a:	f7ff fc5b 	bl	8000f54 <SD_RxDataBlock>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d02b      	beq.n	80016fc <SD_disk_ioctl+0x238>
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016aa:	e027      	b.n	80016fc <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80016ac:	2100      	movs	r1, #0
 80016ae:	207a      	movs	r0, #122	; 0x7a
 80016b0:	f7ff fcc3 	bl	800103a <SD_SendCmd>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d116      	bne.n	80016e8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016c0:	e00b      	b.n	80016da <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80016c2:	6a3c      	ldr	r4, [r7, #32]
 80016c4:	1c63      	adds	r3, r4, #1
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	f7ff fba6 	bl	8000e18 <SPI_RxByte>
 80016cc:	4603      	mov	r3, r0
 80016ce:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80016d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016d4:	3301      	adds	r3, #1
 80016d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d9ef      	bls.n	80016c2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80016e8:	2304      	movs	r3, #4
 80016ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016ee:	e006      	b.n	80016fe <SD_disk_ioctl+0x23a>
			break;
 80016f0:	bf00      	nop
 80016f2:	e004      	b.n	80016fe <SD_disk_ioctl+0x23a>
			break;
 80016f4:	bf00      	nop
 80016f6:	e002      	b.n	80016fe <SD_disk_ioctl+0x23a>
			break;
 80016f8:	bf00      	nop
 80016fa:	e000      	b.n	80016fe <SD_disk_ioctl+0x23a>
			break;
 80016fc:	bf00      	nop
		}

		DESELECT();
 80016fe:	f7ff fb4a 	bl	8000d96 <DESELECT>
		SPI_RxByte();
 8001702:	f7ff fb89 	bl	8000e18 <SPI_RxByte>
	}

	return res;
 8001706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800170a:	4618      	mov	r0, r3
 800170c:	372c      	adds	r7, #44	; 0x2c
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000

08001718 <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void send_uart(char *string)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	uint8_t len =strlen(string);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7fe fd65 	bl	80001f0 <strlen>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *) string, len, 2000);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	b29a      	uxth	r2, r3
 800172e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <send_uart+0x2c>)
 8001736:	f003 fd17 	bl	8005168 <HAL_UART_Transmit>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000314 	.word	0x20000314

08001748 <bufclear>:
	while(*buff != '\0')
		i++;
	return i;
}
void bufclear(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
	for(int i = 0; i<1024; i++)
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	e007      	b.n	8001764 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 8001754:	4a08      	ldr	r2, [pc, #32]	; (8001778 <bufclear+0x30>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<1024; i++)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176a:	dbf3      	blt.n	8001754 <bufclear+0xc>
	}
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	200013d4 	.word	0x200013d4

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b598      	push	{r3, r4, r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001780:	f000 fd29 	bl	80021d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001784:	f000 f8c8 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001788:	f000 f9ac 	bl	8001ae4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800178c:	f000 f93c 	bl	8001a08 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001790:	f000 f978 	bl	8001a84 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001794:	f004 fb1e 	bl	8005dd4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8001798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800179c:	f000 fd90 	bl	80022c0 <HAL_Delay>


  fresult = f_mount(&fs, "1", 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	494c      	ldr	r1, [pc, #304]	; (80018d4 <main+0x158>)
 80017a4:	484c      	ldr	r0, [pc, #304]	; (80018d8 <main+0x15c>)
 80017a6:	f006 fd5f 	bl	8008268 <f_mount>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <main+0x160>)
 80017b0:	701a      	strb	r2, [r3, #0]
  if(fresult == FR_OK)
 80017b2:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <main+0x160>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 8083 	bne.w	80018c2 <main+0x146>
  {
	  send_uart("SD CARD mount successfuly\n");
 80017bc:	4848      	ldr	r0, [pc, #288]	; (80018e0 <main+0x164>)
 80017be:	f7ff ffab 	bl	8001718 <send_uart>

	  f_getfree("", &fre_clust, &pfs);
 80017c2:	4a48      	ldr	r2, [pc, #288]	; (80018e4 <main+0x168>)
 80017c4:	4948      	ldr	r1, [pc, #288]	; (80018e8 <main+0x16c>)
 80017c6:	4849      	ldr	r0, [pc, #292]	; (80018ec <main+0x170>)
 80017c8:	f007 fafb 	bl	8008dc2 <f_getfree>

	  total = (uint32_t)((pfs->n_fatent-2)* pfs->csize * 0.5);
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <main+0x168>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	3b02      	subs	r3, #2
 80017d4:	4a43      	ldr	r2, [pc, #268]	; (80018e4 <main+0x168>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	8952      	ldrh	r2, [r2, #10]
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fea0 	bl	8000524 <__aeabi_ui2d>
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <main+0x174>)
 80017ea:	f7fe ff15 	bl	8000618 <__aeabi_dmul>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4618      	mov	r0, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	f7ff f921 	bl	8000a3c <__aeabi_d2uiz>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <main+0x178>)
 80017fe:	601a      	str	r2, [r3, #0]
	  sprintf(buffer, "SD CARD Total size: \t%lu\n", total);
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <main+0x178>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	493c      	ldr	r1, [pc, #240]	; (80018f8 <main+0x17c>)
 8001808:	483c      	ldr	r0, [pc, #240]	; (80018fc <main+0x180>)
 800180a:	f007 fdbd 	bl	8009388 <siprintf>
	  send_uart(buffer);
 800180e:	483b      	ldr	r0, [pc, #236]	; (80018fc <main+0x180>)
 8001810:	f7ff ff82 	bl	8001718 <send_uart>
	  bufclear();
 8001814:	f7ff ff98 	bl	8001748 <bufclear>
	  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001818:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <main+0x168>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	895b      	ldrh	r3, [r3, #10]
 800181e:	461a      	mov	r2, r3
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <main+0x16c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fb03 f302 	mul.w	r3, r3, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe7b 	bl	8000524 <__aeabi_ui2d>
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <main+0x174>)
 8001834:	f7fe fef0 	bl	8000618 <__aeabi_dmul>
 8001838:	4603      	mov	r3, r0
 800183a:	460c      	mov	r4, r1
 800183c:	4618      	mov	r0, r3
 800183e:	4621      	mov	r1, r4
 8001840:	f7ff f8fc 	bl	8000a3c <__aeabi_d2uiz>
 8001844:	4602      	mov	r2, r0
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <main+0x184>)
 8001848:	601a      	str	r2, [r3, #0]
	  sprintf(buffer, "SD CARD free size: \t%lu\n", free_space);
 800184a:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <main+0x184>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	492c      	ldr	r1, [pc, #176]	; (8001904 <main+0x188>)
 8001852:	482a      	ldr	r0, [pc, #168]	; (80018fc <main+0x180>)
 8001854:	f007 fd98 	bl	8009388 <siprintf>
	  send_uart(buffer);
 8001858:	4828      	ldr	r0, [pc, #160]	; (80018fc <main+0x180>)
 800185a:	f7ff ff5d 	bl	8001718 <send_uart>
	  bufclear();
 800185e:	f7ff ff73 	bl	8001748 <bufclear>

	  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001862:	2213      	movs	r2, #19
 8001864:	4928      	ldr	r1, [pc, #160]	; (8001908 <main+0x18c>)
 8001866:	4829      	ldr	r0, [pc, #164]	; (800190c <main+0x190>)
 8001868:	f006 fd44 	bl	80082f4 <f_open>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <main+0x160>)
 8001872:	701a      	strb	r2, [r3, #0]

	  fresult = f_puts("Pierwszy zapis na karcie SD\n", &fil);
 8001874:	4925      	ldr	r1, [pc, #148]	; (800190c <main+0x190>)
 8001876:	4826      	ldr	r0, [pc, #152]	; (8001910 <main+0x194>)
 8001878:	f007 fc0d 	bl	8009096 <f_puts>
 800187c:	4603      	mov	r3, r0
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <main+0x160>)
 8001882:	701a      	strb	r2, [r3, #0]

	  fresult = f_close(&fil);
 8001884:	4821      	ldr	r0, [pc, #132]	; (800190c <main+0x190>)
 8001886:	f007 fa72 	bl	8008d6e <f_close>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <main+0x160>)
 8001890:	701a      	strb	r2, [r3, #0]

	  fresult = f_open(&fil, "file1.txt", FA_READ);
 8001892:	2201      	movs	r2, #1
 8001894:	491c      	ldr	r1, [pc, #112]	; (8001908 <main+0x18c>)
 8001896:	481d      	ldr	r0, [pc, #116]	; (800190c <main+0x190>)
 8001898:	f006 fd2c 	bl	80082f4 <f_open>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <main+0x160>)
 80018a2:	701a      	strb	r2, [r3, #0]

	  f_gets(buffer, sizeof(buffer), &fil);
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <main+0x190>)
 80018a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018aa:	4814      	ldr	r0, [pc, #80]	; (80018fc <main+0x180>)
 80018ac:	f007 fb3e 	bl	8008f2c <f_gets>

	  send_uart(buffer);
 80018b0:	4812      	ldr	r0, [pc, #72]	; (80018fc <main+0x180>)
 80018b2:	f7ff ff31 	bl	8001718 <send_uart>

	  f_close(&fil);
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <main+0x190>)
 80018b8:	f007 fa59 	bl	8008d6e <f_close>

	  bufclear();
 80018bc:	f7ff ff44 	bl	8001748 <bufclear>
 80018c0:	e002      	b.n	80018c8 <main+0x14c>
  }
  else
  	  send_uart("Error in monting SD CARD\n");
 80018c2:	4814      	ldr	r0, [pc, #80]	; (8001914 <main+0x198>)
 80018c4:	f7ff ff28 	bl	8001718 <send_uart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //ConDetect(1);
	  HAL_Delay(1000);
 80018c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018cc:	f000 fcf8 	bl	80022c0 <HAL_Delay>
 80018d0:	e7fa      	b.n	80018c8 <main+0x14c>
 80018d2:	bf00      	nop
 80018d4:	08009bac 	.word	0x08009bac
 80018d8:	20000394 	.word	0x20000394
 80018dc:	200017dc 	.word	0x200017dc
 80018e0:	08009bb0 	.word	0x08009bb0
 80018e4:	200017d8 	.word	0x200017d8
 80018e8:	2000030c 	.word	0x2000030c
 80018ec:	08009bcc 	.word	0x08009bcc
 80018f0:	3fe00000 	.word	0x3fe00000
 80018f4:	20001844 	.word	0x20001844
 80018f8:	08009bd0 	.word	0x08009bd0
 80018fc:	200013d4 	.word	0x200013d4
 8001900:	200013d0 	.word	0x200013d0
 8001904:	08009bec 	.word	0x08009bec
 8001908:	08009c08 	.word	0x08009c08
 800190c:	20001848 	.word	0x20001848
 8001910:	08009c14 	.word	0x08009c14
 8001914:	08009c34 	.word	0x08009c34

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0ba      	sub	sp, #232	; 0xe8
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001922:	2244      	movs	r2, #68	; 0x44
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f007 fd26 	bl	8009378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	228c      	movs	r2, #140	; 0x8c
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f007 fd18 	bl	8009378 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001948:	2310      	movs	r3, #16
 800194a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800194e:	2301      	movs	r3, #1
 8001950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800195a:	2360      	movs	r3, #96	; 0x60
 800195c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001966:	2301      	movs	r3, #1
 8001968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001972:	2328      	movs	r3, #40	; 0x28
 8001974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001984:	2302      	movs	r3, #2
 8001986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fa10 	bl	8002db4 <HAL_RCC_OscConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800199a:	f000 f967 	bl	8001c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	230f      	movs	r3, #15
 80019a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a4:	2303      	movs	r3, #3
 80019a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019c0:	2104      	movs	r1, #4
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 fe1c 	bl	8003600 <HAL_RCC_ClockConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80019ce:	f000 f94d 	bl	8001c6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019d2:	2304      	movs	r3, #4
 80019d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 f813 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019e8:	f000 f940 	bl	8001c6c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019f0:	f001 f930 	bl	8002c54 <HAL_PWREx_ControlVoltageScaling>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80019fa:	f000 f937 	bl	8001c6c <Error_Handler>
  }
}
 80019fe:	bf00      	nop
 8001a00:	37e8      	adds	r7, #232	; 0xe8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <MX_SPI1_Init+0x78>)
 8001a10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a3e:	2210      	movs	r2, #16
 8001a40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a56:	2207      	movs	r2, #7
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a62:	2208      	movs	r2, #8
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a68:	f002 fc90 	bl	800438c <HAL_SPI_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a72:	f000 f8fb 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200017e0 	.word	0x200017e0
 8001a80:	40013000 	.word	0x40013000

08001a84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <MX_USART3_UART_Init+0x5c>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_USART3_UART_Init+0x58>)
 8001ac8:	f003 fb00 	bl	80050cc <HAL_UART_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ad2:	f000 f8cb 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000314 	.word	0x20000314
 8001ae0:	40004800 	.word	0x40004800

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a42      	ldr	r2, [pc, #264]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b36:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <MX_GPIO_Init+0x124>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2110      	movs	r1, #16
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4a:	f001 f83d 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDIO_LED_Pin|SPI1_LED_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001b54:	482d      	ldr	r0, [pc, #180]	; (8001c0c <MX_GPIO_Init+0x128>)
 8001b56:	f001 f837 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f000 fe7e 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CHC_Pin SDIO_CHC_Pin */
  GPIO_InitStruct.Pin = SPI_CHC_Pin|SDIO_CHC_Pin;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <MX_GPIO_Init+0x12c>)
 8001b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4820      	ldr	r0, [pc, #128]	; (8001c0c <MX_GPIO_Init+0x128>)
 8001b8c:	f000 fe72 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_LED_Pin SPI1_LED_Pin */
  GPIO_InitStruct.Pin = SDIO_LED_Pin|SPI1_LED_Pin;
 8001b90:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4818      	ldr	r0, [pc, #96]	; (8001c0c <MX_GPIO_Init+0x128>)
 8001baa:	f000 fe63 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CD_Pin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 8001bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4812      	ldr	r0, [pc, #72]	; (8001c0c <MX_GPIO_Init+0x128>)
 8001bc4:	f000 fe56 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480e      	ldr	r0, [pc, #56]	; (8001c14 <MX_GPIO_Init+0x130>)
 8001bdc:	f000 fe4a 	bl	8002874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2100      	movs	r1, #0
 8001be4:	2006      	movs	r0, #6
 8001be6:	f000 fc68 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bea:	2006      	movs	r0, #6
 8001bec:	f000 fc81 	bl	80024f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2007      	movs	r0, #7
 8001bf6:	f000 fc60 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001bfa:	2007      	movs	r0, #7
 8001bfc:	f000 fc79 	bl	80024f2 <HAL_NVIC_EnableIRQ>

}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	10210000 	.word	0x10210000
 8001c14:	48001000 	.word	0x48001000

08001c18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SPI_CHC_Pin)
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10d      	bne.n	8001c44 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		ConDetect(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f000 f827 	bl	8001c7c <ConDetect>
		for(int i=0; i<1000; i++);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	e002      	b.n	8001c3a <HAL_GPIO_EXTI_Callback+0x22>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c40:	dbf8      	blt.n	8001c34 <HAL_GPIO_EXTI_Callback+0x1c>
	else if(GPIO_Pin == SDIO_CHC_Pin)
	{
		ConDetect(0);
		for(int i=0; i<1000; i++);
	}
}
 8001c42:	e00f      	b.n	8001c64 <HAL_GPIO_EXTI_Callback+0x4c>
	else if(GPIO_Pin == SDIO_CHC_Pin)
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d10c      	bne.n	8001c64 <HAL_GPIO_EXTI_Callback+0x4c>
		ConDetect(0);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f000 f816 	bl	8001c7c <ConDetect>
		for(int i=0; i<1000; i++);
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_EXTI_Callback+0x44>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c62:	dbf8      	blt.n	8001c56 <HAL_GPIO_EXTI_Callback+0x3e>
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <ConDetect>:
#include <stdbool.h>
#include "main.h"
#include "fatfs.h"

void ConDetect(bool type)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4602      	mov	r2, r0
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
	FATFS fs;
	FRESULT fresult;
	fresult = f_mount(&fs, "1", 1);
 8001c90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c94:	3b1c      	subs	r3, #28
 8001c96:	2201      	movs	r2, #1
 8001c98:	493c      	ldr	r1, [pc, #240]	; (8001d8c <ConDetect+0x110>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f006 fae4 	bl	8008268 <f_mount>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001ca6:	f102 0207 	add.w	r2, r2, #7
 8001caa:	7013      	strb	r3, [r2, #0]
	if(type == 1)
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d02a      	beq.n	8001d0e <ConDetect+0x92>
	{
		send_uart("Wybrano SPI\n");
 8001cb8:	4835      	ldr	r0, [pc, #212]	; (8001d90 <ConDetect+0x114>)
 8001cba:	f7ff fd2d 	bl	8001718 <send_uart>
		bool stan = HAL_GPIO_ReadPin(SPI1_CD_GPIO_Port, SPI1_CD_Pin);
 8001cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc2:	4834      	ldr	r0, [pc, #208]	; (8001d94 <ConDetect+0x118>)
 8001cc4:	f000 ff68 	bl	8002b98 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001cd6:	f102 0205 	add.w	r2, r2, #5
 8001cda:	7013      	strb	r3, [r2, #0]
		if(stan == 1 )
 8001cdc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001ce0:	f103 0305 	add.w	r3, r3, #5
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <ConDetect+0x80>
		{
			send_uart(" Karta podlaczona do SPI\n");
 8001cea:	482b      	ldr	r0, [pc, #172]	; (8001d98 <ConDetect+0x11c>)
 8001cec:	f7ff fd14 	bl	8001718 <send_uart>
			HAL_GPIO_WritePin(SPI1_LED_GPIO_Port, SPI1_LED_Pin, GPIO_PIN_SET);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	4827      	ldr	r0, [pc, #156]	; (8001d94 <ConDetect+0x118>)
 8001cf6:	f000 ff67 	bl	8002bc8 <HAL_GPIO_WritePin>
	else
	{
		send_uart(" blad\n");
	}

}
 8001cfa:	e040      	b.n	8001d7e <ConDetect+0x102>
			send_uart("Brak polaczenia katy po SPI\n");
 8001cfc:	4827      	ldr	r0, [pc, #156]	; (8001d9c <ConDetect+0x120>)
 8001cfe:	f7ff fd0b 	bl	8001718 <send_uart>
			HAL_GPIO_WritePin(SPI1_LED_GPIO_Port, SPI1_LED_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	4823      	ldr	r0, [pc, #140]	; (8001d94 <ConDetect+0x118>)
 8001d08:	f000 ff5e 	bl	8002bc8 <HAL_GPIO_WritePin>
}
 8001d0c:	e037      	b.n	8001d7e <ConDetect+0x102>
	else if(type == 0)
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	3b01      	subs	r3, #1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f083 0301 	eor.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d02b      	beq.n	8001d78 <ConDetect+0xfc>
		send_uart(" Wybrano SDI\n");
 8001d20:	481f      	ldr	r0, [pc, #124]	; (8001da0 <ConDetect+0x124>)
 8001d22:	f7ff fcf9 	bl	8001718 <send_uart>
		bool stan = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 8001d26:	2101      	movs	r1, #1
 8001d28:	481e      	ldr	r0, [pc, #120]	; (8001da4 <ConDetect+0x128>)
 8001d2a:	f000 ff35 	bl	8002b98 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001d3c:	f102 0206 	add.w	r2, r2, #6
 8001d40:	7013      	strb	r3, [r2, #0]
		if(stan == 1 )
 8001d42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001d46:	f103 0306 	add.w	r3, r3, #6
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <ConDetect+0xe8>
			send_uart(" Karta podlaczona do SDIO\n");
 8001d50:	4815      	ldr	r0, [pc, #84]	; (8001da8 <ConDetect+0x12c>)
 8001d52:	f7ff fce1 	bl	8001718 <send_uart>
			HAL_GPIO_WritePin(SDIO_LED_GPIO_Port, SDIO_LED_Pin, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <ConDetect+0x118>)
 8001d5e:	f000 ff33 	bl	8002bc8 <HAL_GPIO_WritePin>
}
 8001d62:	e00c      	b.n	8001d7e <ConDetect+0x102>
			send_uart("Brak polaczenia katy po SDIO\n");
 8001d64:	4811      	ldr	r0, [pc, #68]	; (8001dac <ConDetect+0x130>)
 8001d66:	f7ff fcd7 	bl	8001718 <send_uart>
			HAL_GPIO_WritePin(SDIO_LED_GPIO_Port, SDIO_LED_Pin, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d70:	4808      	ldr	r0, [pc, #32]	; (8001d94 <ConDetect+0x118>)
 8001d72:	f000 ff29 	bl	8002bc8 <HAL_GPIO_WritePin>
}
 8001d76:	e002      	b.n	8001d7e <ConDetect+0x102>
		send_uart(" blad\n");
 8001d78:	480d      	ldr	r0, [pc, #52]	; (8001db0 <ConDetect+0x134>)
 8001d7a:	f7ff fccd 	bl	8001718 <send_uart>
}
 8001d7e:	bf00      	nop
 8001d80:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	08009c50 	.word	0x08009c50
 8001d90:	08009c54 	.word	0x08009c54
 8001d94:	48000400 	.word	0x48000400
 8001d98:	08009c64 	.word	0x08009c64
 8001d9c:	08009c80 	.word	0x08009c80
 8001da0:	08009ca0 	.word	0x08009ca0
 8001da4:	48001000 	.word	0x48001000
 8001da8:	08009cb0 	.word	0x08009cb0
 8001dac:	08009ccc 	.word	0x08009ccc
 8001db0:	08009cec 	.word	0x08009cec

08001db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_MspInit+0x80>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_MspInit+0x80>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_MspInit+0x80>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_MspInit+0x80>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_MspInit+0x80>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_MspInit+0x80>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2001      	movs	r0, #1
 8001df0:	f000 fb63 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f000 fb7c 	bl	80024f2 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2004      	movs	r0, #4
 8001e00:	f000 fb5b 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001e04:	2004      	movs	r0, #4
 8001e06:	f000 fb74 	bl	80024f2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2005      	movs	r0, #5
 8001e10:	f000 fb53 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e14:	2005      	movs	r0, #5
 8001e16:	f000 fb6c 	bl	80024f2 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2051      	movs	r0, #81	; 0x51
 8001e20:	f000 fb4b 	bl	80024ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001e24:	2051      	movs	r0, #81	; 0x51
 8001e26:	f000 fb64 	bl	80024f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_SPI_MspInit+0x8c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d130      	bne.n	8001ebc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e64:	6613      	str	r3, [r2, #96]	; 0x60
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e8a:	23e0      	movs	r3, #224	; 0xe0
 8001e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea8:	f000 fce4 	bl	8002874 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2023      	movs	r0, #35	; 0x23
 8001eb2:	f000 fb02 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001eb6:	2023      	movs	r0, #35	; 0x23
 8001eb8:	f000 fb1b 	bl	80024f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40013000 	.word	0x40013000
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <HAL_UART_MspInit+0x8c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d130      	bne.n	8001f50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_UART_MspInit+0x90>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f30:	2307      	movs	r3, #7
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4809      	ldr	r0, [pc, #36]	; (8001f60 <HAL_UART_MspInit+0x94>)
 8001f3c:	f000 fc9a 	bl	8002874 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2100      	movs	r1, #0
 8001f44:	2027      	movs	r0, #39	; 0x27
 8001f46:	f000 fab8 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f4a:	2027      	movs	r0, #39	; 0x27
 8001f4c:	f000 fad1 	bl	80024f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f50:	bf00      	nop
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40004800 	.word	0x40004800
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	48000400 	.word	0x48000400

08001f64 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <SDTimer_Handler+0x40>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <SDTimer_Handler+0x1c>
    Timer1--;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <SDTimer_Handler+0x40>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <SDTimer_Handler+0x40>)
 8001f7e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <SDTimer_Handler+0x44>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d006      	beq.n	8001f98 <SDTimer_Handler+0x34>
    Timer2--;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <SDTimer_Handler+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SDTimer_Handler+0x44>)
 8001f96:	701a      	strb	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20002879 	.word	0x20002879
 8001fa8:	20002878 	.word	0x20002878

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <SysTick_Handler+0x30>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <SysTick_Handler+0x30>)
 800200c:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <SysTick_Handler+0x30>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b09      	cmp	r3, #9
 8002016:	d904      	bls.n	8002022 <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <SysTick_Handler+0x30>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 800201e:	f7ff ffa1 	bl	8001f64 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002022:	f000 f92d 	bl	8002280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200000ca 	.word	0x200000ca

08002030 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8002034:	f000 fe64 	bl	8002d00 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002040:	f000 fab2 	bl	80025a8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800205a:	2001      	movs	r0, #1
 800205c:	f000 fdcc 	bl	8002bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002068:	2002      	movs	r0, #2
 800206a:	f000 fdc5 	bl	8002bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <SPI1_IRQHandler+0x10>)
 800207a:	f002 fdab 	bl	8004bd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200017e0 	.word	0x200017e0

08002088 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <USART3_IRQHandler+0x10>)
 800208e:	f003 f8ff 	bl	8005290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000314 	.word	0x20000314

0800209c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <_sbrk+0x5c>)
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <_sbrk+0x60>)
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <_sbrk+0x64>)
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <_sbrk+0x68>)
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d207      	bcs.n	80020ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020dc:	f007 f922 	bl	8009324 <__errno>
 80020e0:	4602      	mov	r2, r0
 80020e2:	230c      	movs	r3, #12
 80020e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	e009      	b.n	8002100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <_sbrk+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <_sbrk+0x64>)
 80020fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20050000 	.word	0x20050000
 800210c:	00000400 	.word	0x00000400
 8002110:	200000cc 	.word	0x200000cc
 8002114:	200048f8 	.word	0x200048f8

08002118 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <SystemInit+0x64>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	4a16      	ldr	r2, [pc, #88]	; (800217c <SystemInit+0x64>)
 8002124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <SystemInit+0x68>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a13      	ldr	r2, [pc, #76]	; (8002180 <SystemInit+0x68>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <SystemInit+0x68>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <SystemInit+0x68>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <SystemInit+0x68>)
 8002144:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002148:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800214c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <SystemInit+0x68>)
 8002150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002154:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <SystemInit+0x68>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <SystemInit+0x68>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <SystemInit+0x68>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <SystemInit+0x64>)
 800216a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800216e:	609a      	str	r2, [r3, #8]
#endif
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	40021000 	.word	0x40021000

08002184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002188:	f7ff ffc6 	bl	8002118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800218c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800218e:	e003      	b.n	8002198 <LoopCopyDataInit>

08002190 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002192:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002194:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002196:	3104      	adds	r1, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002198:	480a      	ldr	r0, [pc, #40]	; (80021c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800219c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800219e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80021a0:	d3f6      	bcc.n	8002190 <CopyDataInit>
	ldr	r2, =_sbss
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80021a4:	e002      	b.n	80021ac <LoopFillZerobss>

080021a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80021a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80021a8:	f842 3b04 	str.w	r3, [r2], #4

080021ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <LoopForever+0x16>)
	cmp	r2, r3
 80021ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80021b0:	d3f9      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b2:	f007 f8bd 	bl	8009330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021b6:	f7ff fae1 	bl	800177c <main>

080021ba <LoopForever>:

LoopForever:
    b LoopForever
 80021ba:	e7fe      	b.n	80021ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021bc:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80021c0:	0800a208 	.word	0x0800a208
	ldr	r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021c8:	200000ac 	.word	0x200000ac
	ldr	r2, =_sbss
 80021cc:	200000ac 	.word	0x200000ac
	ldr	r3, = _ebss
 80021d0:	200048f4 	.word	0x200048f4

080021d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC1_2_IRQHandler>

080021d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 f95f 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021e6:	2000      	movs	r0, #0
 80021e8:	f000 f80e 	bl	8002208 <HAL_InitTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	71fb      	strb	r3, [r7, #7]
 80021f6:	e001      	b.n	80021fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021f8:	f7ff fddc 	bl	8001db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021fc:	79fb      	ldrb	r3, [r7, #7]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_InitTick+0x6c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_InitTick+0x70>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_InitTick+0x6c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f96b 	bl	800250e <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d809      	bhi.n	8002258 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f000 f935 	bl	80024ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_InitTick+0x74>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e007      	b.n	8002268 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e004      	b.n	8002268 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e001      	b.n	8002268 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000000c 	.word	0x2000000c
 8002278:	20000004 	.word	0x20000004
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x20>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_IncTick+0x24>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4413      	add	r3, r2
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_IncTick+0x24>)
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	2000000c 	.word	0x2000000c
 80022a4:	2000287c 	.word	0x2000287c

080022a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return uwTick;
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_GetTick+0x14>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	2000287c 	.word	0x2000287c

080022c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff ffee 	bl	80022a8 <HAL_GetTick>
 80022cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d8:	d005      	beq.n	80022e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_Delay+0x40>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e6:	bf00      	nop
 80022e8:	f7ff ffde 	bl	80022a8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d8f7      	bhi.n	80022e8 <HAL_Delay+0x28>
  {
  }
}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000000c 	.word	0x2000000c

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800232c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4907      	ldr	r1, [pc, #28]	; (80023a0 <__NVIC_EnableIRQ+0x38>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	; (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	; (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002470:	d301      	bcc.n	8002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <SysTick_Config+0x40>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247e:	210f      	movs	r1, #15
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7ff ff8e 	bl	80023a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <SysTick_Config+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <SysTick_Config+0x40>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff29 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024cc:	f7ff ff3e 	bl	800234c <__NVIC_GetPriorityGrouping>
 80024d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff8e 	bl	80023f8 <NVIC_EncodePriority>
 80024dc:	4602      	mov	r2, r0
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff5d 	bl	80023a4 <__NVIC_SetPriority>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff31 	bl	8002368 <__NVIC_EnableIRQ>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffa2 	bl	8002460 <SysTick_Config>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d005      	beq.n	800254a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2204      	movs	r2, #4
 8002542:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e029      	b.n	800259e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 020e 	bic.w	r2, r2, #14
 8002558:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f003 021c 	and.w	r2, r3, #28
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2101      	movs	r1, #1
 8002578:	fa01 f202 	lsl.w	r2, r1, r2
 800257c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
    }
  }
  return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 80025ae:	4b68      	ldr	r3, [pc, #416]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	4a67      	ldr	r2, [pc, #412]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 80025b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025b8:	f023 0307 	bic.w	r3, r3, #7
 80025bc:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 80025be:	4b64      	ldr	r3, [pc, #400]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4a63      	ldr	r2, [pc, #396]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 80025c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025c8:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80025cc:	7a1b      	ldrb	r3, [r3, #8]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d105      	bne.n	80025e0 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80025d4:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4a5d      	ldr	r2, [pc, #372]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80025e0:	4b5b      	ldr	r3, [pc, #364]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d045      	beq.n	800267e <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80025f2:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80025fc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_FLASH_IRQHandler+0x70>
 8002608:	4b51      	ldr	r3, [pc, #324]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002612:	494f      	ldr	r1, [pc, #316]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	618b      	str	r3, [r1, #24]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <HAL_FLASH_IRQHandler+0x84>
 8002622:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800262a:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 800262c:	f000 f8de 	bl	80027ec <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8002630:	4b48      	ldr	r3, [pc, #288]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 8002632:	7a1b      	ldrb	r3, [r3, #8]
 8002634:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8002636:	7afb      	ldrb	r3, [r7, #11]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 800263c:	4b45      	ldr	r3, [pc, #276]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f893 	bl	800276c <HAL_FLASH_OperationErrorCallback>
 8002646:	e017      	b.n	8002678 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d105      	bne.n	800265a <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f88a 	bl	800276c <HAL_FLASH_OperationErrorCallback>
 8002658:	e00e      	b.n	8002678 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 800265a:	7afb      	ldrb	r3, [r7, #11]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d002      	beq.n	8002666 <HAL_FLASH_IRQHandler+0xbe>
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	2b04      	cmp	r3, #4
 8002664:	d105      	bne.n	8002672 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8002666:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f87e 	bl	800276c <HAL_FLASH_OperationErrorCallback>
 8002670:	e002      	b.n	8002678 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8002672:	2000      	movs	r0, #0
 8002674:	f000 f87a 	bl	800276c <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002678:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 800267a:	2200      	movs	r2, #0
 800267c:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 800267e:	4b34      	ldr	r3, [pc, #208]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d04f      	beq.n	800272a <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 800268c:	2201      	movs	r2, #1
 800268e:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8002690:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 8002692:	7a1b      	ldrb	r3, [r3, #8]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d12b      	bne.n	80026f2 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	3b01      	subs	r3, #1
 80026a0:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026a2:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 80026ac:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f851 	bl	8002758 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	3301      	adds	r3, #1
 80026bc:	4a25      	ldr	r2, [pc, #148]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026be:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f857 	bl	8002780 <FLASH_PageErase>
 80026d2:	e02a      	b.n	800272a <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026d6:	f04f 32ff 	mov.w	r2, #4294967295
 80026da:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026de:	2200      	movs	r2, #0
 80026e0:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80026e2:	f000 f883 	bl	80027ec <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f834 	bl	8002758 <HAL_FLASH_EndOfOperationCallback>
 80026f0:	e01b      	b.n	800272a <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 80026f2:	f000 f87b 	bl	80027ec <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 80026f8:	7a1b      	ldrb	r3, [r3, #8]
 80026fa:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d105      	bne.n	800270e <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f826 	bl	8002758 <HAL_FLASH_EndOfOperationCallback>
 800270c:	e00a      	b.n	8002724 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 800270e:	7afb      	ldrb	r3, [r7, #11]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d002      	beq.n	800271a <HAL_FLASH_IRQHandler+0x172>
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d104      	bne.n	8002724 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f81a 	bl	8002758 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 8002726:	2200      	movs	r2, #0
 8002728:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 800272c:	7a1b      	ldrb	r3, [r3, #8]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	4a05      	ldr	r2, [pc, #20]	; (8002750 <HAL_FLASH_IRQHandler+0x1a8>)
 800273a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800273e:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_FLASH_IRQHandler+0x1ac>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
  }
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40022000 	.word	0x40022000
 8002754:	20000010 	.word	0x20000010

08002758 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <FLASH_PageErase+0x68>)
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <FLASH_PageErase+0x68>)
 800279a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800279e:	6153      	str	r3, [r2, #20]
 80027a0:	e005      	b.n	80027ae <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <FLASH_PageErase+0x68>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <FLASH_PageErase+0x68>)
 80027a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ac:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <FLASH_PageErase+0x68>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80027be:	490a      	ldr	r1, [pc, #40]	; (80027e8 <FLASH_PageErase+0x68>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <FLASH_PageErase+0x68>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <FLASH_PageErase+0x68>)
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <FLASH_PageErase+0x68>)
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <FLASH_PageErase+0x68>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	6153      	str	r3, [r2, #20]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40022000 	.word	0x40022000

080027ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	; (800286c <FLASH_FlushCaches+0x80>)
 80027f4:	7f1b      	ldrb	r3, [r3, #28]
 80027f6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d002      	beq.n	8002804 <FLASH_FlushCaches+0x18>
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d111      	bne.n	8002828 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <FLASH_FlushCaches+0x84>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <FLASH_FlushCaches+0x84>)
 800280a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <FLASH_FlushCaches+0x84>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a16      	ldr	r2, [pc, #88]	; (8002870 <FLASH_FlushCaches+0x84>)
 8002816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800281a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <FLASH_FlushCaches+0x84>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a13      	ldr	r2, [pc, #76]	; (8002870 <FLASH_FlushCaches+0x84>)
 8002822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002826:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d002      	beq.n	8002834 <FLASH_FlushCaches+0x48>
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d111      	bne.n	8002858 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <FLASH_FlushCaches+0x84>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <FLASH_FlushCaches+0x84>)
 800283a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <FLASH_FlushCaches+0x84>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <FLASH_FlushCaches+0x84>)
 8002846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800284a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <FLASH_FlushCaches+0x84>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a07      	ldr	r2, [pc, #28]	; (8002870 <FLASH_FlushCaches+0x84>)
 8002852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002856:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <FLASH_FlushCaches+0x80>)
 800285a:	2200      	movs	r2, #0
 800285c:	771a      	strb	r2, [r3, #28]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000010 	.word	0x20000010
 8002870:	40022000 	.word	0x40022000

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e166      	b.n	8002b52 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fa01 f303 	lsl.w	r3, r1, r3
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8158 	beq.w	8002b4c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d00b      	beq.n	80028bc <HAL_GPIO_Init+0x48>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d007      	beq.n	80028bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b0:	2b11      	cmp	r3, #17
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b12      	cmp	r3, #18
 80028ba:	d130      	bne.n	800291e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f2:	2201      	movs	r2, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 0201 	and.w	r2, r3, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0xea>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b12      	cmp	r3, #18
 800295c:	d123      	bne.n	80029a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	2203      	movs	r2, #3
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0203 	and.w	r2, r3, #3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80b2 	beq.w	8002b4c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e8:	4b61      	ldr	r3, [pc, #388]	; (8002b70 <HAL_GPIO_Init+0x2fc>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ec:	4a60      	ldr	r2, [pc, #384]	; (8002b70 <HAL_GPIO_Init+0x2fc>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6613      	str	r3, [r2, #96]	; 0x60
 80029f4:	4b5e      	ldr	r3, [pc, #376]	; (8002b70 <HAL_GPIO_Init+0x2fc>)
 80029f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a00:	4a5c      	ldr	r2, [pc, #368]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a2a:	d02b      	beq.n	8002a84 <HAL_GPIO_Init+0x210>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d025      	beq.n	8002a80 <HAL_GPIO_Init+0x20c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a51      	ldr	r2, [pc, #324]	; (8002b7c <HAL_GPIO_Init+0x308>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d01f      	beq.n	8002a7c <HAL_GPIO_Init+0x208>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a50      	ldr	r2, [pc, #320]	; (8002b80 <HAL_GPIO_Init+0x30c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d019      	beq.n	8002a78 <HAL_GPIO_Init+0x204>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a4f      	ldr	r2, [pc, #316]	; (8002b84 <HAL_GPIO_Init+0x310>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_GPIO_Init+0x200>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a4e      	ldr	r2, [pc, #312]	; (8002b88 <HAL_GPIO_Init+0x314>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00d      	beq.n	8002a70 <HAL_GPIO_Init+0x1fc>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a4d      	ldr	r2, [pc, #308]	; (8002b8c <HAL_GPIO_Init+0x318>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <HAL_GPIO_Init+0x1f8>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a4c      	ldr	r2, [pc, #304]	; (8002b90 <HAL_GPIO_Init+0x31c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_GPIO_Init+0x1f4>
 8002a64:	2307      	movs	r3, #7
 8002a66:	e00e      	b.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a68:	2308      	movs	r3, #8
 8002a6a:	e00c      	b.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	e00a      	b.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a70:	2305      	movs	r3, #5
 8002a72:	e008      	b.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e006      	b.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e004      	b.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a84:	2300      	movs	r3, #0
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	f002 0203 	and.w	r2, r2, #3
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	4093      	lsls	r3, r2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a96:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_GPIO_Init+0x300>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac8:	4a32      	ldr	r2, [pc, #200]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ace:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002af2:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b22:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b46:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <HAL_GPIO_Init+0x320>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f ae91 	bne.w	8002884 <HAL_GPIO_Init+0x10>
  }
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40010000 	.word	0x40010000
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	48000800 	.word	0x48000800
 8002b80:	48000c00 	.word	0x48000c00
 8002b84:	48001000 	.word	0x48001000
 8002b88:	48001400 	.word	0x48001400
 8002b8c:	48001800 	.word	0x48001800
 8002b90:	48001c00 	.word	0x48001c00
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e001      	b.n	8002bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fffe 	bl	8001c18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40007000 	.word	0x40007000

08002c54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c62:	d130      	bne.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c70:	d038      	beq.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2232      	movs	r2, #50	; 0x32
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0c9b      	lsrs	r3, r3, #18
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c98:	e002      	b.n	8002ca0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cac:	d102      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f2      	bne.n	8002c9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d110      	bne.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e00f      	b.n	8002ce6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd2:	d007      	beq.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cdc:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ce2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	20000004 	.word	0x20000004
 8002cfc:	431bde83 	.word	0x431bde83

08002d00 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8002d04:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002d10:	f7ff ff8a 	bl	8002c28 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d1a:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8002d28:	f000 f828 	bl	8002d7c <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d2e:	2208      	movs	r2, #8
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8002d3e:	f000 f824 	bl	8002d8a <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d44:	2210      	movs	r2, #16
 8002d46:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8002d54:	f000 f820 	bl	8002d98 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8002d6a:	f000 f81c 	bl	8002da6 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8002d6e:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40010400 	.word	0x40010400

08002d7c <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f000 bc16 	b.w	80035f4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc8:	4ba0      	ldr	r3, [pc, #640]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 030c 	and.w	r3, r3, #12
 8002dd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd2:	4b9e      	ldr	r3, [pc, #632]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80e4 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4c>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	f040 808b 	bne.w	8002f0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	f040 8087 	bne.w	8002f0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e00:	4b92      	ldr	r3, [pc, #584]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_OscConfig+0x64>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e3ed      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <HAL_RCC_OscConfig+0x7e>
 8002e28:	4b88      	ldr	r3, [pc, #544]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e30:	e005      	b.n	8002e3e <HAL_RCC_OscConfig+0x8a>
 8002e32:	4b86      	ldr	r3, [pc, #536]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d223      	bcs.n	8002e8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fd7e 	bl	8003948 <RCC_SetFlashLatencyFromMSIRange>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e3ce      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e56:	4b7d      	ldr	r3, [pc, #500]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a7c      	ldr	r2, [pc, #496]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e5c:	f043 0308 	orr.w	r3, r3, #8
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4b7a      	ldr	r3, [pc, #488]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4977      	ldr	r1, [pc, #476]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e74:	4b75      	ldr	r3, [pc, #468]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	4972      	ldr	r1, [pc, #456]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
 8002e88:	e025      	b.n	8002ed6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8a:	4b70      	ldr	r3, [pc, #448]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6f      	ldr	r2, [pc, #444]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6d      	ldr	r3, [pc, #436]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	496a      	ldr	r1, [pc, #424]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea8:	4b68      	ldr	r3, [pc, #416]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	4965      	ldr	r1, [pc, #404]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fd3e 	bl	8003948 <RCC_SetFlashLatencyFromMSIRange>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e38e      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ed6:	f000 fc75 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8002eda:	4601      	mov	r1, r0
 8002edc:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	4a5a      	ldr	r2, [pc, #360]	; (8003050 <HAL_RCC_OscConfig+0x29c>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	fa21 f303 	lsr.w	r3, r1, r3
 8002ef2:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_RCC_OscConfig+0x2a0>)
 8002ef4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ef6:	4b58      	ldr	r3, [pc, #352]	; (8003058 <HAL_RCC_OscConfig+0x2a4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff f984 	bl	8002208 <HAL_InitTick>
 8002f00:	4603      	mov	r3, r0
 8002f02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d052      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	e372      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d032      	beq.n	8002f7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f16:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a4c      	ldr	r2, [pc, #304]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f22:	f7ff f9c1 	bl	80022a8 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f2a:	f7ff f9bd 	bl	80022a8 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e35b      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f3c:	4b43      	ldr	r3, [pc, #268]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f48:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3f      	ldr	r2, [pc, #252]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f4e:	f043 0308 	orr.w	r3, r3, #8
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	493a      	ldr	r1, [pc, #232]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f66:	4b39      	ldr	r3, [pc, #228]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	4935      	ldr	r1, [pc, #212]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
 8002f7a:	e01a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f7c:	4b33      	ldr	r3, [pc, #204]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a32      	ldr	r2, [pc, #200]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f88:	f7ff f98e 	bl	80022a8 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f90:	f7ff f98a 	bl	80022a8 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e328      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x1dc>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d073      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x21c>
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d063      	beq.n	80030a4 <HAL_RCC_OscConfig+0x2f0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d15f      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e305      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x24c>
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0x288>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x270>
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCC_OscConfig+0x298>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a0c      	ldr	r2, [pc, #48]	; (800304c <HAL_RCC_OscConfig+0x298>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0x288>
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_RCC_OscConfig+0x298>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a05      	ldr	r2, [pc, #20]	; (800304c <HAL_RCC_OscConfig+0x298>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7ff f930 	bl	80022a8 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	e010      	b.n	800306e <HAL_RCC_OscConfig+0x2ba>
 800304c:	40021000 	.word	0x40021000
 8003050:	08009d3c 	.word	0x08009d3c
 8003054:	20000004 	.word	0x20000004
 8003058:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7ff f924 	bl	80022a8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e2c2      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306e:	4baf      	ldr	r3, [pc, #700]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x2a8>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7ff f914 	bl	80022a8 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7ff f910 	bl	80022a8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e2ae      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003096:	4ba5      	ldr	r3, [pc, #660]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x2d0>
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d060      	beq.n	8003174 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_OscConfig+0x310>
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d119      	bne.n	80030f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d116      	bne.n	80030f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c4:	4b99      	ldr	r3, [pc, #612]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_OscConfig+0x328>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e28b      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	4b93      	ldr	r3, [pc, #588]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	4990      	ldr	r1, [pc, #576]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f0:	e040      	b.n	8003174 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d023      	beq.n	8003142 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fa:	4b8c      	ldr	r3, [pc, #560]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a8b      	ldr	r2, [pc, #556]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7ff f8cf 	bl	80022a8 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310e:	f7ff f8cb 	bl	80022a8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e269      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003120:	4b82      	ldr	r3, [pc, #520]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b7f      	ldr	r3, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	497c      	ldr	r1, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
 8003140:	e018      	b.n	8003174 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003142:	4b7a      	ldr	r3, [pc, #488]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a79      	ldr	r2, [pc, #484]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7ff f8ab 	bl	80022a8 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003156:	f7ff f8a7 	bl	80022a8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e245      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003168:	4b70      	ldr	r3, [pc, #448]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d03c      	beq.n	80031fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01c      	beq.n	80031c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003188:	4b68      	ldr	r3, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	4a67      	ldr	r2, [pc, #412]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7ff f886 	bl	80022a8 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a0:	f7ff f882 	bl	80022a8 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e220      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b2:	4b5e      	ldr	r3, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80031b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ef      	beq.n	80031a0 <HAL_RCC_OscConfig+0x3ec>
 80031c0:	e01b      	b.n	80031fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c2:	4b5a      	ldr	r3, [pc, #360]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c8:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7ff f869 	bl	80022a8 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031da:	f7ff f865 	bl	80022a8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e203      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ec:	4b4f      	ldr	r3, [pc, #316]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80031ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ef      	bne.n	80031da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80a6 	beq.w	8003354 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003208:	2300      	movs	r3, #0
 800320a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800320c:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10d      	bne.n	8003234 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b44      	ldr	r3, [pc, #272]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	4a43      	ldr	r2, [pc, #268]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6593      	str	r3, [r2, #88]	; 0x58
 8003224:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003230:	2301      	movs	r3, #1
 8003232:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003234:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <HAL_RCC_OscConfig+0x57c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d118      	bne.n	8003272 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003240:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <HAL_RCC_OscConfig+0x57c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3a      	ldr	r2, [pc, #232]	; (8003330 <HAL_RCC_OscConfig+0x57c>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324c:	f7ff f82c 	bl	80022a8 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7ff f828 	bl	80022a8 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e1c6      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	4b32      	ldr	r3, [pc, #200]	; (8003330 <HAL_RCC_OscConfig+0x57c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d108      	bne.n	800328c <HAL_RCC_OscConfig+0x4d8>
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4a2a      	ldr	r2, [pc, #168]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800328a:	e024      	b.n	80032d6 <HAL_RCC_OscConfig+0x522>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d110      	bne.n	80032b6 <HAL_RCC_OscConfig+0x502>
 8003294:	4b25      	ldr	r3, [pc, #148]	; (800332c <HAL_RCC_OscConfig+0x578>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	4a24      	ldr	r2, [pc, #144]	; (800332c <HAL_RCC_OscConfig+0x578>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	4a20      	ldr	r2, [pc, #128]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b4:	e00f      	b.n	80032d6 <HAL_RCC_OscConfig+0x522>
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	4a17      	ldr	r2, [pc, #92]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80032ce:	f023 0304 	bic.w	r3, r3, #4
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fe ffe3 	bl	80022a8 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe ffdf 	bl	80022a8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e17b      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x578>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0ed      	beq.n	80032e6 <HAL_RCC_OscConfig+0x532>
 800330a:	e01a      	b.n	8003342 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe ffcc 	bl	80022a8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003312:	e00f      	b.n	8003334 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe ffc8 	bl	80022a8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d906      	bls.n	8003334 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e164      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003334:	4ba8      	ldr	r3, [pc, #672]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e8      	bne.n	8003314 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003348:	4ba3      	ldr	r3, [pc, #652]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	4aa2      	ldr	r2, [pc, #648]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 800334e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003352:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d03c      	beq.n	80033da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003368:	4b9b      	ldr	r3, [pc, #620]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 800336a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800336e:	4a9a      	ldr	r2, [pc, #616]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fe ff96 	bl	80022a8 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003380:	f7fe ff92 	bl	80022a8 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e130      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003392:	4b91      	ldr	r3, [pc, #580]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ef      	beq.n	8003380 <HAL_RCC_OscConfig+0x5cc>
 80033a0:	e01b      	b.n	80033da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033a2:	4b8d      	ldr	r3, [pc, #564]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80033a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033a8:	4a8b      	ldr	r2, [pc, #556]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fe ff79 	bl	80022a8 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ba:	f7fe ff75 	bl	80022a8 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e113      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033cc:	4b82      	ldr	r3, [pc, #520]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80033ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ef      	bne.n	80033ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8107 	beq.w	80035f2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	f040 80cb 	bne.w	8003584 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033ee:	4b7a      	ldr	r3, [pc, #488]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0203 	and.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	429a      	cmp	r2, r3
 8003400:	d12c      	bne.n	800345c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	3b01      	subs	r3, #1
 800340e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d123      	bne.n	800345c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d11b      	bne.n	800345c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d113      	bne.n	800345c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	085b      	lsrs	r3, r3, #1
 8003440:	3b01      	subs	r3, #1
 8003442:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d109      	bne.n	800345c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	3b01      	subs	r3, #1
 8003456:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d06d      	beq.n	8003538 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d068      	beq.n	8003534 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003462:	4b5d      	ldr	r3, [pc, #372]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800346e:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0ba      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800347e:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a55      	ldr	r2, [pc, #340]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003488:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800348a:	f7fe ff0d 	bl	80022a8 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003492:	f7fe ff09 	bl	80022a8 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0a7      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a4:	4b4c      	ldr	r3, [pc, #304]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b0:	4b49      	ldr	r3, [pc, #292]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	4b49      	ldr	r3, [pc, #292]	; (80035dc <HAL_RCC_OscConfig+0x828>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034c0:	3a01      	subs	r2, #1
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	4311      	orrs	r1, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034ca:	0212      	lsls	r2, r2, #8
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034d2:	0852      	lsrs	r2, r2, #1
 80034d4:	3a01      	subs	r2, #1
 80034d6:	0552      	lsls	r2, r2, #21
 80034d8:	4311      	orrs	r1, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034de:	0852      	lsrs	r2, r2, #1
 80034e0:	3a01      	subs	r2, #1
 80034e2:	0652      	lsls	r2, r2, #25
 80034e4:	4311      	orrs	r1, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ea:	06d2      	lsls	r2, r2, #27
 80034ec:	430a      	orrs	r2, r1
 80034ee:	493a      	ldr	r1, [pc, #232]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034f4:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a37      	ldr	r2, [pc, #220]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80034fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003500:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4a34      	ldr	r2, [pc, #208]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800350c:	f7fe fecc 	bl	80022a8 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fec8 	bl	80022a8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e066      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003526:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003532:	e05e      	b.n	80035f2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e05d      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003538:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d156      	bne.n	80035f2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003544:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a23      	ldr	r2, [pc, #140]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800355c:	f7fe fea4 	bl	80022a8 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fea0 	bl	80022a8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e03e      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x7b0>
 8003582:	e036      	b.n	80035f2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d031      	beq.n	80035ee <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003594:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d105      	bne.n	80035ae <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80035a8:	f023 0303 	bic.w	r3, r3, #3
 80035ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <HAL_RCC_OscConfig+0x824>)
 80035b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7fe fe73 	bl	80022a8 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c4:	e00c      	b.n	80035e0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fe fe6f 	bl	80022a8 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d905      	bls.n	80035e0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e00d      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
 80035d8:	40021000 	.word	0x40021000
 80035dc:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x848>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ec      	bne.n	80035c6 <HAL_RCC_OscConfig+0x812>
 80035ec:	e001      	b.n	80035f2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000

08003600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0c8      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003614:	4b66      	ldr	r3, [pc, #408]	; (80037b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d910      	bls.n	8003644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 0207 	bic.w	r2, r3, #7
 800362a:	4961      	ldr	r1, [pc, #388]	; (80037b0 <HAL_RCC_ClockConfig+0x1b0>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b0      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d04c      	beq.n	80036ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003658:	4b56      	ldr	r3, [pc, #344]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d121      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e09e      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d107      	bne.n	8003680 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d115      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e092      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003688:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d109      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e086      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003698:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e07e      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036a8:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 0203 	bic.w	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	493f      	ldr	r1, [pc, #252]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ba:	f7fe fdf5 	bl	80022a8 <HAL_GetTick>
 80036be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c2:	f7fe fdf1 	bl	80022a8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e066      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d8:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 020c 	and.w	r2, r3, #12
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d1eb      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f6:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	492c      	ldr	r1, [pc, #176]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003708:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_RCC_ClockConfig+0x1b0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d210      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 0207 	bic.w	r2, r3, #7
 800371e:	4924      	ldr	r1, [pc, #144]	; (80037b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_RCC_ClockConfig+0x1b0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e036      	b.n	80037a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4918      	ldr	r1, [pc, #96]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003762:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4910      	ldr	r1, [pc, #64]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003776:	f000 f825 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 800377a:	4601      	mov	r1, r0
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <HAL_RCC_ClockConfig+0x1b4>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	5cd3      	ldrb	r3, [r2, r3]
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	fa21 f303 	lsr.w	r3, r1, r3
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fd34 	bl	8002208 <HAL_InitTick>
 80037a0:	4603      	mov	r3, r0
 80037a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80037a4:	7afb      	ldrb	r3, [r7, #11]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08009d3c 	.word	0x08009d3c
 80037bc:	20000004 	.word	0x20000004
 80037c0:	20000008 	.word	0x20000008

080037c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d2:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037dc:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x34>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d121      	bne.n	8003836 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d11e      	bne.n	8003836 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037f8:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003804:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	e005      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003814:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003820:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003834:	e00a      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d102      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	e004      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d101      	bne.n	800384c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800384a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b0c      	cmp	r3, #12
 8003850:	d133      	bne.n	80038ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0xa4>
 8003862:	2b03      	cmp	r3, #3
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0xaa>
 8003866:	e005      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800386a:	617b      	str	r3, [r7, #20]
      break;
 800386c:	e005      	b.n	800387a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800386e:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003870:	617b      	str	r3, [r7, #20]
      break;
 8003872:	e002      	b.n	800387a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	617b      	str	r3, [r7, #20]
      break;
 8003878:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	3301      	adds	r3, #1
 8003886:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	fb02 f203 	mul.w	r2, r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	fbb2 f3f3 	udiv	r3, r2, r3
 800389e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0e5b      	lsrs	r3, r3, #25
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038ba:	69bb      	ldr	r3, [r7, #24]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3724      	adds	r7, #36	; 0x24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08009d54 	.word	0x08009d54
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	007a1200 	.word	0x007a1200

080038d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_RCC_GetHCLKFreq+0x14>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000004 	.word	0x20000004

080038f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f4:	f7ff fff0 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 80038f8:	4601      	mov	r1, r0
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	08009d4c 	.word	0x08009d4c

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003920:	f7ff ffda 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8003924:	4601      	mov	r1, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0adb      	lsrs	r3, r3, #11
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	08009d4c 	.word	0x08009d4c

08003948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003954:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003960:	f7ff f96a 	bl	8002c38 <HAL_PWREx_GetVoltageRange>
 8003964:	6178      	str	r0, [r7, #20]
 8003966:	e014      	b.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	4a24      	ldr	r2, [pc, #144]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003972:	6593      	str	r3, [r2, #88]	; 0x58
 8003974:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003980:	f7ff f95a 	bl	8002c38 <HAL_PWREx_GetVoltageRange>
 8003984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003986:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003998:	d10b      	bne.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d919      	bls.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2ba0      	cmp	r3, #160	; 0xa0
 80039a4:	d902      	bls.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039a6:	2302      	movs	r3, #2
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	e013      	b.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039ac:	2301      	movs	r3, #1
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e010      	b.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d902      	bls.n	80039be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039b8:	2303      	movs	r3, #3
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e00a      	b.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d102      	bne.n	80039ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c4:	2302      	movs	r3, #2
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e004      	b.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b70      	cmp	r3, #112	; 0x70
 80039ce:	d101      	bne.n	80039d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d0:	2301      	movs	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 0207 	bic.w	r2, r3, #7
 80039dc:	4909      	ldr	r1, [pc, #36]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d001      	beq.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40022000 	.word	0x40022000

08003a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a10:	2300      	movs	r3, #0
 8003a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a14:	2300      	movs	r3, #0
 8003a16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d03f      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a2c:	d01c      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a32:	d802      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00e      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003a38:	e01f      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a3e:	d003      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003a40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a44:	d01c      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003a46:	e018      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a48:	4b85      	ldr	r3, [pc, #532]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a84      	ldr	r2, [pc, #528]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a54:	e015      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 facb 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a66:	e00c      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3320      	adds	r3, #32
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fbb2 	bl	80041d8 <RCCEx_PLLSAI2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a78:	e003      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a88:	4b75      	ldr	r3, [pc, #468]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a96:	4972      	ldr	r1, [pc, #456]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a9e:	e001      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d03f      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab8:	d01c      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003aba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003abe:	d802      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003ac4:	e01f      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003acc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ad0:	d01c      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003ad2:	e018      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ad4:	4b62      	ldr	r3, [pc, #392]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a61      	ldr	r2, [pc, #388]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ade:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ae0:	e015      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fa85 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003af2:	e00c      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3320      	adds	r3, #32
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fb6c 	bl	80041d8 <RCCEx_PLLSAI2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	74fb      	strb	r3, [r7, #19]
      break;
 8003b0a:	e000      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b14:	4b52      	ldr	r3, [pc, #328]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b22:	494f      	ldr	r1, [pc, #316]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b2a:	e001      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80a0 	beq.w	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b42:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	4a40      	ldr	r2, [pc, #256]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b62:	6593      	str	r3, [r2, #88]	; 0x58
 8003b64:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b70:	2301      	movs	r3, #1
 8003b72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b74:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a3a      	ldr	r2, [pc, #232]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b80:	f7fe fb92 	bl	80022a8 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b86:	e009      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b88:	f7fe fb8e 	bl	80022a8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	74fb      	strb	r3, [r7, #19]
        break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b9c:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ef      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d15c      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d019      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bcc:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bf8:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0a:	f7fe fb4d 	bl	80022a8 <HAL_GetTick>
 8003c0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c10:	e00b      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fe fb49 	bl	80022a8 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d902      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	74fb      	strb	r3, [r7, #19]
            break;
 8003c28:	e006      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ec      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	4904      	ldr	r1, [pc, #16]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c56:	e009      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	74bb      	strb	r3, [r7, #18]
 8003c5c:	e006      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6c:	7c7b      	ldrb	r3, [r7, #17]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4ba6      	ldr	r3, [pc, #664]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	4aa5      	ldr	r2, [pc, #660]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c8a:	4ba0      	ldr	r3, [pc, #640]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f023 0203 	bic.w	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	499c      	ldr	r1, [pc, #624]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cac:	4b97      	ldr	r3, [pc, #604]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 020c 	bic.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	4994      	ldr	r1, [pc, #592]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cce:	4b8f      	ldr	r3, [pc, #572]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	498b      	ldr	r1, [pc, #556]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cf0:	4b86      	ldr	r3, [pc, #536]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	4983      	ldr	r1, [pc, #524]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d12:	4b7e      	ldr	r3, [pc, #504]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d20:	497a      	ldr	r1, [pc, #488]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d34:	4b75      	ldr	r3, [pc, #468]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	4972      	ldr	r1, [pc, #456]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d56:	4b6d      	ldr	r3, [pc, #436]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d64:	4969      	ldr	r1, [pc, #420]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d78:	4b64      	ldr	r3, [pc, #400]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d86:	4961      	ldr	r1, [pc, #388]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d9a:	4b5c      	ldr	r3, [pc, #368]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	4958      	ldr	r1, [pc, #352]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	4950      	ldr	r1, [pc, #320]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dde:	4b4b      	ldr	r3, [pc, #300]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	4947      	ldr	r1, [pc, #284]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e00:	4b42      	ldr	r3, [pc, #264]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	493f      	ldr	r1, [pc, #252]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d028      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e22:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4936      	ldr	r1, [pc, #216]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e40:	d106      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e42:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4a31      	ldr	r2, [pc, #196]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e4c:	60d3      	str	r3, [r2, #12]
 8003e4e:	e011      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f8c9 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d028      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e80:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8e:	491f      	ldr	r1, [pc, #124]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e9e:	d106      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eaa:	60d3      	str	r3, [r2, #12]
 8003eac:	e011      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f89a 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d02a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ede:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eec:	4907      	ldr	r1, [pc, #28]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003efc:	d108      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efe:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4a02      	ldr	r2, [pc, #8]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f08:	60d3      	str	r3, [r2, #12]
 8003f0a:	e013      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003f0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f869 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02f      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f40:	4b2c      	ldr	r3, [pc, #176]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	4929      	ldr	r1, [pc, #164]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5e:	d10d      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f846 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d014      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	74bb      	strb	r3, [r7, #18]
 8003f7a:	e011      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3320      	adds	r3, #32
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f923 	bl	80041d8 <RCCEx_PLLSAI2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fbc:	490d      	ldr	r1, [pc, #52]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe0:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fe8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004006:	4b73      	ldr	r3, [pc, #460]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004012:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0203 	and.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d10d      	bne.n	800403e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
       ||
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800402a:	4b6a      	ldr	r3, [pc, #424]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
       ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d044      	beq.n	80040c8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e041      	b.n	80040c8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d00c      	beq.n	8004066 <RCCEx_PLLSAI1_Config+0x6e>
 800404c:	2b03      	cmp	r3, #3
 800404e:	d013      	beq.n	8004078 <RCCEx_PLLSAI1_Config+0x80>
 8004050:	2b01      	cmp	r3, #1
 8004052:	d120      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004054:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11d      	bne.n	800409c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004064:	e01a      	b.n	800409c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004066:	4b5b      	ldr	r3, [pc, #364]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004076:	e013      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004078:	4b56      	ldr	r3, [pc, #344]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10f      	bne.n	80040a4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004084:	4b53      	ldr	r3, [pc, #332]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004094:	e006      	b.n	80040a4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      break;
 800409a:	e004      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800409c:	bf00      	nop
 800409e:	e002      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80040a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ac:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6819      	ldr	r1, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	3b01      	subs	r3, #1
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	430b      	orrs	r3, r1
 80040c2:	4944      	ldr	r1, [pc, #272]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d17c      	bne.n	80041c8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040da:	f7fe f8e5 	bl	80022a8 <HAL_GetTick>
 80040de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040e0:	e009      	b.n	80040f6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e2:	f7fe f8e1 	bl	80022a8 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d902      	bls.n	80040f6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	73fb      	strb	r3, [r7, #15]
        break;
 80040f4:	e005      	b.n	8004102 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ef      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d15f      	bne.n	80041c8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d110      	bne.n	8004130 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800410e:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004116:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6892      	ldr	r2, [r2, #8]
 800411e:	0211      	lsls	r1, r2, #8
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68d2      	ldr	r2, [r2, #12]
 8004124:	06d2      	lsls	r2, r2, #27
 8004126:	430a      	orrs	r2, r1
 8004128:	492a      	ldr	r1, [pc, #168]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	610b      	str	r3, [r1, #16]
 800412e:	e027      	b.n	8004180 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d112      	bne.n	800415c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800413e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6892      	ldr	r2, [r2, #8]
 8004146:	0211      	lsls	r1, r2, #8
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6912      	ldr	r2, [r2, #16]
 800414c:	0852      	lsrs	r2, r2, #1
 800414e:	3a01      	subs	r2, #1
 8004150:	0552      	lsls	r2, r2, #21
 8004152:	430a      	orrs	r2, r1
 8004154:	491f      	ldr	r1, [pc, #124]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	610b      	str	r3, [r1, #16]
 800415a:	e011      	b.n	8004180 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004164:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6892      	ldr	r2, [r2, #8]
 800416c:	0211      	lsls	r1, r2, #8
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6952      	ldr	r2, [r2, #20]
 8004172:	0852      	lsrs	r2, r2, #1
 8004174:	3a01      	subs	r2, #1
 8004176:	0652      	lsls	r2, r2, #25
 8004178:	430a      	orrs	r2, r1
 800417a:	4916      	ldr	r1, [pc, #88]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800418a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fe f88c 	bl	80022a8 <HAL_GetTick>
 8004190:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004192:	e009      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004194:	f7fe f888 	bl	80022a8 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d902      	bls.n	80041a8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	73fb      	strb	r3, [r7, #15]
          break;
 80041a6:	e005      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ef      	beq.n	8004194 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	4904      	ldr	r1, [pc, #16]	; (80041d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000

080041d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041e6:	4b68      	ldr	r3, [pc, #416]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0203 	and.w	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d10d      	bne.n	800421e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
       ||
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
       ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d044      	beq.n	80042a8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	73fb      	strb	r3, [r7, #15]
 8004222:	e041      	b.n	80042a8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d00c      	beq.n	8004246 <RCCEx_PLLSAI2_Config+0x6e>
 800422c:	2b03      	cmp	r3, #3
 800422e:	d013      	beq.n	8004258 <RCCEx_PLLSAI2_Config+0x80>
 8004230:	2b01      	cmp	r3, #1
 8004232:	d120      	bne.n	8004276 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004234:	4b54      	ldr	r3, [pc, #336]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d11d      	bne.n	800427c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004244:	e01a      	b.n	800427c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004246:	4b50      	ldr	r3, [pc, #320]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004256:	e013      	b.n	8004280 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004258:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10f      	bne.n	8004284 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004264:	4b48      	ldr	r3, [pc, #288]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004274:	e006      	b.n	8004284 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      break;
 800427a:	e004      	b.n	8004286 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800427c:	bf00      	nop
 800427e:	e002      	b.n	8004286 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004280:	bf00      	nop
 8004282:	e000      	b.n	8004286 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004284:	bf00      	nop
    }

    if(status == HAL_OK)
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10d      	bne.n	80042a8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800428c:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6819      	ldr	r1, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	3b01      	subs	r3, #1
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	430b      	orrs	r3, r1
 80042a2:	4939      	ldr	r1, [pc, #228]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d166      	bne.n	800437c <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a35      	ldr	r2, [pc, #212]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ba:	f7fd fff5 	bl	80022a8 <HAL_GetTick>
 80042be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042c0:	e009      	b.n	80042d6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042c2:	f7fd fff1 	bl	80022a8 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d902      	bls.n	80042d6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	73fb      	strb	r3, [r7, #15]
        break;
 80042d4:	e005      	b.n	80042e2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042d6:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ef      	bne.n	80042c2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d149      	bne.n	800437c <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d110      	bne.n	8004310 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80042f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6892      	ldr	r2, [r2, #8]
 80042fe:	0211      	lsls	r1, r2, #8
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68d2      	ldr	r2, [r2, #12]
 8004304:	06d2      	lsls	r2, r2, #27
 8004306:	430a      	orrs	r2, r1
 8004308:	491f      	ldr	r1, [pc, #124]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	614b      	str	r3, [r1, #20]
 800430e:	e011      	b.n	8004334 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004318:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6892      	ldr	r2, [r2, #8]
 8004320:	0211      	lsls	r1, r2, #8
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6912      	ldr	r2, [r2, #16]
 8004326:	0852      	lsrs	r2, r2, #1
 8004328:	3a01      	subs	r2, #1
 800432a:	0652      	lsls	r2, r2, #25
 800432c:	430a      	orrs	r2, r1
 800432e:	4916      	ldr	r1, [pc, #88]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800433a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fd ffb2 	bl	80022a8 <HAL_GetTick>
 8004344:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004346:	e009      	b.n	800435c <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004348:	f7fd ffae 	bl	80022a8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d902      	bls.n	800435c <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	73fb      	strb	r3, [r7, #15]
          break;
 800435a:	e005      	b.n	8004368 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ef      	beq.n	8004348 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	4904      	ldr	r1, [pc, #16]	; (8004388 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000

0800438c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e095      	b.n	80044ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ae:	d009      	beq.n	80043c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
 80043b6:	e005      	b.n	80043c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd fd2a 	bl	8001e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004404:	d902      	bls.n	800440c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e002      	b.n	8004412 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800440c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004410:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800441a:	d007      	beq.n	800442c <HAL_SPI_Init+0xa0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004424:	d002      	beq.n	800442c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	ea42 0103 	orr.w	r1, r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	f003 0204 	and.w	r2, r3, #4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044a8:	ea42 0103 	orr.w	r1, r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b088      	sub	sp, #32
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_SPI_Transmit+0x22>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e158      	b.n	80047a6 <HAL_SPI_Transmit+0x2d4>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044fc:	f7fd fed4 	bl	80022a8 <HAL_GetTick>
 8004500:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d002      	beq.n	8004518 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004512:	2302      	movs	r3, #2
 8004514:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004516:	e13d      	b.n	8004794 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_SPI_Transmit+0x52>
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004528:	e134      	b.n	8004794 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2203      	movs	r2, #3
 800452e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004574:	d10f      	bne.n	8004596 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004584:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004594:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d007      	beq.n	80045b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045bc:	d94b      	bls.n	8004656 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_SPI_Transmit+0xfa>
 80045c6:	8afb      	ldrh	r3, [r7, #22]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d13e      	bne.n	800464a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	881a      	ldrh	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	1c9a      	adds	r2, r3, #2
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045f0:	e02b      	b.n	800464a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d112      	bne.n	8004626 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	881a      	ldrh	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004624:	e011      	b.n	800464a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004626:	f7fd fe3f 	bl	80022a8 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d803      	bhi.n	800463e <HAL_SPI_Transmit+0x16c>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d102      	bne.n	8004644 <HAL_SPI_Transmit+0x172>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004648:	e0a4      	b.n	8004794 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1ce      	bne.n	80045f2 <HAL_SPI_Transmit+0x120>
 8004654:	e07c      	b.n	8004750 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_SPI_Transmit+0x192>
 800465e:	8afb      	ldrh	r3, [r7, #22]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d170      	bne.n	8004746 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d912      	bls.n	8004694 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	881a      	ldrh	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	1c9a      	adds	r2, r3, #2
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b02      	subs	r3, #2
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004692:	e058      	b.n	8004746 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80046ba:	e044      	b.n	8004746 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d12b      	bne.n	8004722 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d912      	bls.n	80046fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	881a      	ldrh	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	1c9a      	adds	r2, r3, #2
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b02      	subs	r3, #2
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f8:	e025      	b.n	8004746 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004720:	e011      	b.n	8004746 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004722:	f7fd fdc1 	bl	80022a8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d803      	bhi.n	800473a <HAL_SPI_Transmit+0x268>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d102      	bne.n	8004740 <HAL_SPI_Transmit+0x26e>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004744:	e026      	b.n	8004794 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1b5      	bne.n	80046bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fc73 	bl	8005040 <SPI_EndRxTxTransaction>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e000      	b.n	8004794 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b08a      	sub	sp, #40	; 0x28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047bc:	2301      	movs	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x26>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e1fb      	b.n	8004bcc <HAL_SPI_TransmitReceive+0x41e>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047dc:	f7fd fd64 	bl	80022a8 <HAL_GetTick>
 80047e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047f0:	887b      	ldrh	r3, [r7, #2]
 80047f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047f8:	7efb      	ldrb	r3, [r7, #27]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d00e      	beq.n	800481c <HAL_SPI_TransmitReceive+0x6e>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004804:	d106      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x66>
 800480e:	7efb      	ldrb	r3, [r7, #27]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d003      	beq.n	800481c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004814:	2302      	movs	r3, #2
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800481a:	e1cd      	b.n	8004bb8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_SPI_TransmitReceive+0x80>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_SPI_TransmitReceive+0x80>
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004834:	e1c0      	b.n	8004bb8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b04      	cmp	r3, #4
 8004840:	d003      	beq.n	800484a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2205      	movs	r2, #5
 8004846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	887a      	ldrh	r2, [r7, #2]
 800485a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	887a      	ldrh	r2, [r7, #2]
 8004862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	887a      	ldrh	r2, [r7, #2]
 8004876:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800488c:	d802      	bhi.n	8004894 <HAL_SPI_TransmitReceive+0xe6>
 800488e:	8a3b      	ldrh	r3, [r7, #16]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d908      	bls.n	80048a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048a2:	605a      	str	r2, [r3, #4]
 80048a4:	e007      	b.n	80048b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d007      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048dc:	d97c      	bls.n	80049d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_SPI_TransmitReceive+0x13e>
 80048e6:	8a7b      	ldrh	r3, [r7, #18]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d169      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	881a      	ldrh	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	1c9a      	adds	r2, r3, #2
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004910:	e056      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b02      	cmp	r3, #2
 800491e:	d11b      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x1aa>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <HAL_SPI_TransmitReceive+0x1aa>
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	2b01      	cmp	r3, #1
 800492e:	d113      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	881a      	ldrh	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d11c      	bne.n	80049a0 <HAL_SPI_TransmitReceive+0x1f2>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	b292      	uxth	r2, r2
 800497e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	1c9a      	adds	r2, r3, #2
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800499c:	2301      	movs	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049a0:	f7fd fc82 	bl	80022a8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d807      	bhi.n	80049c0 <HAL_SPI_TransmitReceive+0x212>
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d003      	beq.n	80049c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80049be:	e0fb      	b.n	8004bb8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1a3      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x164>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d19d      	bne.n	8004912 <HAL_SPI_TransmitReceive+0x164>
 80049d6:	e0df      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x23a>
 80049e0:	8a7b      	ldrh	r3, [r7, #18]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	f040 80cb 	bne.w	8004b7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d912      	bls.n	8004a18 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	881a      	ldrh	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	1c9a      	adds	r2, r3, #2
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b02      	subs	r3, #2
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a16:	e0b2      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	7812      	ldrb	r2, [r2, #0]
 8004a24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a3e:	e09e      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d134      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x30a>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02f      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x30a>
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d12c      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d912      	bls.n	8004a8e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	881a      	ldrh	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	1c9a      	adds	r2, r3, #2
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b02      	subs	r3, #2
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a8c:	e012      	b.n	8004ab4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	7812      	ldrb	r2, [r2, #0]
 8004a9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d148      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x3aa>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d042      	beq.n	8004b58 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d923      	bls.n	8004b26 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	b292      	uxth	r2, r2
 8004aea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b02      	subs	r3, #2
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d81f      	bhi.n	8004b54 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b22:	605a      	str	r2, [r3, #4]
 8004b24:	e016      	b.n	8004b54 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f103 020c 	add.w	r2, r3, #12
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b54:	2301      	movs	r3, #1
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b58:	f7fd fba6 	bl	80022a8 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d803      	bhi.n	8004b70 <HAL_SPI_TransmitReceive+0x3c2>
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d102      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x3c8>
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b7c:	e01c      	b.n	8004bb8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f af5b 	bne.w	8004a40 <HAL_SPI_TransmitReceive+0x292>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f47f af54 	bne.w	8004a40 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fa4f 	bl	8005040 <SPI_EndRxTxTransaction>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d006      	beq.n	8004bb6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	661a      	str	r2, [r3, #96]	; 0x60
 8004bb4:	e000      	b.n	8004bb8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004bb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3728      	adds	r7, #40	; 0x28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	099b      	lsrs	r3, r3, #6
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d004      	beq.n	8004c18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
    return;
 8004c16:	e0d8      	b.n	8004dca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	085b      	lsrs	r3, r3, #1
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_SPI_IRQHandler+0x66>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	09db      	lsrs	r3, r3, #7
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
    return;
 8004c38:	e0c7      	b.n	8004dca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10c      	bne.n	8004c60 <HAL_SPI_IRQHandler+0x8c>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	099b      	lsrs	r3, r3, #6
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	0a1b      	lsrs	r3, r3, #8
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80b5 	beq.w	8004dca <HAL_SPI_IRQHandler+0x1f6>
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80ae 	beq.w	8004dca <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d023      	beq.n	8004cc2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d011      	beq.n	8004caa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c8a:	f043 0204 	orr.w	r2, r3, #4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	e00b      	b.n	8004cc2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	693b      	ldr	r3, [r7, #16]
        return;
 8004cc0:	e083      	b.n	8004dca <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d014      	beq.n	8004cf8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00c      	beq.n	8004d1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	f043 0208 	orr.w	r2, r3, #8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d10:	2300      	movs	r3, #0
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d050      	beq.n	8004dc8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <HAL_SPI_IRQHandler+0x17e>
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d034      	beq.n	8004dbc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0203 	bic.w	r2, r2, #3
 8004d60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d011      	beq.n	8004d8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_SPI_IRQHandler+0x1fc>)
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fd fbd5 	bl	8002526 <HAL_DMA_Abort_IT>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	4a0d      	ldr	r2, [pc, #52]	; (8004dd0 <HAL_SPI_IRQHandler+0x1fc>)
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fd fbbf 	bl	8002526 <HAL_DMA_Abort_IT>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004dba:	e003      	b.n	8004dc4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f809 	bl	8004dd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004dc2:	e000      	b.n	8004dc6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004dc4:	bf00      	nop
    return;
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
  }
}
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	08004de9 	.word	0x08004de9

08004dd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff ffe5 	bl	8004dd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e24:	f7fd fa40 	bl	80022a8 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	4413      	add	r3, r2
 8004e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e34:	f7fd fa38 	bl	80022a8 <HAL_GetTick>
 8004e38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e3a:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	015b      	lsls	r3, r3, #5
 8004e40:	0d1b      	lsrs	r3, r3, #20
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e4a:	e054      	b.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d050      	beq.n	8004ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e54:	f7fd fa28 	bl	80022a8 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d902      	bls.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d13d      	bne.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e82:	d111      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8c:	d004      	beq.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e96:	d107      	bne.n	8004ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb0:	d10f      	bne.n	8004ed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e017      	b.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d19b      	bne.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000004 	.word	0x20000004

08004f24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f32:	f7fd f9b9 	bl	80022a8 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	4413      	add	r3, r2
 8004f40:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f42:	f7fd f9b1 	bl	80022a8 <HAL_GetTick>
 8004f46:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f48:	4b3c      	ldr	r3, [pc, #240]	; (800503c <SPI_WaitFifoStateUntilTimeout+0x118>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	0d1b      	lsrs	r3, r3, #20
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f60:	e05f      	b.n	8005022 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f68:	d106      	bne.n	8004f78 <SPI_WaitFifoStateUntilTimeout+0x54>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d050      	beq.n	8005022 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f80:	f7fd f992 	bl	80022a8 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d902      	bls.n	8004f96 <SPI_WaitFifoStateUntilTimeout+0x72>
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d13d      	bne.n	8005012 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fae:	d111      	bne.n	8004fd4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb8:	d004      	beq.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	d107      	bne.n	8004fd4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fdc:	d10f      	bne.n	8004ffe <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e010      	b.n	8005034 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3b01      	subs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	d197      	bne.n	8004f62 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000004 	.word	0x20000004

08005040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ff63 	bl	8004f24 <SPI_WaitFifoStateUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e027      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2200      	movs	r2, #0
 800507c:	2180      	movs	r1, #128	; 0x80
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fec8 	bl	8004e14 <SPI_WaitFlagStateUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e014      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff ff3c 	bl	8004f24 <SPI_WaitFifoStateUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e000      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e040      	b.n	8005160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc feec 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2224      	movs	r2, #36	; 0x24
 80050f8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa1c 	bl	8005548 <UART_SetConfig>
 8005110:	4603      	mov	r3, r0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e022      	b.n	8005160 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fc9a 	bl	8005a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fd21 	bl	8005ba0 <UART_CheckIdleState>
 800515e:	4603      	mov	r3, r0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517c:	2b20      	cmp	r3, #32
 800517e:	f040 8081 	bne.w	8005284 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_UART_Transmit+0x26>
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e079      	b.n	8005286 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_UART_Transmit+0x38>
 800519c:	2302      	movs	r3, #2
 800519e:	e072      	b.n	8005286 <HAL_UART_Transmit+0x11e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2221      	movs	r2, #33	; 0x21
 80051b2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80051b4:	f7fd f878 	bl	80022a8 <HAL_GetTick>
 80051b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	88fa      	ldrh	r2, [r7, #6]
 80051be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	d108      	bne.n	80051e6 <HAL_UART_Transmit+0x7e>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	e003      	b.n	80051ee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80051f6:	e02d      	b.n	8005254 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2200      	movs	r2, #0
 8005200:	2180      	movs	r1, #128	; 0x80
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fd11 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e039      	b.n	8005286 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005224:	b292      	uxth	r2, r2
 8005226:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	3302      	adds	r3, #2
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	e008      	b.n	8005242 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	781a      	ldrb	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	b292      	uxth	r2, r2
 800523a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1cb      	bne.n	80051f8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2200      	movs	r2, #0
 8005268:	2140      	movs	r1, #64	; 0x40
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 fcdd 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e005      	b.n	8005286 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	e000      	b.n	8005286 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005284:	2302      	movs	r3, #2
  }
}
 8005286:	4618      	mov	r0, r3
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80052b6:	4013      	ands	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d113      	bne.n	80052e8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00e      	beq.n	80052e8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8114 	beq.w	8005506 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
      }
      return;
 80052e6:	e10e      	b.n	8005506 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80d6 	beq.w	800549c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4b86      	ldr	r3, [pc, #536]	; (8005518 <HAL_UART_IRQHandler+0x288>)
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 80cb 	beq.w	800549c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00e      	beq.n	800532e <HAL_UART_IRQHandler+0x9e>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d009      	beq.n	800532e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00e      	beq.n	8005356 <HAL_UART_IRQHandler+0xc6>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2202      	movs	r2, #2
 8005348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534e:	f043 0204 	orr.w	r2, r3, #4
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <HAL_UART_IRQHandler+0xee>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2204      	movs	r2, #4
 8005370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005376:	f043 0202 	orr.w	r2, r3, #2
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2208      	movs	r2, #8
 80053a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a8:	f043 0208 	orr.w	r2, r3, #8
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00f      	beq.n	80053da <HAL_UART_IRQHandler+0x14a>
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d2:	f043 0220 	orr.w	r2, r3, #32
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8093 	beq.w	800550a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d004      	beq.n	8005426 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005422:	2b00      	cmp	r3, #0
 8005424:	d031      	beq.n	800548a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fc7a 	bl	8005d20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d123      	bne.n	8005482 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005448:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d013      	beq.n	800547a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005456:	4a31      	ldr	r2, [pc, #196]	; (800551c <HAL_UART_IRQHandler+0x28c>)
 8005458:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd f861 	bl	8002526 <HAL_DMA_Abort_IT>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005474:	4610      	mov	r0, r2
 8005476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005478:	e00e      	b.n	8005498 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f85a 	bl	8005534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	e00a      	b.n	8005498 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f856 	bl	8005534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	e006      	b.n	8005498 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f852 	bl	8005534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005496:	e038      	b.n	800550a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	bf00      	nop
    return;
 800549a:	e036      	b.n	800550a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <HAL_UART_IRQHandler+0x232>
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc7f 	bl	8005dbe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054c0:	e026      	b.n	8005510 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d017      	beq.n	800550e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
    }
    return;
 80054e6:	e012      	b.n	800550e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00e      	beq.n	8005510 <HAL_UART_IRQHandler+0x280>
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fc45 	bl	8005d8c <UART_EndTransmit_IT>
    return;
 8005502:	bf00      	nop
 8005504:	e004      	b.n	8005510 <HAL_UART_IRQHandler+0x280>
      return;
 8005506:	bf00      	nop
 8005508:	e002      	b.n	8005510 <HAL_UART_IRQHandler+0x280>
    return;
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <HAL_UART_IRQHandler+0x280>
    return;
 800550e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	04000120 	.word	0x04000120
 800551c:	08005d61 	.word	0x08005d61

08005520 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005548:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800554c:	b088      	sub	sp, #32
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4313      	orrs	r3, r2
 800556c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4bac      	ldr	r3, [pc, #688]	; (8005828 <UART_SetConfig+0x2e0>)
 8005576:	4013      	ands	r3, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	69f9      	ldr	r1, [r7, #28]
 800557e:	430b      	orrs	r3, r1
 8005580:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4aa2      	ldr	r2, [pc, #648]	; (800582c <UART_SetConfig+0x2e4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a99      	ldr	r2, [pc, #612]	; (8005830 <UART_SetConfig+0x2e8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d121      	bne.n	8005614 <UART_SetConfig+0xcc>
 80055d0:	4b98      	ldr	r3, [pc, #608]	; (8005834 <UART_SetConfig+0x2ec>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d816      	bhi.n	800560c <UART_SetConfig+0xc4>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <UART_SetConfig+0x9c>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	08005601 	.word	0x08005601
 80055ec:	080055fb 	.word	0x080055fb
 80055f0:	08005607 	.word	0x08005607
 80055f4:	2301      	movs	r3, #1
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	e0e8      	b.n	80057cc <UART_SetConfig+0x284>
 80055fa:	2302      	movs	r3, #2
 80055fc:	76fb      	strb	r3, [r7, #27]
 80055fe:	e0e5      	b.n	80057cc <UART_SetConfig+0x284>
 8005600:	2304      	movs	r3, #4
 8005602:	76fb      	strb	r3, [r7, #27]
 8005604:	e0e2      	b.n	80057cc <UART_SetConfig+0x284>
 8005606:	2308      	movs	r3, #8
 8005608:	76fb      	strb	r3, [r7, #27]
 800560a:	e0df      	b.n	80057cc <UART_SetConfig+0x284>
 800560c:	2310      	movs	r3, #16
 800560e:	76fb      	strb	r3, [r7, #27]
 8005610:	bf00      	nop
 8005612:	e0db      	b.n	80057cc <UART_SetConfig+0x284>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a87      	ldr	r2, [pc, #540]	; (8005838 <UART_SetConfig+0x2f0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d134      	bne.n	8005688 <UART_SetConfig+0x140>
 800561e:	4b85      	ldr	r3, [pc, #532]	; (8005834 <UART_SetConfig+0x2ec>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005624:	f003 030c 	and.w	r3, r3, #12
 8005628:	2b0c      	cmp	r3, #12
 800562a:	d829      	bhi.n	8005680 <UART_SetConfig+0x138>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0xec>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005669 	.word	0x08005669
 8005638:	08005681 	.word	0x08005681
 800563c:	08005681 	.word	0x08005681
 8005640:	08005681 	.word	0x08005681
 8005644:	08005675 	.word	0x08005675
 8005648:	08005681 	.word	0x08005681
 800564c:	08005681 	.word	0x08005681
 8005650:	08005681 	.word	0x08005681
 8005654:	0800566f 	.word	0x0800566f
 8005658:	08005681 	.word	0x08005681
 800565c:	08005681 	.word	0x08005681
 8005660:	08005681 	.word	0x08005681
 8005664:	0800567b 	.word	0x0800567b
 8005668:	2300      	movs	r3, #0
 800566a:	76fb      	strb	r3, [r7, #27]
 800566c:	e0ae      	b.n	80057cc <UART_SetConfig+0x284>
 800566e:	2302      	movs	r3, #2
 8005670:	76fb      	strb	r3, [r7, #27]
 8005672:	e0ab      	b.n	80057cc <UART_SetConfig+0x284>
 8005674:	2304      	movs	r3, #4
 8005676:	76fb      	strb	r3, [r7, #27]
 8005678:	e0a8      	b.n	80057cc <UART_SetConfig+0x284>
 800567a:	2308      	movs	r3, #8
 800567c:	76fb      	strb	r3, [r7, #27]
 800567e:	e0a5      	b.n	80057cc <UART_SetConfig+0x284>
 8005680:	2310      	movs	r3, #16
 8005682:	76fb      	strb	r3, [r7, #27]
 8005684:	bf00      	nop
 8005686:	e0a1      	b.n	80057cc <UART_SetConfig+0x284>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a6b      	ldr	r2, [pc, #428]	; (800583c <UART_SetConfig+0x2f4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d120      	bne.n	80056d4 <UART_SetConfig+0x18c>
 8005692:	4b68      	ldr	r3, [pc, #416]	; (8005834 <UART_SetConfig+0x2ec>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800569c:	2b10      	cmp	r3, #16
 800569e:	d00f      	beq.n	80056c0 <UART_SetConfig+0x178>
 80056a0:	2b10      	cmp	r3, #16
 80056a2:	d802      	bhi.n	80056aa <UART_SetConfig+0x162>
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <UART_SetConfig+0x16c>
 80056a8:	e010      	b.n	80056cc <UART_SetConfig+0x184>
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d005      	beq.n	80056ba <UART_SetConfig+0x172>
 80056ae:	2b30      	cmp	r3, #48	; 0x30
 80056b0:	d009      	beq.n	80056c6 <UART_SetConfig+0x17e>
 80056b2:	e00b      	b.n	80056cc <UART_SetConfig+0x184>
 80056b4:	2300      	movs	r3, #0
 80056b6:	76fb      	strb	r3, [r7, #27]
 80056b8:	e088      	b.n	80057cc <UART_SetConfig+0x284>
 80056ba:	2302      	movs	r3, #2
 80056bc:	76fb      	strb	r3, [r7, #27]
 80056be:	e085      	b.n	80057cc <UART_SetConfig+0x284>
 80056c0:	2304      	movs	r3, #4
 80056c2:	76fb      	strb	r3, [r7, #27]
 80056c4:	e082      	b.n	80057cc <UART_SetConfig+0x284>
 80056c6:	2308      	movs	r3, #8
 80056c8:	76fb      	strb	r3, [r7, #27]
 80056ca:	e07f      	b.n	80057cc <UART_SetConfig+0x284>
 80056cc:	2310      	movs	r3, #16
 80056ce:	76fb      	strb	r3, [r7, #27]
 80056d0:	bf00      	nop
 80056d2:	e07b      	b.n	80057cc <UART_SetConfig+0x284>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a59      	ldr	r2, [pc, #356]	; (8005840 <UART_SetConfig+0x2f8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d120      	bne.n	8005720 <UART_SetConfig+0x1d8>
 80056de:	4b55      	ldr	r3, [pc, #340]	; (8005834 <UART_SetConfig+0x2ec>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d00f      	beq.n	800570c <UART_SetConfig+0x1c4>
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d802      	bhi.n	80056f6 <UART_SetConfig+0x1ae>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <UART_SetConfig+0x1b8>
 80056f4:	e010      	b.n	8005718 <UART_SetConfig+0x1d0>
 80056f6:	2b80      	cmp	r3, #128	; 0x80
 80056f8:	d005      	beq.n	8005706 <UART_SetConfig+0x1be>
 80056fa:	2bc0      	cmp	r3, #192	; 0xc0
 80056fc:	d009      	beq.n	8005712 <UART_SetConfig+0x1ca>
 80056fe:	e00b      	b.n	8005718 <UART_SetConfig+0x1d0>
 8005700:	2300      	movs	r3, #0
 8005702:	76fb      	strb	r3, [r7, #27]
 8005704:	e062      	b.n	80057cc <UART_SetConfig+0x284>
 8005706:	2302      	movs	r3, #2
 8005708:	76fb      	strb	r3, [r7, #27]
 800570a:	e05f      	b.n	80057cc <UART_SetConfig+0x284>
 800570c:	2304      	movs	r3, #4
 800570e:	76fb      	strb	r3, [r7, #27]
 8005710:	e05c      	b.n	80057cc <UART_SetConfig+0x284>
 8005712:	2308      	movs	r3, #8
 8005714:	76fb      	strb	r3, [r7, #27]
 8005716:	e059      	b.n	80057cc <UART_SetConfig+0x284>
 8005718:	2310      	movs	r3, #16
 800571a:	76fb      	strb	r3, [r7, #27]
 800571c:	bf00      	nop
 800571e:	e055      	b.n	80057cc <UART_SetConfig+0x284>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a47      	ldr	r2, [pc, #284]	; (8005844 <UART_SetConfig+0x2fc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d124      	bne.n	8005774 <UART_SetConfig+0x22c>
 800572a:	4b42      	ldr	r3, [pc, #264]	; (8005834 <UART_SetConfig+0x2ec>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005738:	d012      	beq.n	8005760 <UART_SetConfig+0x218>
 800573a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573e:	d802      	bhi.n	8005746 <UART_SetConfig+0x1fe>
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <UART_SetConfig+0x20c>
 8005744:	e012      	b.n	800576c <UART_SetConfig+0x224>
 8005746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574a:	d006      	beq.n	800575a <UART_SetConfig+0x212>
 800574c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005750:	d009      	beq.n	8005766 <UART_SetConfig+0x21e>
 8005752:	e00b      	b.n	800576c <UART_SetConfig+0x224>
 8005754:	2300      	movs	r3, #0
 8005756:	76fb      	strb	r3, [r7, #27]
 8005758:	e038      	b.n	80057cc <UART_SetConfig+0x284>
 800575a:	2302      	movs	r3, #2
 800575c:	76fb      	strb	r3, [r7, #27]
 800575e:	e035      	b.n	80057cc <UART_SetConfig+0x284>
 8005760:	2304      	movs	r3, #4
 8005762:	76fb      	strb	r3, [r7, #27]
 8005764:	e032      	b.n	80057cc <UART_SetConfig+0x284>
 8005766:	2308      	movs	r3, #8
 8005768:	76fb      	strb	r3, [r7, #27]
 800576a:	e02f      	b.n	80057cc <UART_SetConfig+0x284>
 800576c:	2310      	movs	r3, #16
 800576e:	76fb      	strb	r3, [r7, #27]
 8005770:	bf00      	nop
 8005772:	e02b      	b.n	80057cc <UART_SetConfig+0x284>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2c      	ldr	r2, [pc, #176]	; (800582c <UART_SetConfig+0x2e4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d124      	bne.n	80057c8 <UART_SetConfig+0x280>
 800577e:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <UART_SetConfig+0x2ec>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005784:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	d012      	beq.n	80057b4 <UART_SetConfig+0x26c>
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005792:	d802      	bhi.n	800579a <UART_SetConfig+0x252>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <UART_SetConfig+0x260>
 8005798:	e012      	b.n	80057c0 <UART_SetConfig+0x278>
 800579a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579e:	d006      	beq.n	80057ae <UART_SetConfig+0x266>
 80057a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057a4:	d009      	beq.n	80057ba <UART_SetConfig+0x272>
 80057a6:	e00b      	b.n	80057c0 <UART_SetConfig+0x278>
 80057a8:	2300      	movs	r3, #0
 80057aa:	76fb      	strb	r3, [r7, #27]
 80057ac:	e00e      	b.n	80057cc <UART_SetConfig+0x284>
 80057ae:	2302      	movs	r3, #2
 80057b0:	76fb      	strb	r3, [r7, #27]
 80057b2:	e00b      	b.n	80057cc <UART_SetConfig+0x284>
 80057b4:	2304      	movs	r3, #4
 80057b6:	76fb      	strb	r3, [r7, #27]
 80057b8:	e008      	b.n	80057cc <UART_SetConfig+0x284>
 80057ba:	2308      	movs	r3, #8
 80057bc:	76fb      	strb	r3, [r7, #27]
 80057be:	e005      	b.n	80057cc <UART_SetConfig+0x284>
 80057c0:	2310      	movs	r3, #16
 80057c2:	76fb      	strb	r3, [r7, #27]
 80057c4:	bf00      	nop
 80057c6:	e001      	b.n	80057cc <UART_SetConfig+0x284>
 80057c8:	2310      	movs	r3, #16
 80057ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a16      	ldr	r2, [pc, #88]	; (800582c <UART_SetConfig+0x2e4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f040 8087 	bne.w	80058e6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057d8:	7efb      	ldrb	r3, [r7, #27]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d836      	bhi.n	800584c <UART_SetConfig+0x304>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <UART_SetConfig+0x29c>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005809 	.word	0x08005809
 80057e8:	0800584d 	.word	0x0800584d
 80057ec:	08005811 	.word	0x08005811
 80057f0:	0800584d 	.word	0x0800584d
 80057f4:	08005817 	.word	0x08005817
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	0800584d 	.word	0x0800584d
 8005800:	0800584d 	.word	0x0800584d
 8005804:	0800581f 	.word	0x0800581f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fe f872 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 800580c:	6178      	str	r0, [r7, #20]
        break;
 800580e:	e022      	b.n	8005856 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005810:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <UART_SetConfig+0x300>)
 8005812:	617b      	str	r3, [r7, #20]
        break;
 8005814:	e01f      	b.n	8005856 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005816:	f7fd ffd5 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 800581a:	6178      	str	r0, [r7, #20]
        break;
 800581c:	e01b      	b.n	8005856 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005822:	617b      	str	r3, [r7, #20]
        break;
 8005824:	e017      	b.n	8005856 <UART_SetConfig+0x30e>
 8005826:	bf00      	nop
 8005828:	efff69f3 	.word	0xefff69f3
 800582c:	40008000 	.word	0x40008000
 8005830:	40013800 	.word	0x40013800
 8005834:	40021000 	.word	0x40021000
 8005838:	40004400 	.word	0x40004400
 800583c:	40004800 	.word	0x40004800
 8005840:	40004c00 	.word	0x40004c00
 8005844:	40005000 	.word	0x40005000
 8005848:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	76bb      	strb	r3, [r7, #26]
        break;
 8005854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80f1 	beq.w	8005a40 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4413      	add	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	429a      	cmp	r2, r3
 800586c:	d305      	bcc.n	800587a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	429a      	cmp	r2, r3
 8005878:	d902      	bls.n	8005880 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	76bb      	strb	r3, [r7, #26]
 800587e:	e0df      	b.n	8005a40 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4619      	mov	r1, r3
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	f04f 0400 	mov.w	r4, #0
 8005890:	0214      	lsls	r4, r2, #8
 8005892:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005896:	020b      	lsls	r3, r1, #8
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6852      	ldr	r2, [r2, #4]
 800589c:	0852      	lsrs	r2, r2, #1
 800589e:	4611      	mov	r1, r2
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	eb13 0b01 	adds.w	fp, r3, r1
 80058a8:	eb44 0c02 	adc.w	ip, r4, r2
 80058ac:	4658      	mov	r0, fp
 80058ae:	4661      	mov	r1, ip
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	461a      	mov	r2, r3
 80058ba:	4623      	mov	r3, r4
 80058bc:	f7fb f8de 	bl	8000a7c <__aeabi_uldivmod>
 80058c0:	4603      	mov	r3, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058cc:	d308      	bcc.n	80058e0 <UART_SetConfig+0x398>
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d4:	d204      	bcs.n	80058e0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	e0af      	b.n	8005a40 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	76bb      	strb	r3, [r7, #26]
 80058e4:	e0ac      	b.n	8005a40 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ee:	d15b      	bne.n	80059a8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80058f0:	7efb      	ldrb	r3, [r7, #27]
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d827      	bhi.n	8005946 <UART_SetConfig+0x3fe>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0x3b4>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005921 	.word	0x08005921
 8005900:	08005929 	.word	0x08005929
 8005904:	08005931 	.word	0x08005931
 8005908:	08005947 	.word	0x08005947
 800590c:	08005937 	.word	0x08005937
 8005910:	08005947 	.word	0x08005947
 8005914:	08005947 	.word	0x08005947
 8005918:	08005947 	.word	0x08005947
 800591c:	0800593f 	.word	0x0800593f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fd ffe6 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8005924:	6178      	str	r0, [r7, #20]
        break;
 8005926:	e013      	b.n	8005950 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fd fff8 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 800592c:	6178      	str	r0, [r7, #20]
        break;
 800592e:	e00f      	b.n	8005950 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005930:	4b49      	ldr	r3, [pc, #292]	; (8005a58 <UART_SetConfig+0x510>)
 8005932:	617b      	str	r3, [r7, #20]
        break;
 8005934:	e00c      	b.n	8005950 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005936:	f7fd ff45 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 800593a:	6178      	str	r0, [r7, #20]
        break;
 800593c:	e008      	b.n	8005950 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005942:	617b      	str	r3, [r7, #20]
        break;
 8005944:	e004      	b.n	8005950 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	76bb      	strb	r3, [r7, #26]
        break;
 800594e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d074      	beq.n	8005a40 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	005a      	lsls	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	441a      	add	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b0f      	cmp	r3, #15
 8005972:	d916      	bls.n	80059a2 <UART_SetConfig+0x45a>
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597a:	d212      	bcs.n	80059a2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f023 030f 	bic.w	r3, r3, #15
 8005984:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	b29b      	uxth	r3, r3
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	b29a      	uxth	r2, r3
 8005992:	89fb      	ldrh	r3, [r7, #14]
 8005994:	4313      	orrs	r3, r2
 8005996:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	89fa      	ldrh	r2, [r7, #14]
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	e04e      	b.n	8005a40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	76bb      	strb	r3, [r7, #26]
 80059a6:	e04b      	b.n	8005a40 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059a8:	7efb      	ldrb	r3, [r7, #27]
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d827      	bhi.n	80059fe <UART_SetConfig+0x4b6>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <UART_SetConfig+0x46c>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	080059ff 	.word	0x080059ff
 80059c4:	080059ef 	.word	0x080059ef
 80059c8:	080059ff 	.word	0x080059ff
 80059cc:	080059ff 	.word	0x080059ff
 80059d0:	080059ff 	.word	0x080059ff
 80059d4:	080059f7 	.word	0x080059f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d8:	f7fd ff8a 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 80059dc:	6178      	str	r0, [r7, #20]
        break;
 80059de:	e013      	b.n	8005a08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e0:	f7fd ff9c 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 80059e4:	6178      	str	r0, [r7, #20]
        break;
 80059e6:	e00f      	b.n	8005a08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e8:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <UART_SetConfig+0x510>)
 80059ea:	617b      	str	r3, [r7, #20]
        break;
 80059ec:	e00c      	b.n	8005a08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ee:	f7fd fee9 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 80059f2:	6178      	str	r0, [r7, #20]
        break;
 80059f4:	e008      	b.n	8005a08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fa:	617b      	str	r3, [r7, #20]
        break;
 80059fc:	e004      	b.n	8005a08 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	76bb      	strb	r3, [r7, #26]
        break;
 8005a06:	bf00      	nop
    }

    if (pclk != 0U)
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	085a      	lsrs	r2, r3, #1
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	441a      	add	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b0f      	cmp	r3, #15
 8005a28:	d908      	bls.n	8005a3c <UART_SetConfig+0x4f4>
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a30:	d204      	bcs.n	8005a3c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	60da      	str	r2, [r3, #12]
 8005a3a:	e001      	b.n	8005a40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005a4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3720      	adds	r7, #32
 8005a52:	46bd      	mov	sp, r7
 8005a54:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005a58:	00f42400 	.word	0x00f42400

08005a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5a:	d10a      	bne.n	8005b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bae:	f7fc fb7b 	bl	80022a8 <HAL_GetTick>
 8005bb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d10e      	bne.n	8005be0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f82a 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e020      	b.n	8005c22 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d10e      	bne.n	8005c0c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f814 	bl	8005c2a <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e00a      	b.n	8005c22 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c3a:	e05d      	b.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d059      	beq.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c44:	f7fc fb30 	bl	80022a8 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d302      	bcc.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11b      	bne.n	8005c92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e042      	b.n	8005d18 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d02b      	beq.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cae:	d123      	bne.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cc8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0201 	bic.w	r2, r2, #1
 8005cd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e00f      	b.n	8005d18 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4013      	ands	r3, r2
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d092      	beq.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff fbd8 	bl	8005534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff fbb5 	bl	8005520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005dd8:	4904      	ldr	r1, [pc, #16]	; (8005dec <MX_FATFS_Init+0x18>)
 8005dda:	4805      	ldr	r0, [pc, #20]	; (8005df0 <MX_FATFS_Init+0x1c>)
 8005ddc:	f003 f9cc 	bl	8009178 <FATFS_LinkDriver>
 8005de0:	4603      	mov	r3, r0
 8005de2:	461a      	mov	r2, r3
 8005de4:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <MX_FATFS_Init+0x20>)
 8005de6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005de8:	bf00      	nop
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20002880 	.word	0x20002880
 8005df0:	20000034 	.word	0x20000034
 8005df4:	20002884 	.word	0x20002884

08005df8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005dfc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4603      	mov	r3, r0
 8005e10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fb f965 	bl	80010e4 <SD_disk_initialize>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <USER_initialize+0x28>)
 8005e20:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005e22:	4b03      	ldr	r3, [pc, #12]	; (8005e30 <USER_initialize+0x28>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000030 	.word	0x20000030

08005e34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fb fa3b 	bl	80012bc <SD_disk_status>
 8005e46:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8005e60:	7bf8      	ldrb	r0, [r7, #15]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	f7fb fa3e 	bl	80012e8 <SD_disk_read>
 8005e6c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4603      	mov	r3, r0
 8005e84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8005e86:	7bf8      	ldrb	r0, [r7, #15]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68b9      	ldr	r1, [r7, #8]
 8005e8e:	f7fb fa95 	bl	80013bc <SD_disk_write>
 8005e92:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	603a      	str	r2, [r7, #0]
 8005ea6:	71fb      	strb	r3, [r7, #7]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8005eac:	79b9      	ldrb	r1, [r7, #6]
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fb fb06 	bl	80014c4 <SD_disk_ioctl>
 8005eb8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4603      	mov	r3, r0
 8005ecc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	4a08      	ldr	r2, [pc, #32]	; (8005ef4 <disk_status+0x30>)
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	79fa      	ldrb	r2, [r7, #7]
 8005edc:	4905      	ldr	r1, [pc, #20]	; (8005ef4 <disk_status+0x30>)
 8005ede:	440a      	add	r2, r1
 8005ee0:	7a12      	ldrb	r2, [r2, #8]
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4798      	blx	r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	200002f8 	.word	0x200002f8

08005ef8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	4a0d      	ldr	r2, [pc, #52]	; (8005f40 <disk_initialize+0x48>)
 8005f0a:	5cd3      	ldrb	r3, [r2, r3]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d111      	bne.n	8005f34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	4a0b      	ldr	r2, [pc, #44]	; (8005f40 <disk_initialize+0x48>)
 8005f14:	2101      	movs	r1, #1
 8005f16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <disk_initialize+0x48>)
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	79fa      	ldrb	r2, [r7, #7]
 8005f26:	4906      	ldr	r1, [pc, #24]	; (8005f40 <disk_initialize+0x48>)
 8005f28:	440a      	add	r2, r1
 8005f2a:	7a12      	ldrb	r2, [r2, #8]
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	200002f8 	.word	0x200002f8

08005f44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	4a0a      	ldr	r2, [pc, #40]	; (8005f80 <disk_read+0x3c>)
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	689c      	ldr	r4, [r3, #8]
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	4a07      	ldr	r2, [pc, #28]	; (8005f80 <disk_read+0x3c>)
 8005f64:	4413      	add	r3, r2
 8005f66:	7a18      	ldrb	r0, [r3, #8]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	47a0      	blx	r4
 8005f70:	4603      	mov	r3, r0
 8005f72:	75fb      	strb	r3, [r7, #23]
  return res;
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd90      	pop	{r4, r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	200002f8 	.word	0x200002f8

08005f84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005f84:	b590      	push	{r4, r7, lr}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4603      	mov	r3, r0
 8005f92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	4a0a      	ldr	r2, [pc, #40]	; (8005fc0 <disk_write+0x3c>)
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	68dc      	ldr	r4, [r3, #12]
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <disk_write+0x3c>)
 8005fa4:	4413      	add	r3, r2
 8005fa6:	7a18      	ldrb	r0, [r3, #8]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	68b9      	ldr	r1, [r7, #8]
 8005fae:	47a0      	blx	r4
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd90      	pop	{r4, r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	200002f8 	.word	0x200002f8

08005fc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	603a      	str	r2, [r7, #0]
 8005fce:	71fb      	strb	r3, [r7, #7]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <disk_ioctl+0x38>)
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	79fa      	ldrb	r2, [r7, #7]
 8005fe2:	4906      	ldr	r1, [pc, #24]	; (8005ffc <disk_ioctl+0x38>)
 8005fe4:	440a      	add	r2, r1
 8005fe6:	7a10      	ldrb	r0, [r2, #8]
 8005fe8:	79b9      	ldrb	r1, [r7, #6]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	4798      	blx	r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	200002f8 	.word	0x200002f8

08006000 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3301      	adds	r3, #1
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	b21a      	sxth	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b21b      	sxth	r3, r3
 800601c:	4313      	orrs	r3, r2
 800601e:	b21b      	sxth	r3, r3
 8006020:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006022:	89fb      	ldrh	r3, [r7, #14]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3303      	adds	r3, #3
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	3202      	adds	r2, #2
 8006048:	7812      	ldrb	r2, [r2, #0]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	3201      	adds	r2, #1
 8006056:	7812      	ldrb	r2, [r2, #0]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
	return rv;
 8006068:	68fb      	ldr	r3, [r7, #12]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	460b      	mov	r3, r1
 8006080:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	887a      	ldrh	r2, [r7, #2]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	0a1b      	lsrs	r3, r3, #8
 80060c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	0a1b      	lsrs	r3, r3, #8
 80060d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	1c53      	adds	r3, r2, #1
 8006122:	613b      	str	r3, [r7, #16]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	6179      	str	r1, [r7, #20]
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3b01      	subs	r3, #1
 8006132:	607b      	str	r3, [r7, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f1      	bne.n	800611e <mem_cpy+0x1a>
	}
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	617a      	str	r2, [r7, #20]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3b01      	subs	r3, #1
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f3      	bne.n	8006156 <mem_set+0x10>
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800617a:	b480      	push	{r7}
 800617c:	b089      	sub	sp, #36	; 0x24
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	61fa      	str	r2, [r7, #28]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	4619      	mov	r1, r3
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	61ba      	str	r2, [r7, #24]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	1acb      	subs	r3, r1, r3
 80061a6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <mem_cmp+0x40>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0eb      	beq.n	8006192 <mem_cmp+0x18>

	return r;
 80061ba:	697b      	ldr	r3, [r7, #20]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3724      	adds	r7, #36	; 0x24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80061d2:	e002      	b.n	80061da <chk_chr+0x12>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3301      	adds	r3, #1
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <chk_chr+0x26>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d1f2      	bne.n	80061d4 <chk_chr+0xc>
	return *str;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	781b      	ldrb	r3, [r3, #0]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e029      	b.n	8006268 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006214:	4a27      	ldr	r2, [pc, #156]	; (80062b4 <chk_lock+0xb4>)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	4413      	add	r3, r2
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01d      	beq.n	800625e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006222:	4a24      	ldr	r2, [pc, #144]	; (80062b4 <chk_lock+0xb4>)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	4413      	add	r3, r2
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d116      	bne.n	8006262 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006234:	4a1f      	ldr	r2, [pc, #124]	; (80062b4 <chk_lock+0xb4>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	4413      	add	r3, r2
 800623c:	3304      	adds	r3, #4
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006244:	429a      	cmp	r2, r3
 8006246:	d10c      	bne.n	8006262 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006248:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <chk_lock+0xb4>)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	4413      	add	r3, r2
 8006250:	3308      	adds	r3, #8
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006258:	429a      	cmp	r2, r3
 800625a:	d102      	bne.n	8006262 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800625c:	e007      	b.n	800626e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800625e:	2301      	movs	r3, #1
 8006260:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d9d2      	bls.n	8006214 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d109      	bne.n	8006288 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <chk_lock+0x80>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d101      	bne.n	8006284 <chk_lock+0x84>
 8006280:	2300      	movs	r3, #0
 8006282:	e010      	b.n	80062a6 <chk_lock+0xa6>
 8006284:	2312      	movs	r3, #18
 8006286:	e00e      	b.n	80062a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <chk_lock+0xa0>
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <chk_lock+0xb4>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4413      	add	r3, r2
 8006296:	330c      	adds	r3, #12
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629e:	d101      	bne.n	80062a4 <chk_lock+0xa4>
 80062a0:	2310      	movs	r3, #16
 80062a2:	e000      	b.n	80062a6 <chk_lock+0xa6>
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	200000d8 	.word	0x200000d8

080062b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062be:	2300      	movs	r3, #0
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	e002      	b.n	80062ca <enq_lock+0x12>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3301      	adds	r3, #1
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d806      	bhi.n	80062de <enq_lock+0x26>
 80062d0:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <enq_lock+0x40>)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	4413      	add	r3, r2
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f2      	bne.n	80062c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	bf14      	ite	ne
 80062e4:	2301      	movne	r3, #1
 80062e6:	2300      	moveq	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	200000d8 	.word	0x200000d8

080062fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	e01f      	b.n	800634c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800630c:	4a41      	ldr	r2, [pc, #260]	; (8006414 <inc_lock+0x118>)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	4413      	add	r3, r2
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d113      	bne.n	8006346 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800631e:	4a3d      	ldr	r2, [pc, #244]	; (8006414 <inc_lock+0x118>)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	4413      	add	r3, r2
 8006326:	3304      	adds	r3, #4
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800632e:	429a      	cmp	r2, r3
 8006330:	d109      	bne.n	8006346 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006332:	4a38      	ldr	r2, [pc, #224]	; (8006414 <inc_lock+0x118>)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4413      	add	r3, r2
 800633a:	3308      	adds	r3, #8
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006342:	429a      	cmp	r2, r3
 8006344:	d006      	beq.n	8006354 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d9dc      	bls.n	800630c <inc_lock+0x10>
 8006352:	e000      	b.n	8006356 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006354:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d132      	bne.n	80063c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e002      	b.n	8006368 <inc_lock+0x6c>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d806      	bhi.n	800637c <inc_lock+0x80>
 800636e:	4a29      	ldr	r2, [pc, #164]	; (8006414 <inc_lock+0x118>)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	4413      	add	r3, r2
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f2      	bne.n	8006362 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d101      	bne.n	8006386 <inc_lock+0x8a>
 8006382:	2300      	movs	r3, #0
 8006384:	e040      	b.n	8006408 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4922      	ldr	r1, [pc, #136]	; (8006414 <inc_lock+0x118>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	440b      	add	r3, r1
 8006392:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	491e      	ldr	r1, [pc, #120]	; (8006414 <inc_lock+0x118>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	440b      	add	r3, r1
 80063a0:	3304      	adds	r3, #4
 80063a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	491a      	ldr	r1, [pc, #104]	; (8006414 <inc_lock+0x118>)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	440b      	add	r3, r1
 80063b0:	3308      	adds	r3, #8
 80063b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80063b4:	4a17      	ldr	r2, [pc, #92]	; (8006414 <inc_lock+0x118>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	4413      	add	r3, r2
 80063bc:	330c      	adds	r3, #12
 80063be:	2200      	movs	r2, #0
 80063c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <inc_lock+0xe0>
 80063c8:	4a12      	ldr	r2, [pc, #72]	; (8006414 <inc_lock+0x118>)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	4413      	add	r3, r2
 80063d0:	330c      	adds	r3, #12
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <inc_lock+0xe0>
 80063d8:	2300      	movs	r3, #0
 80063da:	e015      	b.n	8006408 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d108      	bne.n	80063f4 <inc_lock+0xf8>
 80063e2:	4a0c      	ldr	r2, [pc, #48]	; (8006414 <inc_lock+0x118>)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	4413      	add	r3, r2
 80063ea:	330c      	adds	r3, #12
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	3301      	adds	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	e001      	b.n	80063f8 <inc_lock+0xfc>
 80063f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063f8:	4906      	ldr	r1, [pc, #24]	; (8006414 <inc_lock+0x118>)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	440b      	add	r3, r1
 8006400:	330c      	adds	r3, #12
 8006402:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	200000d8 	.word	0x200000d8

08006418 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3b01      	subs	r3, #1
 8006424:	607b      	str	r3, [r7, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d825      	bhi.n	8006478 <dec_lock+0x60>
		n = Files[i].ctr;
 800642c:	4a17      	ldr	r2, [pc, #92]	; (800648c <dec_lock+0x74>)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	4413      	add	r3, r2
 8006434:	330c      	adds	r3, #12
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800643a:	89fb      	ldrh	r3, [r7, #14]
 800643c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006440:	d101      	bne.n	8006446 <dec_lock+0x2e>
 8006442:	2300      	movs	r3, #0
 8006444:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006446:	89fb      	ldrh	r3, [r7, #14]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <dec_lock+0x3a>
 800644c:	89fb      	ldrh	r3, [r7, #14]
 800644e:	3b01      	subs	r3, #1
 8006450:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006452:	4a0e      	ldr	r2, [pc, #56]	; (800648c <dec_lock+0x74>)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	4413      	add	r3, r2
 800645a:	330c      	adds	r3, #12
 800645c:	89fa      	ldrh	r2, [r7, #14]
 800645e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006460:	89fb      	ldrh	r3, [r7, #14]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d105      	bne.n	8006472 <dec_lock+0x5a>
 8006466:	4a09      	ldr	r2, [pc, #36]	; (800648c <dec_lock+0x74>)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	4413      	add	r3, r2
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	737b      	strb	r3, [r7, #13]
 8006476:	e001      	b.n	800647c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006478:	2302      	movs	r3, #2
 800647a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800647c:	7b7b      	ldrb	r3, [r7, #13]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	200000d8 	.word	0x200000d8

08006490 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e010      	b.n	80064c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800649e:	4a0d      	ldr	r2, [pc, #52]	; (80064d4 <clear_lock+0x44>)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	4413      	add	r3, r2
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d105      	bne.n	80064ba <clear_lock+0x2a>
 80064ae:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <clear_lock+0x44>)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	4413      	add	r3, r2
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3301      	adds	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d9eb      	bls.n	800649e <clear_lock+0xe>
	}
}
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	200000d8 	.word	0x200000d8

080064d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	78db      	ldrb	r3, [r3, #3]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d034      	beq.n	8006556 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	7858      	ldrb	r0, [r3, #1]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80064fc:	2301      	movs	r3, #1
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	f7ff fd40 	bl	8005f84 <disk_write>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <sync_window+0x38>
			res = FR_DISK_ERR;
 800650a:	2301      	movs	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
 800650e:	e022      	b.n	8006556 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	1ad2      	subs	r2, r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	429a      	cmp	r2, r3
 8006524:	d217      	bcs.n	8006556 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	789b      	ldrb	r3, [r3, #2]
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	e010      	b.n	8006550 <sync_window+0x78>
					wsect += fs->fsize;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	7858      	ldrb	r0, [r3, #1]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006542:	2301      	movs	r3, #1
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	f7ff fd1d 	bl	8005f84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	3b01      	subs	r3, #1
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d8eb      	bhi.n	800652e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d01b      	beq.n	80065b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff ffad 	bl	80064d8 <sync_window>
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d113      	bne.n	80065b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	7858      	ldrb	r0, [r3, #1]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006592:	2301      	movs	r3, #1
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	f7ff fcd5 	bl	8005f44 <disk_read>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80065a0:	f04f 33ff 	mov.w	r3, #4294967295
 80065a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff ff87 	bl	80064d8 <sync_window>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d159      	bne.n	8006688 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d149      	bne.n	8006670 <sync_fs+0xb4>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	791b      	ldrb	r3, [r3, #4]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d145      	bne.n	8006670 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	899b      	ldrh	r3, [r3, #12]
 80065ee:	461a      	mov	r2, r3
 80065f0:	2100      	movs	r1, #0
 80065f2:	f7ff fda8 	bl	8006146 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3338      	adds	r3, #56	; 0x38
 80065fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065fe:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fd37 	bl	8006076 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3338      	adds	r3, #56	; 0x38
 800660c:	4921      	ldr	r1, [pc, #132]	; (8006694 <sync_fs+0xd8>)
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fd4c 	bl	80060ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3338      	adds	r3, #56	; 0x38
 8006618:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800661c:	491e      	ldr	r1, [pc, #120]	; (8006698 <sync_fs+0xdc>)
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fd44 	bl	80060ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3338      	adds	r3, #56	; 0x38
 8006628:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f7ff fd3a 	bl	80060ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3338      	adds	r3, #56	; 0x38
 800663c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	4619      	mov	r1, r3
 8006646:	4610      	mov	r0, r2
 8006648:	f7ff fd30 	bl	80060ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	7858      	ldrb	r0, [r3, #1]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006664:	2301      	movs	r3, #1
 8006666:	f7ff fc8d 	bl	8005f84 <disk_write>
			fs->fsi_flag = 0;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2200      	movs	r2, #0
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff fca3 	bl	8005fc4 <disk_ioctl>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <sync_fs+0xcc>
 8006684:	2301      	movs	r3, #1
 8006686:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	41615252 	.word	0x41615252
 8006698:	61417272 	.word	0x61417272

0800669c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	3b02      	subs	r3, #2
 80066aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	3b02      	subs	r3, #2
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d301      	bcc.n	80066bc <clust2sect+0x20>
 80066b8:	2300      	movs	r3, #0
 80066ba:	e008      	b.n	80066ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	895b      	ldrh	r3, [r3, #10]
 80066c0:	461a      	mov	r2, r3
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	fb03 f202 	mul.w	r2, r3, r2
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	4413      	add	r3, r2
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d904      	bls.n	80066fa <get_fat+0x20>
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d302      	bcc.n	8006700 <get_fat+0x26>
		val = 1;	/* Internal error */
 80066fa:	2301      	movs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	e0b7      	b.n	8006870 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d05a      	beq.n	80067c4 <get_fat+0xea>
 800670e:	2b03      	cmp	r3, #3
 8006710:	d07d      	beq.n	800680e <get_fat+0x134>
 8006712:	2b01      	cmp	r3, #1
 8006714:	f040 80a2 	bne.w	800685c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	899b      	ldrh	r3, [r3, #12]
 800672e:	4619      	mov	r1, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	fbb3 f3f1 	udiv	r3, r3, r1
 8006736:	4413      	add	r3, r2
 8006738:	4619      	mov	r1, r3
 800673a:	6938      	ldr	r0, [r7, #16]
 800673c:	f7ff ff10 	bl	8006560 <move_window>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f040 808d 	bne.w	8006862 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	60fa      	str	r2, [r7, #12]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	8992      	ldrh	r2, [r2, #12]
 8006752:	fbb3 f1f2 	udiv	r1, r3, r2
 8006756:	fb02 f201 	mul.w	r2, r2, r1
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006764:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	899b      	ldrh	r3, [r3, #12]
 800676e:	4619      	mov	r1, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	fbb3 f3f1 	udiv	r3, r3, r1
 8006776:	4413      	add	r3, r2
 8006778:	4619      	mov	r1, r3
 800677a:	6938      	ldr	r0, [r7, #16]
 800677c:	f7ff fef0 	bl	8006560 <move_window>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d16f      	bne.n	8006866 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	899b      	ldrh	r3, [r3, #12]
 800678a:	461a      	mov	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006792:	fb02 f201 	mul.w	r2, r2, r1
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	461a      	mov	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <get_fat+0xe0>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	e002      	b.n	80067c0 <get_fat+0xe6>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c0:	617b      	str	r3, [r7, #20]
			break;
 80067c2:	e055      	b.n	8006870 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	899b      	ldrh	r3, [r3, #12]
 80067cc:	085b      	lsrs	r3, r3, #1
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d8:	4413      	add	r3, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	6938      	ldr	r0, [r7, #16]
 80067de:	f7ff febf 	bl	8006560 <move_window>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d140      	bne.n	800686a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	8992      	ldrh	r2, [r2, #12]
 80067f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80067fa:	fb02 f200 	mul.w	r2, r2, r0
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	440b      	add	r3, r1
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fbfc 	bl	8006000 <ld_word>
 8006808:	4603      	mov	r3, r0
 800680a:	617b      	str	r3, [r7, #20]
			break;
 800680c:	e030      	b.n	8006870 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	899b      	ldrh	r3, [r3, #12]
 8006816:	089b      	lsrs	r3, r3, #2
 8006818:	b29b      	uxth	r3, r3
 800681a:	4619      	mov	r1, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006822:	4413      	add	r3, r2
 8006824:	4619      	mov	r1, r3
 8006826:	6938      	ldr	r0, [r7, #16]
 8006828:	f7ff fe9a 	bl	8006560 <move_window>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11d      	bne.n	800686e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	8992      	ldrh	r2, [r2, #12]
 8006840:	fbb3 f0f2 	udiv	r0, r3, r2
 8006844:	fb02 f200 	mul.w	r2, r2, r0
 8006848:	1a9b      	subs	r3, r3, r2
 800684a:	440b      	add	r3, r1
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff fbef 	bl	8006030 <ld_dword>
 8006852:	4603      	mov	r3, r0
 8006854:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006858:	617b      	str	r3, [r7, #20]
			break;
 800685a:	e009      	b.n	8006870 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e006      	b.n	8006870 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006862:	bf00      	nop
 8006864:	e004      	b.n	8006870 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006866:	bf00      	nop
 8006868:	e002      	b.n	8006870 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800686a:	bf00      	nop
 800686c:	e000      	b.n	8006870 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800686e:	bf00      	nop
		}
	}

	return val;
 8006870:	697b      	ldr	r3, [r7, #20]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800687a:	b590      	push	{r4, r7, lr}
 800687c:	b089      	sub	sp, #36	; 0x24
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006886:	2302      	movs	r3, #2
 8006888:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b01      	cmp	r3, #1
 800688e:	f240 8106 	bls.w	8006a9e <put_fat+0x224>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	f080 8100 	bcs.w	8006a9e <put_fat+0x224>
		switch (fs->fs_type) {
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	f000 8088 	beq.w	80069b8 <put_fat+0x13e>
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	f000 80b0 	beq.w	8006a0e <put_fat+0x194>
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	f040 80f5 	bne.w	8006a9e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	085b      	lsrs	r3, r3, #1
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	4413      	add	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	899b      	ldrh	r3, [r3, #12]
 80068ca:	4619      	mov	r1, r3
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80068d2:	4413      	add	r3, r2
 80068d4:	4619      	mov	r1, r3
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff fe42 	bl	8006560 <move_window>
 80068dc:	4603      	mov	r3, r0
 80068de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f040 80d4 	bne.w	8006a90 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	61ba      	str	r2, [r7, #24]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	8992      	ldrh	r2, [r2, #12]
 80068f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80068fc:	fb02 f200 	mul.w	r2, r2, r0
 8006900:	1a9b      	subs	r3, r3, r2
 8006902:	440b      	add	r3, r1
 8006904:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00d      	beq.n	800692c <put_fat+0xb2>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b25b      	sxtb	r3, r3
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	b25a      	sxtb	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	b25b      	sxtb	r3, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	b25b      	sxtb	r3, r3
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e001      	b.n	8006930 <put_fat+0xb6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	899b      	ldrh	r3, [r3, #12]
 8006942:	4619      	mov	r1, r3
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	fbb3 f3f1 	udiv	r3, r3, r1
 800694a:	4413      	add	r3, r2
 800694c:	4619      	mov	r1, r3
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff fe06 	bl	8006560 <move_window>
 8006954:	4603      	mov	r3, r0
 8006956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006958:	7ffb      	ldrb	r3, [r7, #31]
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 809a 	bne.w	8006a94 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	899b      	ldrh	r3, [r3, #12]
 800696a:	461a      	mov	r2, r3
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006972:	fb02 f200 	mul.w	r2, r2, r0
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	440b      	add	r3, r1
 800697a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <put_fat+0x114>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	b2db      	uxtb	r3, r3
 800698c:	e00e      	b.n	80069ac <put_fat+0x132>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	b25b      	sxtb	r3, r3
 8006994:	f023 030f 	bic.w	r3, r3, #15
 8006998:	b25a      	sxtb	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	0a1b      	lsrs	r3, r3, #8
 800699e:	b25b      	sxtb	r3, r3
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	b25b      	sxtb	r3, r3
 80069a6:	4313      	orrs	r3, r2
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	70da      	strb	r2, [r3, #3]
			break;
 80069b6:	e072      	b.n	8006a9e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	899b      	ldrh	r3, [r3, #12]
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4619      	mov	r1, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80069cc:	4413      	add	r3, r2
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff fdc5 	bl	8006560 <move_window>
 80069d6:	4603      	mov	r3, r0
 80069d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80069da:	7ffb      	ldrb	r3, [r7, #31]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d15b      	bne.n	8006a98 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	8992      	ldrh	r2, [r2, #12]
 80069ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80069f2:	fb02 f200 	mul.w	r2, r2, r0
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	440b      	add	r3, r1
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	b292      	uxth	r2, r2
 80069fe:	4611      	mov	r1, r2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fb38 	bl	8006076 <st_word>
			fs->wflag = 1;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	70da      	strb	r2, [r3, #3]
			break;
 8006a0c:	e047      	b.n	8006a9e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	899b      	ldrh	r3, [r3, #12]
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a22:	4413      	add	r3, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fd9a 	bl	8006560 <move_window>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a30:	7ffb      	ldrb	r3, [r7, #31]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d132      	bne.n	8006a9c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	8992      	ldrh	r2, [r2, #12]
 8006a4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a4e:	fb02 f200 	mul.w	r2, r2, r0
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	440b      	add	r3, r1
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff faea 	bl	8006030 <ld_dword>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a62:	4323      	orrs	r3, r4
 8006a64:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	8992      	ldrh	r2, [r2, #12]
 8006a74:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a78:	fb02 f200 	mul.w	r2, r2, r0
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	440b      	add	r3, r1
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fb12 	bl	80060ac <st_dword>
			fs->wflag = 1;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	70da      	strb	r2, [r3, #3]
			break;
 8006a8e:	e006      	b.n	8006a9e <put_fat+0x224>
			if (res != FR_OK) break;
 8006a90:	bf00      	nop
 8006a92:	e004      	b.n	8006a9e <put_fat+0x224>
			if (res != FR_OK) break;
 8006a94:	bf00      	nop
 8006a96:	e002      	b.n	8006a9e <put_fat+0x224>
			if (res != FR_OK) break;
 8006a98:	bf00      	nop
 8006a9a:	e000      	b.n	8006a9e <put_fat+0x224>
			if (res != FR_OK) break;
 8006a9c:	bf00      	nop
		}
	}
	return res;
 8006a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3724      	adds	r7, #36	; 0x24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd90      	pop	{r4, r7, pc}

08006aa8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d904      	bls.n	8006ace <remove_chain+0x26>
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d301      	bcc.n	8006ad2 <remove_chain+0x2a>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e04b      	b.n	8006b6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00c      	beq.n	8006af2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	69b8      	ldr	r0, [r7, #24]
 8006ae0:	f7ff fecb 	bl	800687a <put_fat>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ae8:	7ffb      	ldrb	r3, [r7, #31]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <remove_chain+0x4a>
 8006aee:	7ffb      	ldrb	r3, [r7, #31]
 8006af0:	e03b      	b.n	8006b6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fdf0 	bl	80066da <get_fat>
 8006afa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d031      	beq.n	8006b66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d101      	bne.n	8006b0c <remove_chain+0x64>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e02e      	b.n	8006b6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d101      	bne.n	8006b18 <remove_chain+0x70>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e028      	b.n	8006b6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006b18:	2200      	movs	r2, #0
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	69b8      	ldr	r0, [r7, #24]
 8006b1e:	f7ff feac 	bl	800687a <put_fat>
 8006b22:	4603      	mov	r3, r0
 8006b24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006b26:	7ffb      	ldrb	r3, [r7, #31]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <remove_chain+0x88>
 8006b2c:	7ffb      	ldrb	r3, [r7, #31]
 8006b2e:	e01c      	b.n	8006b6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	3b02      	subs	r3, #2
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d20b      	bcs.n	8006b56 <remove_chain+0xae>
			fs->free_clst++;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	791b      	ldrb	r3, [r3, #4]
 8006b4c:	f043 0301 	orr.w	r3, r3, #1
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d3c6      	bcc.n	8006af2 <remove_chain+0x4a>
 8006b64:	e000      	b.n	8006b68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006b66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10d      	bne.n	8006ba4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <create_chain+0x2c>
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d31b      	bcc.n	8006bd6 <create_chain+0x64>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	e018      	b.n	8006bd6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fd97 	bl	80066da <get_fat>
 8006bac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d801      	bhi.n	8006bb8 <create_chain+0x46>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e070      	b.n	8006c9a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	d101      	bne.n	8006bc4 <create_chain+0x52>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e06a      	b.n	8006c9a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d201      	bcs.n	8006bd2 <create_chain+0x60>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	e063      	b.n	8006c9a <create_chain+0x128>
		scl = clst;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d307      	bcc.n	8006bfa <create_chain+0x88>
				ncl = 2;
 8006bea:	2302      	movs	r3, #2
 8006bec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d901      	bls.n	8006bfa <create_chain+0x88>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e04f      	b.n	8006c9a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006bfa:	69f9      	ldr	r1, [r7, #28]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff fd6c 	bl	80066da <get_fat>
 8006c02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d003      	beq.n	8006c18 <create_chain+0xa6>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c16:	d101      	bne.n	8006c1c <create_chain+0xaa>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	e03e      	b.n	8006c9a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d1da      	bne.n	8006bda <create_chain+0x68>
 8006c24:	2300      	movs	r3, #0
 8006c26:	e038      	b.n	8006c9a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006c28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2e:	69f9      	ldr	r1, [r7, #28]
 8006c30:	6938      	ldr	r0, [r7, #16]
 8006c32:	f7ff fe22 	bl	800687a <put_fat>
 8006c36:	4603      	mov	r3, r0
 8006c38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <create_chain+0xe2>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d006      	beq.n	8006c54 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6938      	ldr	r0, [r7, #16]
 8006c4c:	f7ff fe15 	bl	800687a <put_fat>
 8006c50:	4603      	mov	r3, r0
 8006c52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d116      	bne.n	8006c88 <create_chain+0x116>
		fs->last_clst = ncl;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	3b02      	subs	r3, #2
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d804      	bhi.n	8006c78 <create_chain+0x106>
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	1e5a      	subs	r2, r3, #1
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	791b      	ldrb	r3, [r3, #4]
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	711a      	strb	r2, [r3, #4]
 8006c86:	e007      	b.n	8006c98 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d102      	bne.n	8006c94 <create_chain+0x122>
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c92:	e000      	b.n	8006c96 <create_chain+0x124>
 8006c94:	2301      	movs	r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006c98:	69fb      	ldr	r3, [r7, #28]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3720      	adds	r7, #32
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b087      	sub	sp, #28
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	899b      	ldrh	r3, [r3, #12]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	8952      	ldrh	r2, [r2, #10]
 8006cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	613a      	str	r2, [r7, #16]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <clmt_clust+0x42>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e010      	b.n	8006d06 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d307      	bcc.n	8006cfc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006cfa:	e7e9      	b.n	8006cd0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006cfc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	4413      	add	r3, r2
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d28:	d204      	bcs.n	8006d34 <dir_sdi+0x22>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006d34:	2302      	movs	r3, #2
 8006d36:	e071      	b.n	8006e1c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <dir_sdi+0x46>
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d902      	bls.n	8006d58 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10c      	bne.n	8006d78 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	8912      	ldrh	r2, [r2, #8]
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d301      	bcc.n	8006d6e <dir_sdi+0x5c>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e056      	b.n	8006e1c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	61da      	str	r2, [r3, #28]
 8006d76:	e02d      	b.n	8006dd4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	895b      	ldrh	r3, [r3, #10]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	899b      	ldrh	r3, [r3, #12]
 8006d82:	fb03 f302 	mul.w	r3, r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006d88:	e019      	b.n	8006dbe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6979      	ldr	r1, [r7, #20]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff fca3 	bl	80066da <get_fat>
 8006d94:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d101      	bne.n	8006da2 <dir_sdi+0x90>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e03c      	b.n	8006e1c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d904      	bls.n	8006db2 <dir_sdi+0xa0>
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d301      	bcc.n	8006db6 <dir_sdi+0xa4>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e032      	b.n	8006e1c <dir_sdi+0x10a>
			ofs -= csz;
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d2e1      	bcs.n	8006d8a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006dc6:	6979      	ldr	r1, [r7, #20]
 8006dc8:	6938      	ldr	r0, [r7, #16]
 8006dca:	f7ff fc67 	bl	800669c <clust2sect>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <dir_sdi+0xd4>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e01a      	b.n	8006e1c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	899b      	ldrh	r3, [r3, #12]
 8006dee:	4619      	mov	r1, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006df6:	441a      	add	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	899b      	ldrh	r3, [r3, #12]
 8006e06:	461a      	mov	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e0e:	fb02 f200 	mul.w	r2, r2, r0
 8006e12:	1a9b      	subs	r3, r3, r2
 8006e14:	18ca      	adds	r2, r1, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	3320      	adds	r3, #32
 8006e3a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <dir_next+0x28>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e4a:	d301      	bcc.n	8006e50 <dir_next+0x2c>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	e0bb      	b.n	8006fc8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	899b      	ldrh	r3, [r3, #12]
 8006e54:	461a      	mov	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e5c:	fb02 f201 	mul.w	r2, r2, r1
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f040 809d 	bne.w	8006fa2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	095b      	lsrs	r3, r3, #5
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	8912      	ldrh	r2, [r2, #8]
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f0c0 808d 	bcc.w	8006fa2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	61da      	str	r2, [r3, #28]
 8006e8e:	2304      	movs	r3, #4
 8006e90:	e09a      	b.n	8006fc8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	899b      	ldrh	r3, [r3, #12]
 8006e96:	461a      	mov	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	8952      	ldrh	r2, [r2, #10]
 8006ea2:	3a01      	subs	r2, #1
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d17b      	bne.n	8006fa2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f7ff fc11 	bl	80066da <get_fat>
 8006eb8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d801      	bhi.n	8006ec4 <dir_next+0xa0>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	e081      	b.n	8006fc8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d101      	bne.n	8006ed0 <dir_next+0xac>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e07b      	b.n	8006fc8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d359      	bcc.n	8006f8e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	61da      	str	r2, [r3, #28]
 8006ee6:	2304      	movs	r3, #4
 8006ee8:	e06e      	b.n	8006fc8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	f7ff fe3d 	bl	8006b72 <create_chain>
 8006ef8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <dir_next+0xe0>
 8006f00:	2307      	movs	r3, #7
 8006f02:	e061      	b.n	8006fc8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <dir_next+0xea>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e05c      	b.n	8006fc8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d101      	bne.n	8006f1a <dir_next+0xf6>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e056      	b.n	8006fc8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff fadc 	bl	80064d8 <sync_window>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <dir_next+0x106>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e04e      	b.n	8006fc8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	899b      	ldrh	r3, [r3, #12]
 8006f34:	461a      	mov	r2, r3
 8006f36:	2100      	movs	r1, #0
 8006f38:	f7ff f905 	bl	8006146 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	6979      	ldr	r1, [r7, #20]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7ff fbaa 	bl	800669c <clust2sect>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8006f4e:	e012      	b.n	8006f76 <dir_next+0x152>
						fs->wflag = 1;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff fabe 	bl	80064d8 <sync_window>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <dir_next+0x142>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e030      	b.n	8006fc8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	635a      	str	r2, [r3, #52]	; 0x34
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	895b      	ldrh	r3, [r3, #10]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d3e6      	bcc.n	8006f50 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad2      	subs	r2, r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006f94:	6979      	ldr	r1, [r7, #20]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff fb80 	bl	800669c <clust2sect>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	899b      	ldrh	r3, [r3, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fba:	fb02 f200 	mul.w	r2, r2, r0
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	18ca      	adds	r2, r1, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff fe95 	bl	8006d12 <dir_sdi>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d12b      	bne.n	800704a <dir_alloc+0x7a>
		n = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff faaf 	bl	8006560 <move_window>
 8007002:	4603      	mov	r3, r0
 8007004:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11d      	bne.n	8007048 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2be5      	cmp	r3, #229	; 0xe5
 8007014:	d004      	beq.n	8007020 <dir_alloc+0x50>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d107      	bne.n	8007030 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3301      	adds	r3, #1
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d102      	bne.n	8007034 <dir_alloc+0x64>
 800702e:	e00c      	b.n	800704a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007030:	2300      	movs	r3, #0
 8007032:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007034:	2101      	movs	r1, #1
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff fef4 	bl	8006e24 <dir_next>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0d7      	beq.n	8006ff6 <dir_alloc+0x26>
 8007046:	e000      	b.n	800704a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007048:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	2b04      	cmp	r3, #4
 800704e:	d101      	bne.n	8007054 <dir_alloc+0x84>
 8007050:	2307      	movs	r3, #7
 8007052:	75fb      	strb	r3, [r7, #23]
	return res;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	331a      	adds	r3, #26
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe ffc7 	bl	8006000 <ld_word>
 8007072:	4603      	mov	r3, r0
 8007074:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b03      	cmp	r3, #3
 800707c:	d109      	bne.n	8007092 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	3314      	adds	r3, #20
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe ffbc 	bl	8006000 <ld_word>
 8007088:	4603      	mov	r3, r0
 800708a:	041b      	lsls	r3, r3, #16
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007092:	68fb      	ldr	r3, [r7, #12]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	331a      	adds	r3, #26
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	b292      	uxth	r2, r2
 80070b0:	4611      	mov	r1, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe ffdf 	bl	8006076 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d109      	bne.n	80070d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f103 0214 	add.w	r2, r3, #20
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0c1b      	lsrs	r3, r3, #16
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f7fe ffd1 	bl	8006076 <st_word>
	}
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80070dc:	b590      	push	{r4, r7, lr}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	331a      	adds	r3, #26
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe ff88 	bl	8006000 <ld_word>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <cmp_lfn+0x1e>
 80070f6:	2300      	movs	r3, #0
 80070f8:	e059      	b.n	80071ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	4613      	mov	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007110:	2301      	movs	r3, #1
 8007112:	81fb      	strh	r3, [r7, #14]
 8007114:	2300      	movs	r3, #0
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	e033      	b.n	8007182 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800711a:	4a27      	ldr	r2, [pc, #156]	; (80071b8 <cmp_lfn+0xdc>)
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	4413      	add	r3, r2
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	4413      	add	r3, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe ff69 	bl	8006000 <ld_word>
 800712e:	4603      	mov	r3, r0
 8007130:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01a      	beq.n	800716e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2bfe      	cmp	r3, #254	; 0xfe
 800713c:	d812      	bhi.n	8007164 <cmp_lfn+0x88>
 800713e:	89bb      	ldrh	r3, [r7, #12]
 8007140:	4618      	mov	r0, r3
 8007142:	f002 f865 	bl	8009210 <ff_wtoupper>
 8007146:	4603      	mov	r3, r0
 8007148:	461c      	mov	r4, r3
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	617a      	str	r2, [r7, #20]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f002 f859 	bl	8009210 <ff_wtoupper>
 800715e:	4603      	mov	r3, r0
 8007160:	429c      	cmp	r4, r3
 8007162:	d001      	beq.n	8007168 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007164:	2300      	movs	r3, #0
 8007166:	e022      	b.n	80071ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8007168:	89bb      	ldrh	r3, [r7, #12]
 800716a:	81fb      	strh	r3, [r7, #14]
 800716c:	e006      	b.n	800717c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800716e:	89bb      	ldrh	r3, [r7, #12]
 8007170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007174:	4293      	cmp	r3, r2
 8007176:	d001      	beq.n	800717c <cmp_lfn+0xa0>
 8007178:	2300      	movs	r3, #0
 800717a:	e018      	b.n	80071ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	3301      	adds	r3, #1
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b0c      	cmp	r3, #12
 8007186:	d9c8      	bls.n	800711a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <cmp_lfn+0xd0>
 8007194:	89fb      	ldrh	r3, [r7, #14]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d008      	beq.n	80071ac <cmp_lfn+0xd0>
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <cmp_lfn+0xd0>
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80071ac:	2301      	movs	r3, #1
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	bf00      	nop
 80071b8:	08009e04 	.word	0x08009e04

080071bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4611      	mov	r1, r2
 80071c8:	461a      	mov	r2, r3
 80071ca:	460b      	mov	r3, r1
 80071cc:	71fb      	strb	r3, [r7, #7]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	330d      	adds	r3, #13
 80071d6:	79ba      	ldrb	r2, [r7, #6]
 80071d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	330b      	adds	r3, #11
 80071de:	220f      	movs	r2, #15
 80071e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	330c      	adds	r3, #12
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	331a      	adds	r3, #26
 80071ee:	2100      	movs	r1, #0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fe ff40 	bl	8006076 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	1e5a      	subs	r2, r3, #1
 80071fa:	4613      	mov	r3, r2
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	82fb      	strh	r3, [r7, #22]
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007214:	4293      	cmp	r3, r2
 8007216:	d007      	beq.n	8007228 <put_lfn+0x6c>
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	61fa      	str	r2, [r7, #28]
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007228:	4a17      	ldr	r2, [pc, #92]	; (8007288 <put_lfn+0xcc>)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	4413      	add	r3, r2
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4413      	add	r3, r2
 8007236:	8afa      	ldrh	r2, [r7, #22]
 8007238:	4611      	mov	r1, r2
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe ff1b 	bl	8006076 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007240:	8afb      	ldrh	r3, [r7, #22]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d102      	bne.n	800724c <put_lfn+0x90>
 8007246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800724a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	3301      	adds	r3, #1
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	2b0c      	cmp	r3, #12
 8007256:	d9da      	bls.n	800720e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007258:	8afb      	ldrh	r3, [r7, #22]
 800725a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800725e:	4293      	cmp	r3, r2
 8007260:	d006      	beq.n	8007270 <put_lfn+0xb4>
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d103      	bne.n	8007278 <put_lfn+0xbc>
 8007270:	79fb      	ldrb	r3, [r7, #7]
 8007272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007276:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	79fa      	ldrb	r2, [r7, #7]
 800727c:	701a      	strb	r2, [r3, #0]
}
 800727e:	bf00      	nop
 8007280:	3720      	adds	r7, #32
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	08009e04 	.word	0x08009e04

0800728c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08c      	sub	sp, #48	; 0x30
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800729a:	220b      	movs	r2, #11
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f7fe ff30 	bl	8006104 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d92b      	bls.n	8007302 <gen_numname+0x76>
		sr = seq;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80072ae:	e022      	b.n	80072f6 <gen_numname+0x6a>
			wc = *lfn++;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	1c9a      	adds	r2, r3, #2
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80072ba:	2300      	movs	r3, #0
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072be:	e017      	b.n	80072f0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	005a      	lsls	r2, r3, #1
 80072c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	4413      	add	r3, r2
 80072cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80072ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072d0:	085b      	lsrs	r3, r3, #1
 80072d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d005      	beq.n	80072ea <gen_numname+0x5e>
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80072e4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80072e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	3301      	adds	r3, #1
 80072ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	2b0f      	cmp	r3, #15
 80072f4:	d9e4      	bls.n	80072c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1d8      	bne.n	80072b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007302:	2307      	movs	r3, #7
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	b2db      	uxtb	r3, r3
 8007310:	3330      	adds	r3, #48	; 0x30
 8007312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800731a:	2b39      	cmp	r3, #57	; 0x39
 800731c:	d904      	bls.n	8007328 <gen_numname+0x9c>
 800731e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007322:	3307      	adds	r3, #7
 8007324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	1e5a      	subs	r2, r3, #1
 800732c:	62ba      	str	r2, [r7, #40]	; 0x28
 800732e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007332:	4413      	add	r3, r2
 8007334:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007338:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	091b      	lsrs	r3, r3, #4
 8007340:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1de      	bne.n	8007306 <gen_numname+0x7a>
	ns[i] = '~';
 8007348:	f107 0214 	add.w	r2, r7, #20
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	4413      	add	r3, r2
 8007350:	227e      	movs	r2, #126	; 0x7e
 8007352:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007354:	2300      	movs	r3, #0
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
 8007358:	e002      	b.n	8007360 <gen_numname+0xd4>
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	3301      	adds	r3, #1
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
 8007360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	429a      	cmp	r2, r3
 8007366:	d205      	bcs.n	8007374 <gen_numname+0xe8>
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	4413      	add	r3, r2
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b20      	cmp	r3, #32
 8007372:	d1f2      	bne.n	800735a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	2b07      	cmp	r3, #7
 8007378:	d808      	bhi.n	800738c <gen_numname+0x100>
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007380:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007384:	4413      	add	r3, r2
 8007386:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800738a:	e000      	b.n	800738e <gen_numname+0x102>
 800738c:	2120      	movs	r1, #32
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	627a      	str	r2, [r7, #36]	; 0x24
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	460a      	mov	r2, r1
 800739a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	2b07      	cmp	r3, #7
 80073a0:	d9e8      	bls.n	8007374 <gen_numname+0xe8>
}
 80073a2:	bf00      	nop
 80073a4:	3730      	adds	r7, #48	; 0x30
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80073b6:	230b      	movs	r3, #11
 80073b8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	0852      	lsrs	r2, r2, #1
 80073c0:	01db      	lsls	r3, r3, #7
 80073c2:	4313      	orrs	r3, r2
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	1c59      	adds	r1, r3, #1
 80073ca:	6079      	str	r1, [r7, #4]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	4413      	add	r3, r2
 80073d0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	60bb      	str	r3, [r7, #8]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1ed      	bne.n	80073ba <sum_sfn+0x10>
	return sum;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80073fa:	2100      	movs	r1, #0
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fc88 	bl	8006d12 <dir_sdi>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <dir_find+0x24>
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	e0a9      	b.n	8007564 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007410:	23ff      	movs	r3, #255	; 0xff
 8007412:	753b      	strb	r3, [r7, #20]
 8007414:	7d3b      	ldrb	r3, [r7, #20]
 8007416:	757b      	strb	r3, [r7, #21]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f04f 32ff 	mov.w	r2, #4294967295
 800741e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	4619      	mov	r1, r3
 8007426:	6938      	ldr	r0, [r7, #16]
 8007428:	f7ff f89a 	bl	8006560 <move_window>
 800742c:	4603      	mov	r3, r0
 800742e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 8090 	bne.w	8007558 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007440:	7dbb      	ldrb	r3, [r7, #22]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <dir_find+0x60>
 8007446:	2304      	movs	r3, #4
 8007448:	75fb      	strb	r3, [r7, #23]
 800744a:	e08a      	b.n	8007562 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	330b      	adds	r3, #11
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	7bfa      	ldrb	r2, [r7, #15]
 800745e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007460:	7dbb      	ldrb	r3, [r7, #22]
 8007462:	2be5      	cmp	r3, #229	; 0xe5
 8007464:	d007      	beq.n	8007476 <dir_find+0x8a>
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <dir_find+0x98>
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	2b0f      	cmp	r3, #15
 8007474:	d006      	beq.n	8007484 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007476:	23ff      	movs	r3, #255	; 0xff
 8007478:	757b      	strb	r3, [r7, #21]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
 8007482:	e05e      	b.n	8007542 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d136      	bne.n	80074f8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d154      	bne.n	8007542 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007498:	7dbb      	ldrb	r3, [r7, #22]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00d      	beq.n	80074be <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	7b5b      	ldrb	r3, [r3, #13]
 80074a8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80074aa:	7dbb      	ldrb	r3, [r7, #22]
 80074ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b0:	75bb      	strb	r3, [r7, #22]
 80074b2:	7dbb      	ldrb	r3, [r7, #22]
 80074b4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	695a      	ldr	r2, [r3, #20]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80074be:	7dba      	ldrb	r2, [r7, #22]
 80074c0:	7d7b      	ldrb	r3, [r7, #21]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d115      	bne.n	80074f2 <dir_find+0x106>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	330d      	adds	r3, #13
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	7d3a      	ldrb	r2, [r7, #20]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d10e      	bne.n	80074f2 <dir_find+0x106>
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	691a      	ldr	r2, [r3, #16]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7ff fdfc 	bl	80070dc <cmp_lfn>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <dir_find+0x106>
 80074ea:	7d7b      	ldrb	r3, [r7, #21]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	e000      	b.n	80074f4 <dir_find+0x108>
 80074f2:	23ff      	movs	r3, #255	; 0xff
 80074f4:	757b      	strb	r3, [r7, #21]
 80074f6:	e024      	b.n	8007542 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80074f8:	7d7b      	ldrb	r3, [r7, #21]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <dir_find+0x126>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff ff51 	bl	80073aa <sum_sfn>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	7d3b      	ldrb	r3, [r7, #20]
 800750e:	4293      	cmp	r3, r2
 8007510:	d024      	beq.n	800755c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <dir_find+0x14a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a18      	ldr	r0, [r3, #32]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3324      	adds	r3, #36	; 0x24
 8007528:	220b      	movs	r2, #11
 800752a:	4619      	mov	r1, r3
 800752c:	f7fe fe25 	bl	800617a <mem_cmp>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d014      	beq.n	8007560 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007536:	23ff      	movs	r3, #255	; 0xff
 8007538:	757b      	strb	r3, [r7, #21]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f04f 32ff 	mov.w	r2, #4294967295
 8007540:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007542:	2100      	movs	r1, #0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fc6d 	bl	8006e24 <dir_next>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f43f af65 	beq.w	8007420 <dir_find+0x34>
 8007556:	e004      	b.n	8007562 <dir_find+0x176>
		if (res != FR_OK) break;
 8007558:	bf00      	nop
 800755a:	e002      	b.n	8007562 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800755c:	bf00      	nop
 800755e:	e000      	b.n	8007562 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007560:	bf00      	nop

	return res;
 8007562:	7dfb      	ldrb	r3, [r7, #23]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	; 0x30
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007580:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <dir_register+0x20>
 8007588:	2306      	movs	r3, #6
 800758a:	e0e0      	b.n	800774e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800758c:	2300      	movs	r3, #0
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
 8007590:	e002      	b.n	8007598 <dir_register+0x2c>
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	3301      	adds	r3, #1
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1f4      	bne.n	8007592 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	220c      	movs	r2, #12
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fda5 	bl	8006104 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d032      	beq.n	800762a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2240      	movs	r2, #64	; 0x40
 80075c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80075cc:	2301      	movs	r3, #1
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d0:	e016      	b.n	8007600 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	f107 010c 	add.w	r1, r7, #12
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	f7ff fe53 	bl	800728c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff ff00 	bl	80073ec <dir_find>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80075f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	3301      	adds	r3, #1
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	2b63      	cmp	r3, #99	; 0x63
 8007604:	d9e5      	bls.n	80075d2 <dir_register+0x66>
 8007606:	e000      	b.n	800760a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007608:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	2b64      	cmp	r3, #100	; 0x64
 800760e:	d101      	bne.n	8007614 <dir_register+0xa8>
 8007610:	2307      	movs	r3, #7
 8007612:	e09c      	b.n	800774e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007618:	2b04      	cmp	r3, #4
 800761a:	d002      	beq.n	8007622 <dir_register+0xb6>
 800761c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007620:	e095      	b.n	800774e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007622:	7dfa      	ldrb	r2, [r7, #23]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <dir_register+0xd8>
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	330c      	adds	r3, #12
 8007638:	4a47      	ldr	r2, [pc, #284]	; (8007758 <dir_register+0x1ec>)
 800763a:	fba2 2303 	umull	r2, r3, r2, r3
 800763e:	089b      	lsrs	r3, r3, #2
 8007640:	3301      	adds	r3, #1
 8007642:	e000      	b.n	8007646 <dir_register+0xda>
 8007644:	2301      	movs	r3, #1
 8007646:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007648:	6a39      	ldr	r1, [r7, #32]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7ff fcc0 	bl	8006fd0 <dir_alloc>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800765a:	2b00      	cmp	r3, #0
 800765c:	d148      	bne.n	80076f0 <dir_register+0x184>
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	3b01      	subs	r3, #1
 8007662:	623b      	str	r3, [r7, #32]
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d042      	beq.n	80076f0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695a      	ldr	r2, [r3, #20]
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	015b      	lsls	r3, r3, #5
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff fb4b 	bl	8006d12 <dir_sdi>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007686:	2b00      	cmp	r3, #0
 8007688:	d132      	bne.n	80076f0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3324      	adds	r3, #36	; 0x24
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff fe8b 	bl	80073aa <sum_sfn>
 8007694:	4603      	mov	r3, r0
 8007696:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	4619      	mov	r1, r3
 800769e:	69f8      	ldr	r0, [r7, #28]
 80076a0:	f7fe ff5e 	bl	8006560 <move_window>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80076aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11d      	bne.n	80076ee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	6918      	ldr	r0, [r3, #16]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a19      	ldr	r1, [r3, #32]
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	7efb      	ldrb	r3, [r7, #27]
 80076c0:	f7ff fd7c 	bl	80071bc <put_lfn>
				fs->wflag = 1;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	2201      	movs	r2, #1
 80076c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80076ca:	2100      	movs	r1, #0
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff fba9 	bl	8006e24 <dir_next>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80076d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d107      	bne.n	80076f0 <dir_register+0x184>
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	623b      	str	r3, [r7, #32]
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1d5      	bne.n	8007698 <dir_register+0x12c>
 80076ec:	e000      	b.n	80076f0 <dir_register+0x184>
				if (res != FR_OK) break;
 80076ee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80076f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d128      	bne.n	800774a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	4619      	mov	r1, r3
 80076fe:	69f8      	ldr	r0, [r7, #28]
 8007700:	f7fe ff2e 	bl	8006560 <move_window>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800770a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800770e:	2b00      	cmp	r3, #0
 8007710:	d11b      	bne.n	800774a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	2220      	movs	r2, #32
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fd13 	bl	8006146 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a18      	ldr	r0, [r3, #32]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3324      	adds	r3, #36	; 0x24
 8007728:	220b      	movs	r2, #11
 800772a:	4619      	mov	r1, r3
 800772c:	f7fe fcea 	bl	8006104 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	330c      	adds	r3, #12
 800773c:	f002 0218 	and.w	r2, r2, #24
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	2201      	movs	r2, #1
 8007748:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800774a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800774e:	4618      	mov	r0, r3
 8007750:	3730      	adds	r7, #48	; 0x30
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	4ec4ec4f 	.word	0x4ec4ec4f

0800775c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08a      	sub	sp, #40	; 0x28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	61ba      	str	r2, [r7, #24]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4413      	add	r3, r2
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800778a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800778c:	2b1f      	cmp	r3, #31
 800778e:	d940      	bls.n	8007812 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007792:	2b2f      	cmp	r3, #47	; 0x2f
 8007794:	d006      	beq.n	80077a4 <create_name+0x48>
 8007796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007798:	2b5c      	cmp	r3, #92	; 0x5c
 800779a:	d110      	bne.n	80077be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800779c:	e002      	b.n	80077a4 <create_name+0x48>
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	3301      	adds	r3, #1
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	4413      	add	r3, r2
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b2f      	cmp	r3, #47	; 0x2f
 80077ae:	d0f6      	beq.n	800779e <create_name+0x42>
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	4413      	add	r3, r2
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b5c      	cmp	r3, #92	; 0x5c
 80077ba:	d0f0      	beq.n	800779e <create_name+0x42>
			break;
 80077bc:	e02a      	b.n	8007814 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2bfe      	cmp	r3, #254	; 0xfe
 80077c2:	d901      	bls.n	80077c8 <create_name+0x6c>
 80077c4:	2306      	movs	r3, #6
 80077c6:	e177      	b.n	8007ab8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80077c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80077ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d0:	2101      	movs	r1, #1
 80077d2:	4618      	mov	r0, r3
 80077d4:	f001 fce0 	bl	8009198 <ff_convert>
 80077d8:	4603      	mov	r3, r0
 80077da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80077dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <create_name+0x8a>
 80077e2:	2306      	movs	r3, #6
 80077e4:	e168      	b.n	8007ab8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80077e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077e8:	2b7f      	cmp	r3, #127	; 0x7f
 80077ea:	d809      	bhi.n	8007800 <create_name+0xa4>
 80077ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ee:	4619      	mov	r1, r3
 80077f0:	48b3      	ldr	r0, [pc, #716]	; (8007ac0 <create_name+0x364>)
 80077f2:	f7fe fce9 	bl	80061c8 <chk_chr>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <create_name+0xa4>
 80077fc:	2306      	movs	r3, #6
 80077fe:	e15b      	b.n	8007ab8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	617a      	str	r2, [r7, #20]
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800780e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007810:	e7b4      	b.n	800777c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007812:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	441a      	add	r2, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800781e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007820:	2b1f      	cmp	r3, #31
 8007822:	d801      	bhi.n	8007828 <create_name+0xcc>
 8007824:	2304      	movs	r3, #4
 8007826:	e000      	b.n	800782a <create_name+0xce>
 8007828:	2300      	movs	r3, #0
 800782a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800782e:	e011      	b.n	8007854 <create_name+0xf8>
		w = lfn[di - 1];
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007836:	3b01      	subs	r3, #1
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4413      	add	r3, r2
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007844:	2b20      	cmp	r3, #32
 8007846:	d002      	beq.n	800784e <create_name+0xf2>
 8007848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800784a:	2b2e      	cmp	r3, #46	; 0x2e
 800784c:	d106      	bne.n	800785c <create_name+0x100>
		di--;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	3b01      	subs	r3, #1
 8007852:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1ea      	bne.n	8007830 <create_name+0xd4>
 800785a:	e000      	b.n	800785e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800785c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <create_name+0x118>
 8007870:	2306      	movs	r3, #6
 8007872:	e121      	b.n	8007ab8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3324      	adds	r3, #36	; 0x24
 8007878:	220b      	movs	r2, #11
 800787a:	2120      	movs	r1, #32
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fc62 	bl	8006146 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007882:	2300      	movs	r3, #0
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	e002      	b.n	800788e <create_name+0x132>
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	3301      	adds	r3, #1
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	2b20      	cmp	r3, #32
 800789a:	d0f5      	beq.n	8007888 <create_name+0x12c>
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	2b2e      	cmp	r3, #46	; 0x2e
 80078a8:	d0ee      	beq.n	8007888 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <create_name+0x168>
 80078b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b4:	f043 0303 	orr.w	r3, r3, #3
 80078b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80078bc:	e002      	b.n	80078c4 <create_name+0x168>
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <create_name+0x182>
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078d0:	3b01      	subs	r3, #1
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	2b2e      	cmp	r3, #46	; 0x2e
 80078dc:	d1ef      	bne.n	80078be <create_name+0x162>

	i = b = 0; ni = 8;
 80078de:	2300      	movs	r3, #0
 80078e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80078e4:	2300      	movs	r3, #0
 80078e6:	623b      	str	r3, [r7, #32]
 80078e8:	2308      	movs	r3, #8
 80078ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	61ba      	str	r2, [r7, #24]
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80078fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 8090 	beq.w	8007a24 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007906:	2b20      	cmp	r3, #32
 8007908:	d006      	beq.n	8007918 <create_name+0x1bc>
 800790a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800790c:	2b2e      	cmp	r3, #46	; 0x2e
 800790e:	d10a      	bne.n	8007926 <create_name+0x1ca>
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	429a      	cmp	r2, r3
 8007916:	d006      	beq.n	8007926 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800791c:	f043 0303 	orr.w	r3, r3, #3
 8007920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007924:	e07d      	b.n	8007a22 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007926:	6a3a      	ldr	r2, [r7, #32]
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	429a      	cmp	r2, r3
 800792c:	d203      	bcs.n	8007936 <create_name+0x1da>
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	429a      	cmp	r2, r3
 8007934:	d123      	bne.n	800797e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	2b0b      	cmp	r3, #11
 800793a:	d106      	bne.n	800794a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800793c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007940:	f043 0303 	orr.w	r3, r3, #3
 8007944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007948:	e06f      	b.n	8007a2a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	429a      	cmp	r2, r3
 8007950:	d005      	beq.n	800795e <create_name+0x202>
 8007952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007956:	f043 0303 	orr.w	r3, r3, #3
 800795a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	429a      	cmp	r2, r3
 8007964:	d860      	bhi.n	8007a28 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	61bb      	str	r3, [r7, #24]
 800796a:	2308      	movs	r3, #8
 800796c:	623b      	str	r3, [r7, #32]
 800796e:	230b      	movs	r3, #11
 8007970:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007972:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800797c:	e051      	b.n	8007a22 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800797e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007980:	2b7f      	cmp	r3, #127	; 0x7f
 8007982:	d914      	bls.n	80079ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007986:	2100      	movs	r1, #0
 8007988:	4618      	mov	r0, r3
 800798a:	f001 fc05 	bl	8009198 <ff_convert>
 800798e:	4603      	mov	r3, r0
 8007990:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <create_name+0x246>
 8007998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800799a:	3b80      	subs	r3, #128	; 0x80
 800799c:	4a49      	ldr	r2, [pc, #292]	; (8007ac4 <create_name+0x368>)
 800799e:	5cd3      	ldrb	r3, [r2, r3]
 80079a0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80079a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079a6:	f043 0302 	orr.w	r3, r3, #2
 80079aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80079ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d007      	beq.n	80079c4 <create_name+0x268>
 80079b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b6:	4619      	mov	r1, r3
 80079b8:	4843      	ldr	r0, [pc, #268]	; (8007ac8 <create_name+0x36c>)
 80079ba:	f7fe fc05 	bl	80061c8 <chk_chr>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80079c4:	235f      	movs	r3, #95	; 0x5f
 80079c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079cc:	f043 0303 	orr.w	r3, r3, #3
 80079d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079d4:	e01b      	b.n	8007a0e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80079d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d8:	2b40      	cmp	r3, #64	; 0x40
 80079da:	d909      	bls.n	80079f0 <create_name+0x294>
 80079dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079de:	2b5a      	cmp	r3, #90	; 0x5a
 80079e0:	d806      	bhi.n	80079f0 <create_name+0x294>
					b |= 2;
 80079e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079e6:	f043 0302 	orr.w	r3, r3, #2
 80079ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80079ee:	e00e      	b.n	8007a0e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80079f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f2:	2b60      	cmp	r3, #96	; 0x60
 80079f4:	d90b      	bls.n	8007a0e <create_name+0x2b2>
 80079f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f8:	2b7a      	cmp	r3, #122	; 0x7a
 80079fa:	d808      	bhi.n	8007a0e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80079fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a0a:	3b20      	subs	r3, #32
 8007a0c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	623a      	str	r2, [r7, #32]
 8007a14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a16:	b2d1      	uxtb	r1, r2
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007a22:	e763      	b.n	80078ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007a24:	bf00      	nop
 8007a26:	e000      	b.n	8007a2a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007a28:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a30:	2be5      	cmp	r3, #229	; 0xe5
 8007a32:	d103      	bne.n	8007a3c <create_name+0x2e0>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2205      	movs	r2, #5
 8007a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d104      	bne.n	8007a4c <create_name+0x2f0>
 8007a42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007a4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a50:	f003 030c 	and.w	r3, r3, #12
 8007a54:	2b0c      	cmp	r3, #12
 8007a56:	d005      	beq.n	8007a64 <create_name+0x308>
 8007a58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d105      	bne.n	8007a70 <create_name+0x314>
 8007a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a68:	f043 0302 	orr.w	r3, r3, #2
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d117      	bne.n	8007aac <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d105      	bne.n	8007a94 <create_name+0x338>
 8007a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a8c:	f043 0310 	orr.w	r3, r3, #16
 8007a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a98:	f003 030c 	and.w	r3, r3, #12
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d105      	bne.n	8007aac <create_name+0x350>
 8007aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa4:	f043 0308 	orr.w	r3, r3, #8
 8007aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ab2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007ab6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3728      	adds	r7, #40	; 0x28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	08009cf4 	.word	0x08009cf4
 8007ac4:	08009d84 	.word	0x08009d84
 8007ac8:	08009d00 	.word	0x08009d00

08007acc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ae0:	e002      	b.n	8007ae8 <follow_path+0x1c>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b2f      	cmp	r3, #47	; 0x2f
 8007aee:	d0f8      	beq.n	8007ae2 <follow_path+0x16>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b5c      	cmp	r3, #92	; 0x5c
 8007af6:	d0f4      	beq.n	8007ae2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2200      	movs	r2, #0
 8007afc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b1f      	cmp	r3, #31
 8007b04:	d80a      	bhi.n	8007b1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2280      	movs	r2, #128	; 0x80
 8007b0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007b0e:	2100      	movs	r1, #0
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff f8fe 	bl	8006d12 <dir_sdi>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]
 8007b1a:	e048      	b.n	8007bae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b1c:	463b      	mov	r3, r7
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff fe1b 	bl	800775c <create_name>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d139      	bne.n	8007ba4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fc5b 	bl	80073ec <dir_find>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d12c      	bne.n	8007ba8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b4e:	7afb      	ldrb	r3, [r7, #11]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d127      	bne.n	8007ba8 <follow_path+0xdc>
 8007b58:	2305      	movs	r3, #5
 8007b5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007b5c:	e024      	b.n	8007ba8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d121      	bne.n	8007bac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	799b      	ldrb	r3, [r3, #6]
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007b74:	2305      	movs	r3, #5
 8007b76:	75fb      	strb	r3, [r7, #23]
 8007b78:	e019      	b.n	8007bae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	8992      	ldrh	r2, [r2, #12]
 8007b88:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b8c:	fb02 f200 	mul.w	r2, r2, r0
 8007b90:	1a9b      	subs	r3, r3, r2
 8007b92:	440b      	add	r3, r1
 8007b94:	4619      	mov	r1, r3
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fa61 	bl	800705e <ld_clust>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ba2:	e7bb      	b.n	8007b1c <follow_path+0x50>
			if (res != FR_OK) break;
 8007ba4:	bf00      	nop
 8007ba6:	e002      	b.n	8007bae <follow_path+0xe2>
				break;
 8007ba8:	bf00      	nop
 8007baa:	e000      	b.n	8007bae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bac:	bf00      	nop
			}
		}
	}

	return res;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d031      	beq.n	8007c32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	e002      	b.n	8007bdc <get_ldnumber+0x24>
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b1f      	cmp	r3, #31
 8007be2:	d903      	bls.n	8007bec <get_ldnumber+0x34>
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	2b3a      	cmp	r3, #58	; 0x3a
 8007bea:	d1f4      	bne.n	8007bd6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b3a      	cmp	r3, #58	; 0x3a
 8007bf2:	d11c      	bne.n	8007c2e <get_ldnumber+0x76>
			tp = *path;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	60fa      	str	r2, [r7, #12]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	3b30      	subs	r3, #48	; 0x30
 8007c04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b09      	cmp	r3, #9
 8007c0a:	d80e      	bhi.n	8007c2a <get_ldnumber+0x72>
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d10a      	bne.n	8007c2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d107      	bne.n	8007c2a <get_ldnumber+0x72>
					vol = (int)i;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	3301      	adds	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	e002      	b.n	8007c34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007c32:	693b      	ldr	r3, [r7, #16]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	70da      	strb	r2, [r3, #3]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fe fc80 	bl	8006560 <move_window>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <check_fs+0x2a>
 8007c66:	2304      	movs	r3, #4
 8007c68:	e038      	b.n	8007cdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3338      	adds	r3, #56	; 0x38
 8007c6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe f9c4 	bl	8006000 <ld_word>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d001      	beq.n	8007c88 <check_fs+0x48>
 8007c84:	2303      	movs	r3, #3
 8007c86:	e029      	b.n	8007cdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c8e:	2be9      	cmp	r3, #233	; 0xe9
 8007c90:	d009      	beq.n	8007ca6 <check_fs+0x66>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c98:	2beb      	cmp	r3, #235	; 0xeb
 8007c9a:	d11e      	bne.n	8007cda <check_fs+0x9a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ca2:	2b90      	cmp	r3, #144	; 0x90
 8007ca4:	d119      	bne.n	8007cda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3338      	adds	r3, #56	; 0x38
 8007caa:	3336      	adds	r3, #54	; 0x36
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe f9bf 	bl	8006030 <ld_dword>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007cb8:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <check_fs+0xa4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d101      	bne.n	8007cc2 <check_fs+0x82>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e00c      	b.n	8007cdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3338      	adds	r3, #56	; 0x38
 8007cc6:	3352      	adds	r3, #82	; 0x52
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe f9b1 	bl	8006030 <ld_dword>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <check_fs+0xa8>)
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d101      	bne.n	8007cda <check_fs+0x9a>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e000      	b.n	8007cdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007cda:	2302      	movs	r3, #2
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	00544146 	.word	0x00544146
 8007ce8:	33544146 	.word	0x33544146

08007cec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b096      	sub	sp, #88	; 0x58
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff ff59 	bl	8007bb8 <get_ldnumber>
 8007d06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	da01      	bge.n	8007d12 <find_volume+0x26>
 8007d0e:	230b      	movs	r3, #11
 8007d10:	e268      	b.n	80081e4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007d12:	4ab0      	ldr	r2, [pc, #704]	; (8007fd4 <find_volume+0x2e8>)
 8007d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <find_volume+0x3a>
 8007d22:	230c      	movs	r3, #12
 8007d24:	e25e      	b.n	80081e4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	f023 0301 	bic.w	r3, r3, #1
 8007d32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01a      	beq.n	8007d72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe f8bf 	bl	8005ec4 <disk_status>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10c      	bne.n	8007d72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <find_volume+0x82>
 8007d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d62:	f003 0304 	and.w	r3, r3, #4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007d6a:	230a      	movs	r3, #10
 8007d6c:	e23a      	b.n	80081e4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e238      	b.n	80081e4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe f8b7 	bl	8005ef8 <disk_initialize>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e221      	b.n	80081e4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d007      	beq.n	8007db6 <find_volume+0xca>
 8007da6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007db2:	230a      	movs	r3, #10
 8007db4:	e216      	b.n	80081e4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	7858      	ldrb	r0, [r3, #1]
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	2102      	movs	r1, #2
 8007dc2:	f7fe f8ff 	bl	8005fc4 <disk_ioctl>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <find_volume+0xe4>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e209      	b.n	80081e4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	899b      	ldrh	r3, [r3, #12]
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd8:	d80d      	bhi.n	8007df6 <find_volume+0x10a>
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	899b      	ldrh	r3, [r3, #12]
 8007dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de2:	d308      	bcc.n	8007df6 <find_volume+0x10a>
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	899b      	ldrh	r3, [r3, #12]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	899b      	ldrh	r3, [r3, #12]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <find_volume+0x10e>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e1f4      	b.n	80081e4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e02:	f7ff ff1d 	bl	8007c40 <check_fs>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d14b      	bne.n	8007eac <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e14:	2300      	movs	r3, #0
 8007e16:	643b      	str	r3, [r7, #64]	; 0x40
 8007e18:	e01f      	b.n	8007e5a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e28:	4413      	add	r3, r2
 8007e2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	3304      	adds	r3, #4
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d006      	beq.n	8007e44 <find_volume+0x158>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	3308      	adds	r3, #8
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe f8f8 	bl	8006030 <ld_dword>
 8007e40:	4602      	mov	r2, r0
 8007e42:	e000      	b.n	8007e46 <find_volume+0x15a>
 8007e44:	2200      	movs	r2, #0
 8007e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007e4e:	440b      	add	r3, r1
 8007e50:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e56:	3301      	adds	r3, #1
 8007e58:	643b      	str	r3, [r7, #64]	; 0x40
 8007e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d9dc      	bls.n	8007e1a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007e60:	2300      	movs	r3, #0
 8007e62:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <find_volume+0x184>
 8007e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e78:	4413      	add	r3, r2
 8007e7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <find_volume+0x1a6>
 8007e86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e8a:	f7ff fed9 	bl	8007c40 <check_fs>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	e000      	b.n	8007e94 <find_volume+0x1a8>
 8007e92:	2303      	movs	r3, #3
 8007e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d905      	bls.n	8007eac <find_volume+0x1c0>
 8007ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d9e1      	bls.n	8007e70 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007eac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d101      	bne.n	8007eb8 <find_volume+0x1cc>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e195      	b.n	80081e4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d901      	bls.n	8007ec4 <find_volume+0x1d8>
 8007ec0:	230d      	movs	r3, #13
 8007ec2:	e18f      	b.n	80081e4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	3338      	adds	r3, #56	; 0x38
 8007ec8:	330b      	adds	r3, #11
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe f898 	bl	8006000 <ld_word>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	899b      	ldrh	r3, [r3, #12]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d001      	beq.n	8007ee0 <find_volume+0x1f4>
 8007edc:	230d      	movs	r3, #13
 8007ede:	e181      	b.n	80081e4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	3338      	adds	r3, #56	; 0x38
 8007ee4:	3316      	adds	r3, #22
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe f88a 	bl	8006000 <ld_word>
 8007eec:	4603      	mov	r3, r0
 8007eee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <find_volume+0x218>
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	3338      	adds	r3, #56	; 0x38
 8007efa:	3324      	adds	r3, #36	; 0x24
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe f897 	bl	8006030 <ld_dword>
 8007f02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f08:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	789b      	ldrb	r3, [r3, #2]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d005      	beq.n	8007f28 <find_volume+0x23c>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	789b      	ldrb	r3, [r3, #2]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d001      	beq.n	8007f28 <find_volume+0x23c>
 8007f24:	230d      	movs	r3, #13
 8007f26:	e15d      	b.n	80081e4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	789b      	ldrb	r3, [r3, #2]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f30:	fb02 f303 	mul.w	r3, r2, r3
 8007f34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	895b      	ldrh	r3, [r3, #10]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <find_volume+0x270>
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	895b      	ldrh	r3, [r3, #10]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	895b      	ldrh	r3, [r3, #10]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	4013      	ands	r3, r2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <find_volume+0x274>
 8007f5c:	230d      	movs	r3, #13
 8007f5e:	e141      	b.n	80081e4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	3338      	adds	r3, #56	; 0x38
 8007f64:	3311      	adds	r3, #17
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe f84a 	bl	8006000 <ld_word>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	461a      	mov	r2, r3
 8007f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	891b      	ldrh	r3, [r3, #8]
 8007f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f7a:	8992      	ldrh	r2, [r2, #12]
 8007f7c:	0952      	lsrs	r2, r2, #5
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f84:	fb02 f201 	mul.w	r2, r2, r1
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <find_volume+0x2a8>
 8007f90:	230d      	movs	r3, #13
 8007f92:	e127      	b.n	80081e4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	3338      	adds	r3, #56	; 0x38
 8007f98:	3313      	adds	r3, #19
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe f830 	bl	8006000 <ld_word>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d106      	bne.n	8007fb8 <find_volume+0x2cc>
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	3338      	adds	r3, #56	; 0x38
 8007fae:	3320      	adds	r3, #32
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe f83d 	bl	8006030 <ld_dword>
 8007fb6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	3338      	adds	r3, #56	; 0x38
 8007fbc:	330e      	adds	r3, #14
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe f81e 	bl	8006000 <ld_word>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007fc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <find_volume+0x2ec>
 8007fce:	230d      	movs	r3, #13
 8007fd0:	e108      	b.n	80081e4 <find_volume+0x4f8>
 8007fd2:	bf00      	nop
 8007fd4:	200000d0 	.word	0x200000d0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007fd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fdc:	4413      	add	r3, r2
 8007fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fe0:	8911      	ldrh	r1, [r2, #8]
 8007fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fe4:	8992      	ldrh	r2, [r2, #12]
 8007fe6:	0952      	lsrs	r2, r2, #5
 8007fe8:	b292      	uxth	r2, r2
 8007fea:	fbb1 f2f2 	udiv	r2, r1, r2
 8007fee:	b292      	uxth	r2, r2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d201      	bcs.n	8008000 <find_volume+0x314>
 8007ffc:	230d      	movs	r3, #13
 8007ffe:	e0f1      	b.n	80081e4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008008:	8952      	ldrh	r2, [r2, #10]
 800800a:	fbb3 f3f2 	udiv	r3, r3, r2
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <find_volume+0x32e>
 8008016:	230d      	movs	r3, #13
 8008018:	e0e4      	b.n	80081e4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800801a:	2303      	movs	r3, #3
 800801c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008026:	4293      	cmp	r3, r2
 8008028:	d802      	bhi.n	8008030 <find_volume+0x344>
 800802a:	2302      	movs	r3, #2
 800802c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008036:	4293      	cmp	r3, r2
 8008038:	d802      	bhi.n	8008040 <find_volume+0x354>
 800803a:	2301      	movs	r3, #1
 800803c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	1c9a      	adds	r2, r3, #2
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800804c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800804e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008052:	441a      	add	r2, r3
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008058:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	441a      	add	r2, r3
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008062:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008066:	2b03      	cmp	r3, #3
 8008068:	d11e      	bne.n	80080a8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	3338      	adds	r3, #56	; 0x38
 800806e:	332a      	adds	r3, #42	; 0x2a
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd ffc5 	bl	8006000 <ld_word>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <find_volume+0x394>
 800807c:	230d      	movs	r3, #13
 800807e:	e0b1      	b.n	80081e4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	891b      	ldrh	r3, [r3, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <find_volume+0x3a0>
 8008088:	230d      	movs	r3, #13
 800808a:	e0ab      	b.n	80081e4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	3338      	adds	r3, #56	; 0x38
 8008090:	332c      	adds	r3, #44	; 0x2c
 8008092:	4618      	mov	r0, r3
 8008094:	f7fd ffcc 	bl	8006030 <ld_dword>
 8008098:	4602      	mov	r2, r0
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800809e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	647b      	str	r3, [r7, #68]	; 0x44
 80080a6:	e01f      	b.n	80080e8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	891b      	ldrh	r3, [r3, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <find_volume+0x3c8>
 80080b0:	230d      	movs	r3, #13
 80080b2:	e097      	b.n	80081e4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ba:	441a      	add	r2, r3
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80080c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d103      	bne.n	80080d0 <find_volume+0x3e4>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	e00a      	b.n	80080e6 <find_volume+0x3fa>
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	69da      	ldr	r2, [r3, #28]
 80080d4:	4613      	mov	r3, r2
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	4413      	add	r3, r2
 80080da:	085a      	lsrs	r2, r3, #1
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80080e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	6a1a      	ldr	r2, [r3, #32]
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	899b      	ldrh	r3, [r3, #12]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f4:	440b      	add	r3, r1
 80080f6:	3b01      	subs	r3, #1
 80080f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080fa:	8989      	ldrh	r1, [r1, #12]
 80080fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008100:	429a      	cmp	r2, r3
 8008102:	d201      	bcs.n	8008108 <find_volume+0x41c>
 8008104:	230d      	movs	r3, #13
 8008106:	e06d      	b.n	80081e4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f04f 32ff 	mov.w	r2, #4294967295
 800810e:	619a      	str	r2, [r3, #24]
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	699a      	ldr	r2, [r3, #24]
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	2280      	movs	r2, #128	; 0x80
 800811c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800811e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008122:	2b03      	cmp	r3, #3
 8008124:	d149      	bne.n	80081ba <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	3338      	adds	r3, #56	; 0x38
 800812a:	3330      	adds	r3, #48	; 0x30
 800812c:	4618      	mov	r0, r3
 800812e:	f7fd ff67 	bl	8006000 <ld_word>
 8008132:	4603      	mov	r3, r0
 8008134:	2b01      	cmp	r3, #1
 8008136:	d140      	bne.n	80081ba <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800813a:	3301      	adds	r3, #1
 800813c:	4619      	mov	r1, r3
 800813e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008140:	f7fe fa0e 	bl	8006560 <move_window>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d137      	bne.n	80081ba <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814c:	2200      	movs	r2, #0
 800814e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	3338      	adds	r3, #56	; 0x38
 8008154:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008158:	4618      	mov	r0, r3
 800815a:	f7fd ff51 	bl	8006000 <ld_word>
 800815e:	4603      	mov	r3, r0
 8008160:	461a      	mov	r2, r3
 8008162:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008166:	429a      	cmp	r2, r3
 8008168:	d127      	bne.n	80081ba <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	3338      	adds	r3, #56	; 0x38
 800816e:	4618      	mov	r0, r3
 8008170:	f7fd ff5e 	bl	8006030 <ld_dword>
 8008174:	4602      	mov	r2, r0
 8008176:	4b1d      	ldr	r3, [pc, #116]	; (80081ec <find_volume+0x500>)
 8008178:	429a      	cmp	r2, r3
 800817a:	d11e      	bne.n	80081ba <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	3338      	adds	r3, #56	; 0x38
 8008180:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008184:	4618      	mov	r0, r3
 8008186:	f7fd ff53 	bl	8006030 <ld_dword>
 800818a:	4602      	mov	r2, r0
 800818c:	4b18      	ldr	r3, [pc, #96]	; (80081f0 <find_volume+0x504>)
 800818e:	429a      	cmp	r2, r3
 8008190:	d113      	bne.n	80081ba <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	3338      	adds	r3, #56	; 0x38
 8008196:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd ff48 	bl	8006030 <ld_dword>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	3338      	adds	r3, #56	; 0x38
 80081aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fd ff3e 	bl	8006030 <ld_dword>
 80081b4:	4602      	mov	r2, r0
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80081c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80081c2:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <find_volume+0x508>)
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	3301      	adds	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <find_volume+0x508>)
 80081cc:	801a      	strh	r2, [r3, #0]
 80081ce:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <find_volume+0x508>)
 80081d0:	881a      	ldrh	r2, [r3, #0]
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	4a07      	ldr	r2, [pc, #28]	; (80081f8 <find_volume+0x50c>)
 80081da:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80081dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081de:	f7fe f957 	bl	8006490 <clear_lock>
#endif
	return FR_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3758      	adds	r7, #88	; 0x58
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	41615252 	.word	0x41615252
 80081f0:	61417272 	.word	0x61417272
 80081f4:	200000d4 	.word	0x200000d4
 80081f8:	200000f8 	.word	0x200000f8

080081fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008206:	2309      	movs	r3, #9
 8008208:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01c      	beq.n	800824a <validate+0x4e>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d018      	beq.n	800824a <validate+0x4e>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d013      	beq.n	800824a <validate+0x4e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	889a      	ldrh	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	88db      	ldrh	r3, [r3, #6]
 800822c:	429a      	cmp	r2, r3
 800822e:	d10c      	bne.n	800824a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	4618      	mov	r0, r3
 8008238:	f7fd fe44 	bl	8005ec4 <disk_status>
 800823c:	4603      	mov	r3, r0
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <validate+0x4e>
			res = FR_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <validate+0x5a>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	e000      	b.n	8008258 <validate+0x5c>
 8008256:	2300      	movs	r3, #0
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	6013      	str	r3, [r2, #0]
	return res;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800827a:	f107 0310 	add.w	r3, r7, #16
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff fc9a 	bl	8007bb8 <get_ldnumber>
 8008284:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b00      	cmp	r3, #0
 800828a:	da01      	bge.n	8008290 <f_mount+0x28>
 800828c:	230b      	movs	r3, #11
 800828e:	e02b      	b.n	80082e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008290:	4a17      	ldr	r2, [pc, #92]	; (80082f0 <f_mount+0x88>)
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008298:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80082a0:	69b8      	ldr	r0, [r7, #24]
 80082a2:	f7fe f8f5 	bl	8006490 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2200      	movs	r2, #0
 80082aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	490d      	ldr	r1, [pc, #52]	; (80082f0 <f_mount+0x88>)
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <f_mount+0x66>
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d001      	beq.n	80082d2 <f_mount+0x6a>
 80082ce:	2300      	movs	r3, #0
 80082d0:	e00a      	b.n	80082e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80082d2:	f107 010c 	add.w	r1, r7, #12
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	2200      	movs	r2, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	f7ff fd05 	bl	8007cec <find_volume>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	200000d0 	.word	0x200000d0

080082f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b09a      	sub	sp, #104	; 0x68
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <f_open+0x18>
 8008308:	2309      	movs	r3, #9
 800830a:	e1bb      	b.n	8008684 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008312:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008314:	79fa      	ldrb	r2, [r7, #7]
 8008316:	f107 0114 	add.w	r1, r7, #20
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff fce4 	bl	8007cec <find_volume>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800832a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800832e:	2b00      	cmp	r3, #0
 8008330:	f040 819f 	bne.w	8008672 <f_open+0x37e>
		dj.obj.fs = fs;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	f107 0318 	add.w	r3, r7, #24
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fbc3 	bl	8007acc <follow_path>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800834c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008350:	2b00      	cmp	r3, #0
 8008352:	d11a      	bne.n	800838a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008358:	b25b      	sxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	da03      	bge.n	8008366 <f_open+0x72>
				res = FR_INVALID_NAME;
 800835e:	2306      	movs	r3, #6
 8008360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008364:	e011      	b.n	800838a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	bf14      	ite	ne
 8008370:	2301      	movne	r3, #1
 8008372:	2300      	moveq	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	461a      	mov	r2, r3
 8008378:	f107 0318 	add.w	r3, r7, #24
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f7fd ff3e 	bl	8006200 <chk_lock>
 8008384:	4603      	mov	r3, r0
 8008386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	f003 031c 	and.w	r3, r3, #28
 8008390:	2b00      	cmp	r3, #0
 8008392:	d07f      	beq.n	8008494 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008398:	2b00      	cmp	r3, #0
 800839a:	d017      	beq.n	80083cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800839c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d10e      	bne.n	80083c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80083a4:	f7fd ff88 	bl	80062b8 <enq_lock>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d006      	beq.n	80083bc <f_open+0xc8>
 80083ae:	f107 0318 	add.w	r3, r7, #24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff f8da 	bl	800756c <dir_register>
 80083b8:	4603      	mov	r3, r0
 80083ba:	e000      	b.n	80083be <f_open+0xca>
 80083bc:	2312      	movs	r3, #18
 80083be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	f043 0308 	orr.w	r3, r3, #8
 80083c8:	71fb      	strb	r3, [r7, #7]
 80083ca:	e010      	b.n	80083ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80083cc:	7fbb      	ldrb	r3, [r7, #30]
 80083ce:	f003 0311 	and.w	r3, r3, #17
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <f_open+0xea>
					res = FR_DENIED;
 80083d6:	2307      	movs	r3, #7
 80083d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80083dc:	e007      	b.n	80083ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <f_open+0xfa>
 80083e8:	2308      	movs	r3, #8
 80083ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80083ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d168      	bne.n	80084c8 <f_open+0x1d4>
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	f003 0308 	and.w	r3, r3, #8
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d063      	beq.n	80084c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008400:	f7fd fcfa 	bl	8005df8 <get_fattime>
 8008404:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	330e      	adds	r3, #14
 800840a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800840c:	4618      	mov	r0, r3
 800840e:	f7fd fe4d 	bl	80060ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	3316      	adds	r3, #22
 8008416:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008418:	4618      	mov	r0, r3
 800841a:	f7fd fe47 	bl	80060ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	330b      	adds	r3, #11
 8008422:	2220      	movs	r2, #32
 8008424:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800842a:	4611      	mov	r1, r2
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fe16 	bl	800705e <ld_clust>
 8008432:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008438:	2200      	movs	r2, #0
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fe2e 	bl	800709c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	331c      	adds	r3, #28
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd fe30 	bl	80060ac <st_dword>
					fs->wflag = 1;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2201      	movs	r2, #1
 8008450:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008454:	2b00      	cmp	r3, #0
 8008456:	d037      	beq.n	80084c8 <f_open+0x1d4>
						dw = fs->winsect;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800845e:	f107 0318 	add.w	r3, r7, #24
 8008462:	2200      	movs	r2, #0
 8008464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fb1e 	bl	8006aa8 <remove_chain>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008476:	2b00      	cmp	r3, #0
 8008478:	d126      	bne.n	80084c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe f86e 	bl	8006560 <move_window>
 8008484:	4603      	mov	r3, r0
 8008486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800848e:	3a01      	subs	r2, #1
 8008490:	615a      	str	r2, [r3, #20]
 8008492:	e019      	b.n	80084c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008494:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008498:	2b00      	cmp	r3, #0
 800849a:	d115      	bne.n	80084c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800849c:	7fbb      	ldrb	r3, [r7, #30]
 800849e:	f003 0310 	and.w	r3, r3, #16
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <f_open+0x1ba>
					res = FR_NO_FILE;
 80084a6:	2304      	movs	r3, #4
 80084a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80084ac:	e00c      	b.n	80084c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <f_open+0x1d4>
 80084b8:	7fbb      	ldrb	r3, [r7, #30]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <f_open+0x1d4>
						res = FR_DENIED;
 80084c2:	2307      	movs	r3, #7
 80084c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80084c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d128      	bne.n	8008522 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80084ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bf14      	ite	ne
 80084fa:	2301      	movne	r3, #1
 80084fc:	2300      	moveq	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	f107 0318 	add.w	r3, r7, #24
 8008506:	4611      	mov	r1, r2
 8008508:	4618      	mov	r0, r3
 800850a:	f7fd fef7 	bl	80062fc <inc_lock>
 800850e:	4602      	mov	r2, r0
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <f_open+0x22e>
 800851c:	2302      	movs	r3, #2
 800851e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008522:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008526:	2b00      	cmp	r3, #0
 8008528:	f040 80a3 	bne.w	8008672 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fd93 	bl	800705e <ld_clust>
 8008538:	4602      	mov	r2, r0
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	331c      	adds	r3, #28
 8008542:	4618      	mov	r0, r3
 8008544:	f7fd fd74 	bl	8006030 <ld_dword>
 8008548:	4602      	mov	r2, r0
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	88da      	ldrh	r2, [r3, #6]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	79fa      	ldrb	r2, [r7, #7]
 8008566:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3330      	adds	r3, #48	; 0x30
 800857e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f7fd fdde 	bl	8006146 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d06e      	beq.n	8008672 <f_open+0x37e>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d06a      	beq.n	8008672 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	895b      	ldrh	r3, [r3, #10]
 80085a8:	461a      	mov	r2, r3
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	899b      	ldrh	r3, [r3, #12]
 80085ae:	fb03 f302 	mul.w	r3, r3, r2
 80085b2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085c0:	e016      	b.n	80085f0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe f887 	bl	80066da <get_fat>
 80085cc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80085ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d802      	bhi.n	80085da <f_open+0x2e6>
 80085d4:	2302      	movs	r3, #2
 80085d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e0:	d102      	bne.n	80085e8 <f_open+0x2f4>
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <f_open+0x30c>
 80085f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d8e0      	bhi.n	80085c2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008604:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008606:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800860a:	2b00      	cmp	r3, #0
 800860c:	d131      	bne.n	8008672 <f_open+0x37e>
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	899b      	ldrh	r3, [r3, #12]
 8008612:	461a      	mov	r2, r3
 8008614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008616:	fbb3 f1f2 	udiv	r1, r3, r2
 800861a:	fb02 f201 	mul.w	r2, r2, r1
 800861e:	1a9b      	subs	r3, r3, r2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d026      	beq.n	8008672 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe f837 	bl	800669c <clust2sect>
 800862e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d103      	bne.n	800863e <f_open+0x34a>
						res = FR_INT_ERR;
 8008636:	2302      	movs	r3, #2
 8008638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800863c:	e019      	b.n	8008672 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	899b      	ldrh	r3, [r3, #12]
 8008642:	461a      	mov	r2, r3
 8008644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008646:	fbb3 f2f2 	udiv	r2, r3, r2
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	441a      	add	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	7858      	ldrb	r0, [r3, #1]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a1a      	ldr	r2, [r3, #32]
 8008660:	2301      	movs	r3, #1
 8008662:	f7fd fc6f 	bl	8005f44 <disk_read>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <f_open+0x37e>
 800866c:	2301      	movs	r3, #1
 800866e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <f_open+0x38c>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008680:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008684:	4618      	mov	r0, r3
 8008686:	3768      	adds	r7, #104	; 0x68
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08e      	sub	sp, #56	; 0x38
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f107 0214 	add.w	r2, r7, #20
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fda5 	bl	80081fc <validate>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80086b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d107      	bne.n	80086d0 <f_read+0x44>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	7d5b      	ldrb	r3, [r3, #21]
 80086c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80086c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <f_read+0x4a>
 80086d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086d4:	e135      	b.n	8008942 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	7d1b      	ldrb	r3, [r3, #20]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <f_read+0x5a>
 80086e2:	2307      	movs	r3, #7
 80086e4:	e12d      	b.n	8008942 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	f240 811e 	bls.w	8008938 <f_read+0x2ac>
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008700:	e11a      	b.n	8008938 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	8992      	ldrh	r2, [r2, #12]
 800870a:	fbb3 f1f2 	udiv	r1, r3, r2
 800870e:	fb02 f201 	mul.w	r2, r2, r1
 8008712:	1a9b      	subs	r3, r3, r2
 8008714:	2b00      	cmp	r3, #0
 8008716:	f040 80d5 	bne.w	80088c4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	8992      	ldrh	r2, [r2, #12]
 8008722:	fbb3 f3f2 	udiv	r3, r3, r2
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	8952      	ldrh	r2, [r2, #10]
 800872a:	3a01      	subs	r2, #1
 800872c:	4013      	ands	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d12f      	bne.n	8008796 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d103      	bne.n	8008746 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	633b      	str	r3, [r7, #48]	; 0x30
 8008744:	e013      	b.n	800876e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	4619      	mov	r1, r3
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7fe faa4 	bl	8006ca2 <clmt_clust>
 800875a:	6338      	str	r0, [r7, #48]	; 0x30
 800875c:	e007      	b.n	800876e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fd ffb7 	bl	80066da <get_fat>
 800876c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	2b01      	cmp	r3, #1
 8008772:	d804      	bhi.n	800877e <f_read+0xf2>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2202      	movs	r2, #2
 8008778:	755a      	strb	r2, [r3, #21]
 800877a:	2302      	movs	r3, #2
 800877c:	e0e1      	b.n	8008942 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008784:	d104      	bne.n	8008790 <f_read+0x104>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	755a      	strb	r2, [r3, #21]
 800878c:	2301      	movs	r3, #1
 800878e:	e0d8      	b.n	8008942 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008794:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f7fd ff7c 	bl	800669c <clust2sect>
 80087a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <f_read+0x12a>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2202      	movs	r2, #2
 80087b0:	755a      	strb	r2, [r3, #21]
 80087b2:	2302      	movs	r3, #2
 80087b4:	e0c5      	b.n	8008942 <f_read+0x2b6>
			sect += csect;
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	899b      	ldrh	r3, [r3, #12]
 80087c2:	461a      	mov	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d041      	beq.n	8008856 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	4413      	add	r3, r2
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	8952      	ldrh	r2, [r2, #10]
 80087dc:	4293      	cmp	r3, r2
 80087de:	d905      	bls.n	80087ec <f_read+0x160>
					cc = fs->csize - csect;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	895b      	ldrh	r3, [r3, #10]
 80087e4:	461a      	mov	r2, r3
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	7858      	ldrb	r0, [r3, #1]
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087f6:	f7fd fba5 	bl	8005f44 <disk_read>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <f_read+0x17e>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	755a      	strb	r2, [r3, #21]
 8008806:	2301      	movs	r3, #1
 8008808:	e09b      	b.n	8008942 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	7d1b      	ldrb	r3, [r3, #20]
 800880e:	b25b      	sxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	da18      	bge.n	8008846 <f_read+0x1ba>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a1a      	ldr	r2, [r3, #32]
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881e:	429a      	cmp	r2, r3
 8008820:	d911      	bls.n	8008846 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1a      	ldr	r2, [r3, #32]
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	8992      	ldrh	r2, [r2, #12]
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	18d0      	adds	r0, r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	899b      	ldrh	r3, [r3, #12]
 8008840:	461a      	mov	r2, r3
 8008842:	f7fd fc5f 	bl	8006104 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	899b      	ldrh	r3, [r3, #12]
 800884a:	461a      	mov	r2, r3
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	fb02 f303 	mul.w	r3, r2, r3
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008854:	e05c      	b.n	8008910 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	429a      	cmp	r2, r3
 800885e:	d02e      	beq.n	80088be <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	7d1b      	ldrb	r3, [r3, #20]
 8008864:	b25b      	sxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	da18      	bge.n	800889c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	7858      	ldrb	r0, [r3, #1]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a1a      	ldr	r2, [r3, #32]
 8008878:	2301      	movs	r3, #1
 800887a:	f7fd fb83 	bl	8005f84 <disk_write>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <f_read+0x202>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	755a      	strb	r2, [r3, #21]
 800888a:	2301      	movs	r3, #1
 800888c:	e059      	b.n	8008942 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	7d1b      	ldrb	r3, [r3, #20]
 8008892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008896:	b2da      	uxtb	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	7858      	ldrb	r0, [r3, #1]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088a6:	2301      	movs	r3, #1
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	f7fd fb4b 	bl	8005f44 <disk_read>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d004      	beq.n	80088be <f_read+0x232>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	755a      	strb	r2, [r3, #21]
 80088ba:	2301      	movs	r3, #1
 80088bc:	e041      	b.n	8008942 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	899b      	ldrh	r3, [r3, #12]
 80088c8:	4618      	mov	r0, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	8992      	ldrh	r2, [r2, #12]
 80088d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d6:	fb02 f201 	mul.w	r2, r2, r1
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	1ac3      	subs	r3, r0, r3
 80088de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80088e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d901      	bls.n	80088ec <f_read+0x260>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	8992      	ldrh	r2, [r2, #12]
 80088fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80088fe:	fb02 f200 	mul.w	r2, r2, r0
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	440b      	add	r3, r1
 8008906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008908:	4619      	mov	r1, r3
 800890a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800890c:	f7fd fbfa 	bl	8006104 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	4413      	add	r3, r2
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	699a      	ldr	r2, [r3, #24]
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	441a      	add	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	619a      	str	r2, [r3, #24]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892a:	441a      	add	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f47f aee1 	bne.w	8008702 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3738      	adds	r7, #56	; 0x38
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b08c      	sub	sp, #48	; 0x30
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f107 0210 	add.w	r2, r7, #16
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff fc46 	bl	80081fc <validate>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800897a:	2b00      	cmp	r3, #0
 800897c:	d107      	bne.n	800898e <f_write+0x44>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	7d5b      	ldrb	r3, [r3, #21]
 8008982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <f_write+0x4a>
 800898e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008992:	e16a      	b.n	8008c6a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	7d1b      	ldrb	r3, [r3, #20]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <f_write+0x5a>
 80089a0:	2307      	movs	r3, #7
 80089a2:	e162      	b.n	8008c6a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	699a      	ldr	r2, [r3, #24]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	441a      	add	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	f080 814c 	bcs.w	8008c4e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	43db      	mvns	r3, r3
 80089bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80089be:	e146      	b.n	8008c4e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	8992      	ldrh	r2, [r2, #12]
 80089c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80089cc:	fb02 f201 	mul.w	r2, r2, r1
 80089d0:	1a9b      	subs	r3, r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f040 80f1 	bne.w	8008bba <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	8992      	ldrh	r2, [r2, #12]
 80089e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	8952      	ldrh	r2, [r2, #10]
 80089e8:	3a01      	subs	r2, #1
 80089ea:	4013      	ands	r3, r2
 80089ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d143      	bne.n	8008a7c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10c      	bne.n	8008a16 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d11a      	bne.n	8008a3e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe f8b0 	bl	8006b72 <create_chain>
 8008a12:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a14:	e013      	b.n	8008a3e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d007      	beq.n	8008a2e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	4619      	mov	r1, r3
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7fe f93c 	bl	8006ca2 <clmt_clust>
 8008a2a:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a2c:	e007      	b.n	8008a3e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	4619      	mov	r1, r3
 8008a36:	4610      	mov	r0, r2
 8008a38:	f7fe f89b 	bl	8006b72 <create_chain>
 8008a3c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8109 	beq.w	8008c58 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d104      	bne.n	8008a56 <f_write+0x10c>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	755a      	strb	r2, [r3, #21]
 8008a52:	2302      	movs	r3, #2
 8008a54:	e109      	b.n	8008c6a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d104      	bne.n	8008a68 <f_write+0x11e>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2201      	movs	r2, #1
 8008a62:	755a      	strb	r2, [r3, #21]
 8008a64:	2301      	movs	r3, #1
 8008a66:	e100      	b.n	8008c6a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a6c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <f_write+0x132>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a7a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	7d1b      	ldrb	r3, [r3, #20]
 8008a80:	b25b      	sxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	da18      	bge.n	8008ab8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	7858      	ldrb	r0, [r3, #1]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a1a      	ldr	r2, [r3, #32]
 8008a94:	2301      	movs	r3, #1
 8008a96:	f7fd fa75 	bl	8005f84 <disk_write>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d004      	beq.n	8008aaa <f_write+0x160>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	755a      	strb	r2, [r3, #21]
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e0df      	b.n	8008c6a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	7d1b      	ldrb	r3, [r3, #20]
 8008aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	f7fd fdeb 	bl	800669c <clust2sect>
 8008ac6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d104      	bne.n	8008ad8 <f_write+0x18e>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	755a      	strb	r2, [r3, #21]
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e0c8      	b.n	8008c6a <f_write+0x320>
			sect += csect;
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4413      	add	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	899b      	ldrh	r3, [r3, #12]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aec:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d043      	beq.n	8008b7c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	4413      	add	r3, r2
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	8952      	ldrh	r2, [r2, #10]
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d905      	bls.n	8008b0e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	895b      	ldrh	r3, [r3, #10]
 8008b06:	461a      	mov	r2, r3
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	7858      	ldrb	r0, [r3, #1]
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	69f9      	ldr	r1, [r7, #28]
 8008b18:	f7fd fa34 	bl	8005f84 <disk_write>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d004      	beq.n	8008b2c <f_write+0x1e2>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	755a      	strb	r2, [r3, #21]
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e09e      	b.n	8008c6a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a1a      	ldr	r2, [r3, #32]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	6a3a      	ldr	r2, [r7, #32]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d918      	bls.n	8008b6c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	8992      	ldrh	r2, [r2, #12]
 8008b4c:	fb02 f303 	mul.w	r3, r2, r3
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	18d1      	adds	r1, r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	899b      	ldrh	r3, [r3, #12]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	f7fd fad3 	bl	8006104 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	7d1b      	ldrb	r3, [r3, #20]
 8008b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	899b      	ldrh	r3, [r3, #12]
 8008b70:	461a      	mov	r2, r3
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	fb02 f303 	mul.w	r3, r2, r3
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008b7a:	e04b      	b.n	8008c14 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d016      	beq.n	8008bb4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699a      	ldr	r2, [r3, #24]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d210      	bcs.n	8008bb4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	7858      	ldrb	r0, [r3, #1]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	f7fd f9d0 	bl	8005f44 <disk_read>
 8008ba4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	755a      	strb	r2, [r3, #21]
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e05a      	b.n	8008c6a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	899b      	ldrh	r3, [r3, #12]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	8992      	ldrh	r2, [r2, #12]
 8008bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bcc:	fb02 f201 	mul.w	r2, r2, r1
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	1ac3      	subs	r3, r0, r3
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d901      	bls.n	8008be2 <f_write+0x298>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	8992      	ldrh	r2, [r2, #12]
 8008bf0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bf4:	fb02 f200 	mul.w	r2, r2, r0
 8008bf8:	1a9b      	subs	r3, r3, r2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	69f9      	ldr	r1, [r7, #28]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fd fa7f 	bl	8006104 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	7d1b      	ldrb	r3, [r3, #20]
 8008c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	4413      	add	r3, r2
 8008c1a:	61fb      	str	r3, [r7, #28]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	699a      	ldr	r2, [r3, #24]
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	441a      	add	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	619a      	str	r2, [r3, #24]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bf38      	it	cc
 8008c34:	461a      	movcc	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	60da      	str	r2, [r3, #12]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	441a      	add	r2, r3
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f47f aeb5 	bne.w	80089c0 <f_write+0x76>
 8008c56:	e000      	b.n	8008c5a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c58:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	7d1b      	ldrb	r3, [r3, #20]
 8008c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3730      	adds	r7, #48	; 0x30
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f107 0208 	add.w	r2, r7, #8
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff faba 	bl	80081fc <validate>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d168      	bne.n	8008d64 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7d1b      	ldrb	r3, [r3, #20]
 8008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d062      	beq.n	8008d64 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	7d1b      	ldrb	r3, [r3, #20]
 8008ca2:	b25b      	sxtb	r3, r3
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da15      	bge.n	8008cd4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	7858      	ldrb	r0, [r3, #1]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1a      	ldr	r2, [r3, #32]
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f7fd f964 	bl	8005f84 <disk_write>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <f_sync+0x54>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e04f      	b.n	8008d66 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	7d1b      	ldrb	r3, [r3, #20]
 8008cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008cd4:	f7fd f890 	bl	8005df8 <get_fattime>
 8008cd8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f7fd fc3c 	bl	8006560 <move_window>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008cec:	7dfb      	ldrb	r3, [r7, #23]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d138      	bne.n	8008d64 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	330b      	adds	r3, #11
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	330b      	adds	r3, #11
 8008d02:	f042 0220 	orr.w	r2, r2, #32
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	461a      	mov	r2, r3
 8008d14:	68f9      	ldr	r1, [r7, #12]
 8008d16:	f7fe f9c1 	bl	800709c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f103 021c 	add.w	r2, r3, #28
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fd f9c0 	bl	80060ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3316      	adds	r3, #22
 8008d30:	6939      	ldr	r1, [r7, #16]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fd f9ba 	bl	80060ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3312      	adds	r3, #18
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fd f999 	bl	8006076 <st_word>
					fs->wflag = 1;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2201      	movs	r2, #1
 8008d48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fd fc35 	bl	80065bc <sync_fs>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	7d1b      	ldrb	r3, [r3, #20]
 8008d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff ff7b 	bl	8008c72 <f_sync>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d118      	bne.n	8008db8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f107 0208 	add.w	r2, r7, #8
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fa34 	bl	80081fc <validate>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10c      	bne.n	8008db8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fd fb38 	bl	8006418 <dec_lock>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b092      	sub	sp, #72	; 0x48
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008dce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008dd2:	f107 030c 	add.w	r3, r7, #12
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe ff87 	bl	8007cec <find_volume>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008de4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 8099 	bne.w	8008f20 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	699a      	ldr	r2, [r3, #24]
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	3b02      	subs	r3, #2
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d804      	bhi.n	8008e0c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	e089      	b.n	8008f20 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d128      	bne.n	8008e6a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008e20:	f107 0314 	add.w	r3, r7, #20
 8008e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fd fc57 	bl	80066da <get_fat>
 8008e2c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e34:	d103      	bne.n	8008e3e <f_getfree+0x7c>
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e3c:	e063      	b.n	8008f06 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d103      	bne.n	8008e4c <f_getfree+0x8a>
 8008e44:	2302      	movs	r3, #2
 8008e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e4a:	e05c      	b.n	8008f06 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d102      	bne.n	8008e58 <f_getfree+0x96>
 8008e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e54:	3301      	adds	r3, #1
 8008e56:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d3db      	bcc.n	8008e20 <f_getfree+0x5e>
 8008e68:	e04d      	b.n	8008f06 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d113      	bne.n	8008eac <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f7fd fb67 	bl	8006560 <move_window>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008e98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d131      	bne.n	8008f04 <f_getfree+0x142>
							p = fs->win;
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	3338      	adds	r3, #56	; 0x38
 8008ea4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	899b      	ldrh	r3, [r3, #12]
 8008eaa:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d10f      	bne.n	8008ed4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eb6:	f7fd f8a3 	bl	8006000 <ld_word>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <f_getfree+0x104>
 8008ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	3302      	adds	r3, #2
 8008eca:	633b      	str	r3, [r7, #48]	; 0x30
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ece:	3b02      	subs	r3, #2
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ed2:	e010      	b.n	8008ef6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed6:	f7fd f8ab 	bl	8006030 <ld_dword>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d102      	bne.n	8008eea <f_getfree+0x128>
 8008ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	3304      	adds	r3, #4
 8008eee:	633b      	str	r3, [r7, #48]	; 0x30
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	3b04      	subs	r3, #4
 8008ef4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1bd      	bne.n	8008e7e <f_getfree+0xbc>
 8008f02:	e000      	b.n	8008f06 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008f04:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f0a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f10:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	791a      	ldrb	r2, [r3, #4]
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	f042 0201 	orr.w	r2, r2, #1
 8008f1c:	b2d2      	uxtb	r2, r2
 8008f1e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008f20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3748      	adds	r7, #72	; 0x48
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008f40:	e01b      	b.n	8008f7a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008f42:	f107 0310 	add.w	r3, r7, #16
 8008f46:	f107 0114 	add.w	r1, r7, #20
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff fb9d 	bl	800868c <f_read>
		if (rc != 1) break;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d116      	bne.n	8008f86 <f_gets+0x5a>
		c = s[0];
 8008f58:	7d3b      	ldrb	r3, [r7, #20]
 8008f5a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	2b0d      	cmp	r3, #13
 8008f60:	d100      	bne.n	8008f64 <f_gets+0x38>
 8008f62:	e00a      	b.n	8008f7a <f_gets+0x4e>
		*p++ = c;
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	61ba      	str	r2, [r7, #24]
 8008f6a:	7dfa      	ldrb	r2, [r7, #23]
 8008f6c:	701a      	strb	r2, [r3, #0]
		n++;
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	3301      	adds	r3, #1
 8008f72:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	2b0a      	cmp	r3, #10
 8008f78:	d007      	beq.n	8008f8a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	dbde      	blt.n	8008f42 <f_gets+0x16>
 8008f84:	e002      	b.n	8008f8c <f_gets+0x60>
		if (rc != 1) break;
 8008f86:	bf00      	nop
 8008f88:	e000      	b.n	8008f8c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008f8a:	bf00      	nop
	}
	*p = 0;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <f_gets+0x70>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	e000      	b.n	8008f9e <f_gets+0x72>
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	2b0a      	cmp	r3, #10
 8008fb6:	d103      	bne.n	8008fc0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008fb8:	210d      	movs	r1, #13
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff fff3 	bl	8008fa6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	db25      	blt.n	8009018 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	60fa      	str	r2, [r7, #12]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b3c      	cmp	r3, #60	; 0x3c
 8008fde:	dd12      	ble.n	8009006 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6818      	ldr	r0, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f103 010c 	add.w	r1, r3, #12
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	f107 0308 	add.w	r3, r7, #8
 8008ff0:	f7ff fcab 	bl	800894a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d101      	bne.n	8009000 <putc_bfd+0x5a>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e001      	b.n	8009004 <putc_bfd+0x5e>
 8009000:	f04f 33ff 	mov.w	r3, #4294967295
 8009004:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	609a      	str	r2, [r3, #8]
 8009016:	e000      	b.n	800901a <putc_bfd+0x74>
	if (i < 0) return;
 8009018:	bf00      	nop
}
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	db17      	blt.n	8009060 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f103 010c 	add.w	r1, r3, #12
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	461a      	mov	r2, r3
 8009040:	f107 030c 	add.w	r3, r7, #12
 8009044:	f7ff fc81 	bl	800894a <f_write>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d108      	bne.n	8009060 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	461a      	mov	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	429a      	cmp	r2, r3
 8009058:	d102      	bne.n	8009060 <putc_flush+0x40>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	e001      	b.n	8009064 <putc_flush+0x44>
	return EOF;
 8009060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	605a      	str	r2, [r3, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	609a      	str	r2, [r3, #8]
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b096      	sub	sp, #88	; 0x58
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80090a0:	f107 030c 	add.w	r3, r7, #12
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff ffe0 	bl	800906c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80090ac:	e009      	b.n	80090c2 <f_puts+0x2c>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	607a      	str	r2, [r7, #4]
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	f107 030c 	add.w	r3, r7, #12
 80090ba:	4611      	mov	r1, r2
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff ff72 	bl	8008fa6 <putc_bfd>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1f1      	bne.n	80090ae <f_puts+0x18>
	return putc_flush(&pb);
 80090ca:	f107 030c 	add.w	r3, r7, #12
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff ffa6 	bl	8009020 <putc_flush>
 80090d4:	4603      	mov	r3, r0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3758      	adds	r7, #88	; 0x58
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	4613      	mov	r3, r2
 80090ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090ee:	2301      	movs	r3, #1
 80090f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80090f6:	4b1f      	ldr	r3, [pc, #124]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 80090f8:	7a5b      	ldrb	r3, [r3, #9]
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d131      	bne.n	8009164 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009100:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 8009102:	7a5b      	ldrb	r3, [r3, #9]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	4b1a      	ldr	r3, [pc, #104]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 800910a:	2100      	movs	r1, #0
 800910c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800910e:	4b19      	ldr	r3, [pc, #100]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 8009110:	7a5b      	ldrb	r3, [r3, #9]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	4a17      	ldr	r2, [pc, #92]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800911e:	4b15      	ldr	r3, [pc, #84]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 8009120:	7a5b      	ldrb	r3, [r3, #9]
 8009122:	b2db      	uxtb	r3, r3
 8009124:	461a      	mov	r2, r3
 8009126:	4b13      	ldr	r3, [pc, #76]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 8009128:	4413      	add	r3, r2
 800912a:	79fa      	ldrb	r2, [r7, #7]
 800912c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800912e:	4b11      	ldr	r3, [pc, #68]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 8009130:	7a5b      	ldrb	r3, [r3, #9]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	b2d1      	uxtb	r1, r2
 8009138:	4a0e      	ldr	r2, [pc, #56]	; (8009174 <FATFS_LinkDriverEx+0x94>)
 800913a:	7251      	strb	r1, [r2, #9]
 800913c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800913e:	7dbb      	ldrb	r3, [r7, #22]
 8009140:	3330      	adds	r3, #48	; 0x30
 8009142:	b2da      	uxtb	r2, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	3301      	adds	r3, #1
 800914c:	223a      	movs	r2, #58	; 0x3a
 800914e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	3302      	adds	r3, #2
 8009154:	222f      	movs	r2, #47	; 0x2f
 8009156:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	3303      	adds	r3, #3
 800915c:	2200      	movs	r2, #0
 800915e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009164:	7dfb      	ldrb	r3, [r7, #23]
}
 8009166:	4618      	mov	r0, r3
 8009168:	371c      	adds	r7, #28
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	200002f8 	.word	0x200002f8

08009178 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009182:	2200      	movs	r2, #0
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff ffaa 	bl	80090e0 <FATFS_LinkDriverEx>
 800918c:	4603      	mov	r3, r0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
	...

08009198 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	2b7f      	cmp	r3, #127	; 0x7f
 80091a8:	d802      	bhi.n	80091b0 <ff_convert+0x18>
		c = chr;
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	81fb      	strh	r3, [r7, #14]
 80091ae:	e025      	b.n	80091fc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00b      	beq.n	80091ce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	2bff      	cmp	r3, #255	; 0xff
 80091ba:	d805      	bhi.n	80091c8 <ff_convert+0x30>
 80091bc:	88fb      	ldrh	r3, [r7, #6]
 80091be:	3b80      	subs	r3, #128	; 0x80
 80091c0:	4a12      	ldr	r2, [pc, #72]	; (800920c <ff_convert+0x74>)
 80091c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091c6:	e000      	b.n	80091ca <ff_convert+0x32>
 80091c8:	2300      	movs	r3, #0
 80091ca:	81fb      	strh	r3, [r7, #14]
 80091cc:	e016      	b.n	80091fc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80091ce:	2300      	movs	r3, #0
 80091d0:	81fb      	strh	r3, [r7, #14]
 80091d2:	e009      	b.n	80091e8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80091d4:	89fb      	ldrh	r3, [r7, #14]
 80091d6:	4a0d      	ldr	r2, [pc, #52]	; (800920c <ff_convert+0x74>)
 80091d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091dc:	88fa      	ldrh	r2, [r7, #6]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d006      	beq.n	80091f0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80091e2:	89fb      	ldrh	r3, [r7, #14]
 80091e4:	3301      	adds	r3, #1
 80091e6:	81fb      	strh	r3, [r7, #14]
 80091e8:	89fb      	ldrh	r3, [r7, #14]
 80091ea:	2b7f      	cmp	r3, #127	; 0x7f
 80091ec:	d9f2      	bls.n	80091d4 <ff_convert+0x3c>
 80091ee:	e000      	b.n	80091f2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80091f0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80091f2:	89fb      	ldrh	r3, [r7, #14]
 80091f4:	3380      	adds	r3, #128	; 0x80
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80091fc:	89fb      	ldrh	r3, [r7, #14]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	08009e14 	.word	0x08009e14

08009210 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800921a:	88fb      	ldrh	r3, [r7, #6]
 800921c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009220:	d201      	bcs.n	8009226 <ff_wtoupper+0x16>
 8009222:	4b3e      	ldr	r3, [pc, #248]	; (800931c <ff_wtoupper+0x10c>)
 8009224:	e000      	b.n	8009228 <ff_wtoupper+0x18>
 8009226:	4b3e      	ldr	r3, [pc, #248]	; (8009320 <ff_wtoupper+0x110>)
 8009228:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	1c9a      	adds	r2, r3, #2
 800922e:	617a      	str	r2, [r7, #20]
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009234:	8a7b      	ldrh	r3, [r7, #18]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d068      	beq.n	800930c <ff_wtoupper+0xfc>
 800923a:	88fa      	ldrh	r2, [r7, #6]
 800923c:	8a7b      	ldrh	r3, [r7, #18]
 800923e:	429a      	cmp	r2, r3
 8009240:	d364      	bcc.n	800930c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	1c9a      	adds	r2, r3, #2
 8009246:	617a      	str	r2, [r7, #20]
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	823b      	strh	r3, [r7, #16]
 800924c:	8a3b      	ldrh	r3, [r7, #16]
 800924e:	0a1b      	lsrs	r3, r3, #8
 8009250:	81fb      	strh	r3, [r7, #14]
 8009252:	8a3b      	ldrh	r3, [r7, #16]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009258:	88fa      	ldrh	r2, [r7, #6]
 800925a:	8a79      	ldrh	r1, [r7, #18]
 800925c:	8a3b      	ldrh	r3, [r7, #16]
 800925e:	440b      	add	r3, r1
 8009260:	429a      	cmp	r2, r3
 8009262:	da49      	bge.n	80092f8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	2b08      	cmp	r3, #8
 8009268:	d84f      	bhi.n	800930a <ff_wtoupper+0xfa>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <ff_wtoupper+0x60>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	08009295 	.word	0x08009295
 8009274:	080092a7 	.word	0x080092a7
 8009278:	080092bd 	.word	0x080092bd
 800927c:	080092c5 	.word	0x080092c5
 8009280:	080092cd 	.word	0x080092cd
 8009284:	080092d5 	.word	0x080092d5
 8009288:	080092dd 	.word	0x080092dd
 800928c:	080092e5 	.word	0x080092e5
 8009290:	080092ed 	.word	0x080092ed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	8a7b      	ldrh	r3, [r7, #18]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	005b      	lsls	r3, r3, #1
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	4413      	add	r3, r2
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	80fb      	strh	r3, [r7, #6]
 80092a4:	e027      	b.n	80092f6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80092a6:	88fa      	ldrh	r2, [r7, #6]
 80092a8:	8a7b      	ldrh	r3, [r7, #18]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	88fa      	ldrh	r2, [r7, #6]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	80fb      	strh	r3, [r7, #6]
 80092ba:	e01c      	b.n	80092f6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80092bc:	88fb      	ldrh	r3, [r7, #6]
 80092be:	3b10      	subs	r3, #16
 80092c0:	80fb      	strh	r3, [r7, #6]
 80092c2:	e018      	b.n	80092f6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	3b20      	subs	r3, #32
 80092c8:	80fb      	strh	r3, [r7, #6]
 80092ca:	e014      	b.n	80092f6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80092cc:	88fb      	ldrh	r3, [r7, #6]
 80092ce:	3b30      	subs	r3, #48	; 0x30
 80092d0:	80fb      	strh	r3, [r7, #6]
 80092d2:	e010      	b.n	80092f6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80092d4:	88fb      	ldrh	r3, [r7, #6]
 80092d6:	3b1a      	subs	r3, #26
 80092d8:	80fb      	strh	r3, [r7, #6]
 80092da:	e00c      	b.n	80092f6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80092dc:	88fb      	ldrh	r3, [r7, #6]
 80092de:	3308      	adds	r3, #8
 80092e0:	80fb      	strh	r3, [r7, #6]
 80092e2:	e008      	b.n	80092f6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	3b50      	subs	r3, #80	; 0x50
 80092e8:	80fb      	strh	r3, [r7, #6]
 80092ea:	e004      	b.n	80092f6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80092f2:	80fb      	strh	r3, [r7, #6]
 80092f4:	bf00      	nop
			}
			break;
 80092f6:	e008      	b.n	800930a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80092f8:	89fb      	ldrh	r3, [r7, #14]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d195      	bne.n	800922a <ff_wtoupper+0x1a>
 80092fe:	8a3b      	ldrh	r3, [r7, #16]
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	4413      	add	r3, r2
 8009306:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009308:	e78f      	b.n	800922a <ff_wtoupper+0x1a>
			break;
 800930a:	bf00      	nop
	}

	return chr;
 800930c:	88fb      	ldrh	r3, [r7, #6]
}
 800930e:	4618      	mov	r0, r3
 8009310:	371c      	adds	r7, #28
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	08009f14 	.word	0x08009f14
 8009320:	0800a108 	.word	0x0800a108

08009324 <__errno>:
 8009324:	4b01      	ldr	r3, [pc, #4]	; (800932c <__errno+0x8>)
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	20000048 	.word	0x20000048

08009330 <__libc_init_array>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4e0d      	ldr	r6, [pc, #52]	; (8009368 <__libc_init_array+0x38>)
 8009334:	4c0d      	ldr	r4, [pc, #52]	; (800936c <__libc_init_array+0x3c>)
 8009336:	1ba4      	subs	r4, r4, r6
 8009338:	10a4      	asrs	r4, r4, #2
 800933a:	2500      	movs	r5, #0
 800933c:	42a5      	cmp	r5, r4
 800933e:	d109      	bne.n	8009354 <__libc_init_array+0x24>
 8009340:	4e0b      	ldr	r6, [pc, #44]	; (8009370 <__libc_init_array+0x40>)
 8009342:	4c0c      	ldr	r4, [pc, #48]	; (8009374 <__libc_init_array+0x44>)
 8009344:	f000 fc26 	bl	8009b94 <_init>
 8009348:	1ba4      	subs	r4, r4, r6
 800934a:	10a4      	asrs	r4, r4, #2
 800934c:	2500      	movs	r5, #0
 800934e:	42a5      	cmp	r5, r4
 8009350:	d105      	bne.n	800935e <__libc_init_array+0x2e>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009358:	4798      	blx	r3
 800935a:	3501      	adds	r5, #1
 800935c:	e7ee      	b.n	800933c <__libc_init_array+0xc>
 800935e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009362:	4798      	blx	r3
 8009364:	3501      	adds	r5, #1
 8009366:	e7f2      	b.n	800934e <__libc_init_array+0x1e>
 8009368:	0800a200 	.word	0x0800a200
 800936c:	0800a200 	.word	0x0800a200
 8009370:	0800a200 	.word	0x0800a200
 8009374:	0800a204 	.word	0x0800a204

08009378 <memset>:
 8009378:	4402      	add	r2, r0
 800937a:	4603      	mov	r3, r0
 800937c:	4293      	cmp	r3, r2
 800937e:	d100      	bne.n	8009382 <memset+0xa>
 8009380:	4770      	bx	lr
 8009382:	f803 1b01 	strb.w	r1, [r3], #1
 8009386:	e7f9      	b.n	800937c <memset+0x4>

08009388 <siprintf>:
 8009388:	b40e      	push	{r1, r2, r3}
 800938a:	b500      	push	{lr}
 800938c:	b09c      	sub	sp, #112	; 0x70
 800938e:	ab1d      	add	r3, sp, #116	; 0x74
 8009390:	9002      	str	r0, [sp, #8]
 8009392:	9006      	str	r0, [sp, #24]
 8009394:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009398:	4809      	ldr	r0, [pc, #36]	; (80093c0 <siprintf+0x38>)
 800939a:	9107      	str	r1, [sp, #28]
 800939c:	9104      	str	r1, [sp, #16]
 800939e:	4909      	ldr	r1, [pc, #36]	; (80093c4 <siprintf+0x3c>)
 80093a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a4:	9105      	str	r1, [sp, #20]
 80093a6:	6800      	ldr	r0, [r0, #0]
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	a902      	add	r1, sp, #8
 80093ac:	f000 f866 	bl	800947c <_svfiprintf_r>
 80093b0:	9b02      	ldr	r3, [sp, #8]
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	b01c      	add	sp, #112	; 0x70
 80093b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093bc:	b003      	add	sp, #12
 80093be:	4770      	bx	lr
 80093c0:	20000048 	.word	0x20000048
 80093c4:	ffff0208 	.word	0xffff0208

080093c8 <__ssputs_r>:
 80093c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093cc:	688e      	ldr	r6, [r1, #8]
 80093ce:	429e      	cmp	r6, r3
 80093d0:	4682      	mov	sl, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	4690      	mov	r8, r2
 80093d6:	4699      	mov	r9, r3
 80093d8:	d837      	bhi.n	800944a <__ssputs_r+0x82>
 80093da:	898a      	ldrh	r2, [r1, #12]
 80093dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093e0:	d031      	beq.n	8009446 <__ssputs_r+0x7e>
 80093e2:	6825      	ldr	r5, [r4, #0]
 80093e4:	6909      	ldr	r1, [r1, #16]
 80093e6:	1a6f      	subs	r7, r5, r1
 80093e8:	6965      	ldr	r5, [r4, #20]
 80093ea:	2302      	movs	r3, #2
 80093ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80093f4:	f109 0301 	add.w	r3, r9, #1
 80093f8:	443b      	add	r3, r7
 80093fa:	429d      	cmp	r5, r3
 80093fc:	bf38      	it	cc
 80093fe:	461d      	movcc	r5, r3
 8009400:	0553      	lsls	r3, r2, #21
 8009402:	d530      	bpl.n	8009466 <__ssputs_r+0x9e>
 8009404:	4629      	mov	r1, r5
 8009406:	f000 fb2b 	bl	8009a60 <_malloc_r>
 800940a:	4606      	mov	r6, r0
 800940c:	b950      	cbnz	r0, 8009424 <__ssputs_r+0x5c>
 800940e:	230c      	movs	r3, #12
 8009410:	f8ca 3000 	str.w	r3, [sl]
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	f04f 30ff 	mov.w	r0, #4294967295
 8009420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009424:	463a      	mov	r2, r7
 8009426:	6921      	ldr	r1, [r4, #16]
 8009428:	f000 faa8 	bl	800997c <memcpy>
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	6126      	str	r6, [r4, #16]
 800943a:	6165      	str	r5, [r4, #20]
 800943c:	443e      	add	r6, r7
 800943e:	1bed      	subs	r5, r5, r7
 8009440:	6026      	str	r6, [r4, #0]
 8009442:	60a5      	str	r5, [r4, #8]
 8009444:	464e      	mov	r6, r9
 8009446:	454e      	cmp	r6, r9
 8009448:	d900      	bls.n	800944c <__ssputs_r+0x84>
 800944a:	464e      	mov	r6, r9
 800944c:	4632      	mov	r2, r6
 800944e:	4641      	mov	r1, r8
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	f000 fa9e 	bl	8009992 <memmove>
 8009456:	68a3      	ldr	r3, [r4, #8]
 8009458:	1b9b      	subs	r3, r3, r6
 800945a:	60a3      	str	r3, [r4, #8]
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	441e      	add	r6, r3
 8009460:	6026      	str	r6, [r4, #0]
 8009462:	2000      	movs	r0, #0
 8009464:	e7dc      	b.n	8009420 <__ssputs_r+0x58>
 8009466:	462a      	mov	r2, r5
 8009468:	f000 fb54 	bl	8009b14 <_realloc_r>
 800946c:	4606      	mov	r6, r0
 800946e:	2800      	cmp	r0, #0
 8009470:	d1e2      	bne.n	8009438 <__ssputs_r+0x70>
 8009472:	6921      	ldr	r1, [r4, #16]
 8009474:	4650      	mov	r0, sl
 8009476:	f000 faa5 	bl	80099c4 <_free_r>
 800947a:	e7c8      	b.n	800940e <__ssputs_r+0x46>

0800947c <_svfiprintf_r>:
 800947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	461d      	mov	r5, r3
 8009482:	898b      	ldrh	r3, [r1, #12]
 8009484:	061f      	lsls	r7, r3, #24
 8009486:	b09d      	sub	sp, #116	; 0x74
 8009488:	4680      	mov	r8, r0
 800948a:	460c      	mov	r4, r1
 800948c:	4616      	mov	r6, r2
 800948e:	d50f      	bpl.n	80094b0 <_svfiprintf_r+0x34>
 8009490:	690b      	ldr	r3, [r1, #16]
 8009492:	b96b      	cbnz	r3, 80094b0 <_svfiprintf_r+0x34>
 8009494:	2140      	movs	r1, #64	; 0x40
 8009496:	f000 fae3 	bl	8009a60 <_malloc_r>
 800949a:	6020      	str	r0, [r4, #0]
 800949c:	6120      	str	r0, [r4, #16]
 800949e:	b928      	cbnz	r0, 80094ac <_svfiprintf_r+0x30>
 80094a0:	230c      	movs	r3, #12
 80094a2:	f8c8 3000 	str.w	r3, [r8]
 80094a6:	f04f 30ff 	mov.w	r0, #4294967295
 80094aa:	e0c8      	b.n	800963e <_svfiprintf_r+0x1c2>
 80094ac:	2340      	movs	r3, #64	; 0x40
 80094ae:	6163      	str	r3, [r4, #20]
 80094b0:	2300      	movs	r3, #0
 80094b2:	9309      	str	r3, [sp, #36]	; 0x24
 80094b4:	2320      	movs	r3, #32
 80094b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ba:	2330      	movs	r3, #48	; 0x30
 80094bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c0:	9503      	str	r5, [sp, #12]
 80094c2:	f04f 0b01 	mov.w	fp, #1
 80094c6:	4637      	mov	r7, r6
 80094c8:	463d      	mov	r5, r7
 80094ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094ce:	b10b      	cbz	r3, 80094d4 <_svfiprintf_r+0x58>
 80094d0:	2b25      	cmp	r3, #37	; 0x25
 80094d2:	d13e      	bne.n	8009552 <_svfiprintf_r+0xd6>
 80094d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80094d8:	d00b      	beq.n	80094f2 <_svfiprintf_r+0x76>
 80094da:	4653      	mov	r3, sl
 80094dc:	4632      	mov	r2, r6
 80094de:	4621      	mov	r1, r4
 80094e0:	4640      	mov	r0, r8
 80094e2:	f7ff ff71 	bl	80093c8 <__ssputs_r>
 80094e6:	3001      	adds	r0, #1
 80094e8:	f000 80a4 	beq.w	8009634 <_svfiprintf_r+0x1b8>
 80094ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ee:	4453      	add	r3, sl
 80094f0:	9309      	str	r3, [sp, #36]	; 0x24
 80094f2:	783b      	ldrb	r3, [r7, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 809d 	beq.w	8009634 <_svfiprintf_r+0x1b8>
 80094fa:	2300      	movs	r3, #0
 80094fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	9307      	str	r3, [sp, #28]
 8009508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800950c:	931a      	str	r3, [sp, #104]	; 0x68
 800950e:	462f      	mov	r7, r5
 8009510:	2205      	movs	r2, #5
 8009512:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009516:	4850      	ldr	r0, [pc, #320]	; (8009658 <_svfiprintf_r+0x1dc>)
 8009518:	f7f6 fe72 	bl	8000200 <memchr>
 800951c:	9b04      	ldr	r3, [sp, #16]
 800951e:	b9d0      	cbnz	r0, 8009556 <_svfiprintf_r+0xda>
 8009520:	06d9      	lsls	r1, r3, #27
 8009522:	bf44      	itt	mi
 8009524:	2220      	movmi	r2, #32
 8009526:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800952a:	071a      	lsls	r2, r3, #28
 800952c:	bf44      	itt	mi
 800952e:	222b      	movmi	r2, #43	; 0x2b
 8009530:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009534:	782a      	ldrb	r2, [r5, #0]
 8009536:	2a2a      	cmp	r2, #42	; 0x2a
 8009538:	d015      	beq.n	8009566 <_svfiprintf_r+0xea>
 800953a:	9a07      	ldr	r2, [sp, #28]
 800953c:	462f      	mov	r7, r5
 800953e:	2000      	movs	r0, #0
 8009540:	250a      	movs	r5, #10
 8009542:	4639      	mov	r1, r7
 8009544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009548:	3b30      	subs	r3, #48	; 0x30
 800954a:	2b09      	cmp	r3, #9
 800954c:	d94d      	bls.n	80095ea <_svfiprintf_r+0x16e>
 800954e:	b1b8      	cbz	r0, 8009580 <_svfiprintf_r+0x104>
 8009550:	e00f      	b.n	8009572 <_svfiprintf_r+0xf6>
 8009552:	462f      	mov	r7, r5
 8009554:	e7b8      	b.n	80094c8 <_svfiprintf_r+0x4c>
 8009556:	4a40      	ldr	r2, [pc, #256]	; (8009658 <_svfiprintf_r+0x1dc>)
 8009558:	1a80      	subs	r0, r0, r2
 800955a:	fa0b f000 	lsl.w	r0, fp, r0
 800955e:	4318      	orrs	r0, r3
 8009560:	9004      	str	r0, [sp, #16]
 8009562:	463d      	mov	r5, r7
 8009564:	e7d3      	b.n	800950e <_svfiprintf_r+0x92>
 8009566:	9a03      	ldr	r2, [sp, #12]
 8009568:	1d11      	adds	r1, r2, #4
 800956a:	6812      	ldr	r2, [r2, #0]
 800956c:	9103      	str	r1, [sp, #12]
 800956e:	2a00      	cmp	r2, #0
 8009570:	db01      	blt.n	8009576 <_svfiprintf_r+0xfa>
 8009572:	9207      	str	r2, [sp, #28]
 8009574:	e004      	b.n	8009580 <_svfiprintf_r+0x104>
 8009576:	4252      	negs	r2, r2
 8009578:	f043 0302 	orr.w	r3, r3, #2
 800957c:	9207      	str	r2, [sp, #28]
 800957e:	9304      	str	r3, [sp, #16]
 8009580:	783b      	ldrb	r3, [r7, #0]
 8009582:	2b2e      	cmp	r3, #46	; 0x2e
 8009584:	d10c      	bne.n	80095a0 <_svfiprintf_r+0x124>
 8009586:	787b      	ldrb	r3, [r7, #1]
 8009588:	2b2a      	cmp	r3, #42	; 0x2a
 800958a:	d133      	bne.n	80095f4 <_svfiprintf_r+0x178>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	9203      	str	r2, [sp, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfb8      	it	lt
 8009598:	f04f 33ff 	movlt.w	r3, #4294967295
 800959c:	3702      	adds	r7, #2
 800959e:	9305      	str	r3, [sp, #20]
 80095a0:	4d2e      	ldr	r5, [pc, #184]	; (800965c <_svfiprintf_r+0x1e0>)
 80095a2:	7839      	ldrb	r1, [r7, #0]
 80095a4:	2203      	movs	r2, #3
 80095a6:	4628      	mov	r0, r5
 80095a8:	f7f6 fe2a 	bl	8000200 <memchr>
 80095ac:	b138      	cbz	r0, 80095be <_svfiprintf_r+0x142>
 80095ae:	2340      	movs	r3, #64	; 0x40
 80095b0:	1b40      	subs	r0, r0, r5
 80095b2:	fa03 f000 	lsl.w	r0, r3, r0
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	4303      	orrs	r3, r0
 80095ba:	3701      	adds	r7, #1
 80095bc:	9304      	str	r3, [sp, #16]
 80095be:	7839      	ldrb	r1, [r7, #0]
 80095c0:	4827      	ldr	r0, [pc, #156]	; (8009660 <_svfiprintf_r+0x1e4>)
 80095c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095c6:	2206      	movs	r2, #6
 80095c8:	1c7e      	adds	r6, r7, #1
 80095ca:	f7f6 fe19 	bl	8000200 <memchr>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d038      	beq.n	8009644 <_svfiprintf_r+0x1c8>
 80095d2:	4b24      	ldr	r3, [pc, #144]	; (8009664 <_svfiprintf_r+0x1e8>)
 80095d4:	bb13      	cbnz	r3, 800961c <_svfiprintf_r+0x1a0>
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	3307      	adds	r3, #7
 80095da:	f023 0307 	bic.w	r3, r3, #7
 80095de:	3308      	adds	r3, #8
 80095e0:	9303      	str	r3, [sp, #12]
 80095e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e4:	444b      	add	r3, r9
 80095e6:	9309      	str	r3, [sp, #36]	; 0x24
 80095e8:	e76d      	b.n	80094c6 <_svfiprintf_r+0x4a>
 80095ea:	fb05 3202 	mla	r2, r5, r2, r3
 80095ee:	2001      	movs	r0, #1
 80095f0:	460f      	mov	r7, r1
 80095f2:	e7a6      	b.n	8009542 <_svfiprintf_r+0xc6>
 80095f4:	2300      	movs	r3, #0
 80095f6:	3701      	adds	r7, #1
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	4619      	mov	r1, r3
 80095fc:	250a      	movs	r5, #10
 80095fe:	4638      	mov	r0, r7
 8009600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009604:	3a30      	subs	r2, #48	; 0x30
 8009606:	2a09      	cmp	r2, #9
 8009608:	d903      	bls.n	8009612 <_svfiprintf_r+0x196>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d0c8      	beq.n	80095a0 <_svfiprintf_r+0x124>
 800960e:	9105      	str	r1, [sp, #20]
 8009610:	e7c6      	b.n	80095a0 <_svfiprintf_r+0x124>
 8009612:	fb05 2101 	mla	r1, r5, r1, r2
 8009616:	2301      	movs	r3, #1
 8009618:	4607      	mov	r7, r0
 800961a:	e7f0      	b.n	80095fe <_svfiprintf_r+0x182>
 800961c:	ab03      	add	r3, sp, #12
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4622      	mov	r2, r4
 8009622:	4b11      	ldr	r3, [pc, #68]	; (8009668 <_svfiprintf_r+0x1ec>)
 8009624:	a904      	add	r1, sp, #16
 8009626:	4640      	mov	r0, r8
 8009628:	f3af 8000 	nop.w
 800962c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009630:	4681      	mov	r9, r0
 8009632:	d1d6      	bne.n	80095e2 <_svfiprintf_r+0x166>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	065b      	lsls	r3, r3, #25
 8009638:	f53f af35 	bmi.w	80094a6 <_svfiprintf_r+0x2a>
 800963c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800963e:	b01d      	add	sp, #116	; 0x74
 8009640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009644:	ab03      	add	r3, sp, #12
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4622      	mov	r2, r4
 800964a:	4b07      	ldr	r3, [pc, #28]	; (8009668 <_svfiprintf_r+0x1ec>)
 800964c:	a904      	add	r1, sp, #16
 800964e:	4640      	mov	r0, r8
 8009650:	f000 f882 	bl	8009758 <_printf_i>
 8009654:	e7ea      	b.n	800962c <_svfiprintf_r+0x1b0>
 8009656:	bf00      	nop
 8009658:	0800a1c4 	.word	0x0800a1c4
 800965c:	0800a1ca 	.word	0x0800a1ca
 8009660:	0800a1ce 	.word	0x0800a1ce
 8009664:	00000000 	.word	0x00000000
 8009668:	080093c9 	.word	0x080093c9

0800966c <_printf_common>:
 800966c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009670:	4691      	mov	r9, r2
 8009672:	461f      	mov	r7, r3
 8009674:	688a      	ldr	r2, [r1, #8]
 8009676:	690b      	ldr	r3, [r1, #16]
 8009678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800967c:	4293      	cmp	r3, r2
 800967e:	bfb8      	it	lt
 8009680:	4613      	movlt	r3, r2
 8009682:	f8c9 3000 	str.w	r3, [r9]
 8009686:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800968a:	4606      	mov	r6, r0
 800968c:	460c      	mov	r4, r1
 800968e:	b112      	cbz	r2, 8009696 <_printf_common+0x2a>
 8009690:	3301      	adds	r3, #1
 8009692:	f8c9 3000 	str.w	r3, [r9]
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	0699      	lsls	r1, r3, #26
 800969a:	bf42      	ittt	mi
 800969c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80096a0:	3302      	addmi	r3, #2
 80096a2:	f8c9 3000 	strmi.w	r3, [r9]
 80096a6:	6825      	ldr	r5, [r4, #0]
 80096a8:	f015 0506 	ands.w	r5, r5, #6
 80096ac:	d107      	bne.n	80096be <_printf_common+0x52>
 80096ae:	f104 0a19 	add.w	sl, r4, #25
 80096b2:	68e3      	ldr	r3, [r4, #12]
 80096b4:	f8d9 2000 	ldr.w	r2, [r9]
 80096b8:	1a9b      	subs	r3, r3, r2
 80096ba:	42ab      	cmp	r3, r5
 80096bc:	dc28      	bgt.n	8009710 <_printf_common+0xa4>
 80096be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096c2:	6822      	ldr	r2, [r4, #0]
 80096c4:	3300      	adds	r3, #0
 80096c6:	bf18      	it	ne
 80096c8:	2301      	movne	r3, #1
 80096ca:	0692      	lsls	r2, r2, #26
 80096cc:	d42d      	bmi.n	800972a <_printf_common+0xbe>
 80096ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d2:	4639      	mov	r1, r7
 80096d4:	4630      	mov	r0, r6
 80096d6:	47c0      	blx	r8
 80096d8:	3001      	adds	r0, #1
 80096da:	d020      	beq.n	800971e <_printf_common+0xb2>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	68e5      	ldr	r5, [r4, #12]
 80096e0:	f8d9 2000 	ldr.w	r2, [r9]
 80096e4:	f003 0306 	and.w	r3, r3, #6
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	bf08      	it	eq
 80096ec:	1aad      	subeq	r5, r5, r2
 80096ee:	68a3      	ldr	r3, [r4, #8]
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	bf0c      	ite	eq
 80096f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f8:	2500      	movne	r5, #0
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bfc4      	itt	gt
 80096fe:	1a9b      	subgt	r3, r3, r2
 8009700:	18ed      	addgt	r5, r5, r3
 8009702:	f04f 0900 	mov.w	r9, #0
 8009706:	341a      	adds	r4, #26
 8009708:	454d      	cmp	r5, r9
 800970a:	d11a      	bne.n	8009742 <_printf_common+0xd6>
 800970c:	2000      	movs	r0, #0
 800970e:	e008      	b.n	8009722 <_printf_common+0xb6>
 8009710:	2301      	movs	r3, #1
 8009712:	4652      	mov	r2, sl
 8009714:	4639      	mov	r1, r7
 8009716:	4630      	mov	r0, r6
 8009718:	47c0      	blx	r8
 800971a:	3001      	adds	r0, #1
 800971c:	d103      	bne.n	8009726 <_printf_common+0xba>
 800971e:	f04f 30ff 	mov.w	r0, #4294967295
 8009722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009726:	3501      	adds	r5, #1
 8009728:	e7c3      	b.n	80096b2 <_printf_common+0x46>
 800972a:	18e1      	adds	r1, r4, r3
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	2030      	movs	r0, #48	; 0x30
 8009730:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009734:	4422      	add	r2, r4
 8009736:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800973a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800973e:	3302      	adds	r3, #2
 8009740:	e7c5      	b.n	80096ce <_printf_common+0x62>
 8009742:	2301      	movs	r3, #1
 8009744:	4622      	mov	r2, r4
 8009746:	4639      	mov	r1, r7
 8009748:	4630      	mov	r0, r6
 800974a:	47c0      	blx	r8
 800974c:	3001      	adds	r0, #1
 800974e:	d0e6      	beq.n	800971e <_printf_common+0xb2>
 8009750:	f109 0901 	add.w	r9, r9, #1
 8009754:	e7d8      	b.n	8009708 <_printf_common+0x9c>
	...

08009758 <_printf_i>:
 8009758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800975c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009760:	460c      	mov	r4, r1
 8009762:	7e09      	ldrb	r1, [r1, #24]
 8009764:	b085      	sub	sp, #20
 8009766:	296e      	cmp	r1, #110	; 0x6e
 8009768:	4617      	mov	r7, r2
 800976a:	4606      	mov	r6, r0
 800976c:	4698      	mov	r8, r3
 800976e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009770:	f000 80b3 	beq.w	80098da <_printf_i+0x182>
 8009774:	d822      	bhi.n	80097bc <_printf_i+0x64>
 8009776:	2963      	cmp	r1, #99	; 0x63
 8009778:	d036      	beq.n	80097e8 <_printf_i+0x90>
 800977a:	d80a      	bhi.n	8009792 <_printf_i+0x3a>
 800977c:	2900      	cmp	r1, #0
 800977e:	f000 80b9 	beq.w	80098f4 <_printf_i+0x19c>
 8009782:	2958      	cmp	r1, #88	; 0x58
 8009784:	f000 8083 	beq.w	800988e <_printf_i+0x136>
 8009788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800978c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009790:	e032      	b.n	80097f8 <_printf_i+0xa0>
 8009792:	2964      	cmp	r1, #100	; 0x64
 8009794:	d001      	beq.n	800979a <_printf_i+0x42>
 8009796:	2969      	cmp	r1, #105	; 0x69
 8009798:	d1f6      	bne.n	8009788 <_printf_i+0x30>
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	6813      	ldr	r3, [r2, #0]
 800979e:	0605      	lsls	r5, r0, #24
 80097a0:	f103 0104 	add.w	r1, r3, #4
 80097a4:	d52a      	bpl.n	80097fc <_printf_i+0xa4>
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6011      	str	r1, [r2, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	da03      	bge.n	80097b6 <_printf_i+0x5e>
 80097ae:	222d      	movs	r2, #45	; 0x2d
 80097b0:	425b      	negs	r3, r3
 80097b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80097b6:	486f      	ldr	r0, [pc, #444]	; (8009974 <_printf_i+0x21c>)
 80097b8:	220a      	movs	r2, #10
 80097ba:	e039      	b.n	8009830 <_printf_i+0xd8>
 80097bc:	2973      	cmp	r1, #115	; 0x73
 80097be:	f000 809d 	beq.w	80098fc <_printf_i+0x1a4>
 80097c2:	d808      	bhi.n	80097d6 <_printf_i+0x7e>
 80097c4:	296f      	cmp	r1, #111	; 0x6f
 80097c6:	d020      	beq.n	800980a <_printf_i+0xb2>
 80097c8:	2970      	cmp	r1, #112	; 0x70
 80097ca:	d1dd      	bne.n	8009788 <_printf_i+0x30>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	f043 0320 	orr.w	r3, r3, #32
 80097d2:	6023      	str	r3, [r4, #0]
 80097d4:	e003      	b.n	80097de <_printf_i+0x86>
 80097d6:	2975      	cmp	r1, #117	; 0x75
 80097d8:	d017      	beq.n	800980a <_printf_i+0xb2>
 80097da:	2978      	cmp	r1, #120	; 0x78
 80097dc:	d1d4      	bne.n	8009788 <_printf_i+0x30>
 80097de:	2378      	movs	r3, #120	; 0x78
 80097e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097e4:	4864      	ldr	r0, [pc, #400]	; (8009978 <_printf_i+0x220>)
 80097e6:	e055      	b.n	8009894 <_printf_i+0x13c>
 80097e8:	6813      	ldr	r3, [r2, #0]
 80097ea:	1d19      	adds	r1, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6011      	str	r1, [r2, #0]
 80097f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097f8:	2301      	movs	r3, #1
 80097fa:	e08c      	b.n	8009916 <_printf_i+0x1be>
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6011      	str	r1, [r2, #0]
 8009800:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009804:	bf18      	it	ne
 8009806:	b21b      	sxthne	r3, r3
 8009808:	e7cf      	b.n	80097aa <_printf_i+0x52>
 800980a:	6813      	ldr	r3, [r2, #0]
 800980c:	6825      	ldr	r5, [r4, #0]
 800980e:	1d18      	adds	r0, r3, #4
 8009810:	6010      	str	r0, [r2, #0]
 8009812:	0628      	lsls	r0, r5, #24
 8009814:	d501      	bpl.n	800981a <_printf_i+0xc2>
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	e002      	b.n	8009820 <_printf_i+0xc8>
 800981a:	0668      	lsls	r0, r5, #25
 800981c:	d5fb      	bpl.n	8009816 <_printf_i+0xbe>
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	4854      	ldr	r0, [pc, #336]	; (8009974 <_printf_i+0x21c>)
 8009822:	296f      	cmp	r1, #111	; 0x6f
 8009824:	bf14      	ite	ne
 8009826:	220a      	movne	r2, #10
 8009828:	2208      	moveq	r2, #8
 800982a:	2100      	movs	r1, #0
 800982c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009830:	6865      	ldr	r5, [r4, #4]
 8009832:	60a5      	str	r5, [r4, #8]
 8009834:	2d00      	cmp	r5, #0
 8009836:	f2c0 8095 	blt.w	8009964 <_printf_i+0x20c>
 800983a:	6821      	ldr	r1, [r4, #0]
 800983c:	f021 0104 	bic.w	r1, r1, #4
 8009840:	6021      	str	r1, [r4, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d13d      	bne.n	80098c2 <_printf_i+0x16a>
 8009846:	2d00      	cmp	r5, #0
 8009848:	f040 808e 	bne.w	8009968 <_printf_i+0x210>
 800984c:	4665      	mov	r5, ip
 800984e:	2a08      	cmp	r2, #8
 8009850:	d10b      	bne.n	800986a <_printf_i+0x112>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	07db      	lsls	r3, r3, #31
 8009856:	d508      	bpl.n	800986a <_printf_i+0x112>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	6862      	ldr	r2, [r4, #4]
 800985c:	429a      	cmp	r2, r3
 800985e:	bfde      	ittt	le
 8009860:	2330      	movle	r3, #48	; 0x30
 8009862:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800986a:	ebac 0305 	sub.w	r3, ip, r5
 800986e:	6123      	str	r3, [r4, #16]
 8009870:	f8cd 8000 	str.w	r8, [sp]
 8009874:	463b      	mov	r3, r7
 8009876:	aa03      	add	r2, sp, #12
 8009878:	4621      	mov	r1, r4
 800987a:	4630      	mov	r0, r6
 800987c:	f7ff fef6 	bl	800966c <_printf_common>
 8009880:	3001      	adds	r0, #1
 8009882:	d14d      	bne.n	8009920 <_printf_i+0x1c8>
 8009884:	f04f 30ff 	mov.w	r0, #4294967295
 8009888:	b005      	add	sp, #20
 800988a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800988e:	4839      	ldr	r0, [pc, #228]	; (8009974 <_printf_i+0x21c>)
 8009890:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009894:	6813      	ldr	r3, [r2, #0]
 8009896:	6821      	ldr	r1, [r4, #0]
 8009898:	1d1d      	adds	r5, r3, #4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6015      	str	r5, [r2, #0]
 800989e:	060a      	lsls	r2, r1, #24
 80098a0:	d50b      	bpl.n	80098ba <_printf_i+0x162>
 80098a2:	07ca      	lsls	r2, r1, #31
 80098a4:	bf44      	itt	mi
 80098a6:	f041 0120 	orrmi.w	r1, r1, #32
 80098aa:	6021      	strmi	r1, [r4, #0]
 80098ac:	b91b      	cbnz	r3, 80098b6 <_printf_i+0x15e>
 80098ae:	6822      	ldr	r2, [r4, #0]
 80098b0:	f022 0220 	bic.w	r2, r2, #32
 80098b4:	6022      	str	r2, [r4, #0]
 80098b6:	2210      	movs	r2, #16
 80098b8:	e7b7      	b.n	800982a <_printf_i+0xd2>
 80098ba:	064d      	lsls	r5, r1, #25
 80098bc:	bf48      	it	mi
 80098be:	b29b      	uxthmi	r3, r3
 80098c0:	e7ef      	b.n	80098a2 <_printf_i+0x14a>
 80098c2:	4665      	mov	r5, ip
 80098c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80098c8:	fb02 3311 	mls	r3, r2, r1, r3
 80098cc:	5cc3      	ldrb	r3, [r0, r3]
 80098ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098d2:	460b      	mov	r3, r1
 80098d4:	2900      	cmp	r1, #0
 80098d6:	d1f5      	bne.n	80098c4 <_printf_i+0x16c>
 80098d8:	e7b9      	b.n	800984e <_printf_i+0xf6>
 80098da:	6813      	ldr	r3, [r2, #0]
 80098dc:	6825      	ldr	r5, [r4, #0]
 80098de:	6961      	ldr	r1, [r4, #20]
 80098e0:	1d18      	adds	r0, r3, #4
 80098e2:	6010      	str	r0, [r2, #0]
 80098e4:	0628      	lsls	r0, r5, #24
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	d501      	bpl.n	80098ee <_printf_i+0x196>
 80098ea:	6019      	str	r1, [r3, #0]
 80098ec:	e002      	b.n	80098f4 <_printf_i+0x19c>
 80098ee:	066a      	lsls	r2, r5, #25
 80098f0:	d5fb      	bpl.n	80098ea <_printf_i+0x192>
 80098f2:	8019      	strh	r1, [r3, #0]
 80098f4:	2300      	movs	r3, #0
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	4665      	mov	r5, ip
 80098fa:	e7b9      	b.n	8009870 <_printf_i+0x118>
 80098fc:	6813      	ldr	r3, [r2, #0]
 80098fe:	1d19      	adds	r1, r3, #4
 8009900:	6011      	str	r1, [r2, #0]
 8009902:	681d      	ldr	r5, [r3, #0]
 8009904:	6862      	ldr	r2, [r4, #4]
 8009906:	2100      	movs	r1, #0
 8009908:	4628      	mov	r0, r5
 800990a:	f7f6 fc79 	bl	8000200 <memchr>
 800990e:	b108      	cbz	r0, 8009914 <_printf_i+0x1bc>
 8009910:	1b40      	subs	r0, r0, r5
 8009912:	6060      	str	r0, [r4, #4]
 8009914:	6863      	ldr	r3, [r4, #4]
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	2300      	movs	r3, #0
 800991a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800991e:	e7a7      	b.n	8009870 <_printf_i+0x118>
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	462a      	mov	r2, r5
 8009924:	4639      	mov	r1, r7
 8009926:	4630      	mov	r0, r6
 8009928:	47c0      	blx	r8
 800992a:	3001      	adds	r0, #1
 800992c:	d0aa      	beq.n	8009884 <_printf_i+0x12c>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	079b      	lsls	r3, r3, #30
 8009932:	d413      	bmi.n	800995c <_printf_i+0x204>
 8009934:	68e0      	ldr	r0, [r4, #12]
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	4298      	cmp	r0, r3
 800993a:	bfb8      	it	lt
 800993c:	4618      	movlt	r0, r3
 800993e:	e7a3      	b.n	8009888 <_printf_i+0x130>
 8009940:	2301      	movs	r3, #1
 8009942:	464a      	mov	r2, r9
 8009944:	4639      	mov	r1, r7
 8009946:	4630      	mov	r0, r6
 8009948:	47c0      	blx	r8
 800994a:	3001      	adds	r0, #1
 800994c:	d09a      	beq.n	8009884 <_printf_i+0x12c>
 800994e:	3501      	adds	r5, #1
 8009950:	68e3      	ldr	r3, [r4, #12]
 8009952:	9a03      	ldr	r2, [sp, #12]
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	42ab      	cmp	r3, r5
 8009958:	dcf2      	bgt.n	8009940 <_printf_i+0x1e8>
 800995a:	e7eb      	b.n	8009934 <_printf_i+0x1dc>
 800995c:	2500      	movs	r5, #0
 800995e:	f104 0919 	add.w	r9, r4, #25
 8009962:	e7f5      	b.n	8009950 <_printf_i+0x1f8>
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1ac      	bne.n	80098c2 <_printf_i+0x16a>
 8009968:	7803      	ldrb	r3, [r0, #0]
 800996a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800996e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009972:	e76c      	b.n	800984e <_printf_i+0xf6>
 8009974:	0800a1d5 	.word	0x0800a1d5
 8009978:	0800a1e6 	.word	0x0800a1e6

0800997c <memcpy>:
 800997c:	b510      	push	{r4, lr}
 800997e:	1e43      	subs	r3, r0, #1
 8009980:	440a      	add	r2, r1
 8009982:	4291      	cmp	r1, r2
 8009984:	d100      	bne.n	8009988 <memcpy+0xc>
 8009986:	bd10      	pop	{r4, pc}
 8009988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009990:	e7f7      	b.n	8009982 <memcpy+0x6>

08009992 <memmove>:
 8009992:	4288      	cmp	r0, r1
 8009994:	b510      	push	{r4, lr}
 8009996:	eb01 0302 	add.w	r3, r1, r2
 800999a:	d807      	bhi.n	80099ac <memmove+0x1a>
 800999c:	1e42      	subs	r2, r0, #1
 800999e:	4299      	cmp	r1, r3
 80099a0:	d00a      	beq.n	80099b8 <memmove+0x26>
 80099a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80099aa:	e7f8      	b.n	800999e <memmove+0xc>
 80099ac:	4283      	cmp	r3, r0
 80099ae:	d9f5      	bls.n	800999c <memmove+0xa>
 80099b0:	1881      	adds	r1, r0, r2
 80099b2:	1ad2      	subs	r2, r2, r3
 80099b4:	42d3      	cmn	r3, r2
 80099b6:	d100      	bne.n	80099ba <memmove+0x28>
 80099b8:	bd10      	pop	{r4, pc}
 80099ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80099c2:	e7f7      	b.n	80099b4 <memmove+0x22>

080099c4 <_free_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4605      	mov	r5, r0
 80099c8:	2900      	cmp	r1, #0
 80099ca:	d045      	beq.n	8009a58 <_free_r+0x94>
 80099cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d0:	1f0c      	subs	r4, r1, #4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bfb8      	it	lt
 80099d6:	18e4      	addlt	r4, r4, r3
 80099d8:	f000 f8d2 	bl	8009b80 <__malloc_lock>
 80099dc:	4a1f      	ldr	r2, [pc, #124]	; (8009a5c <_free_r+0x98>)
 80099de:	6813      	ldr	r3, [r2, #0]
 80099e0:	4610      	mov	r0, r2
 80099e2:	b933      	cbnz	r3, 80099f2 <_free_r+0x2e>
 80099e4:	6063      	str	r3, [r4, #4]
 80099e6:	6014      	str	r4, [r2, #0]
 80099e8:	4628      	mov	r0, r5
 80099ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ee:	f000 b8c8 	b.w	8009b82 <__malloc_unlock>
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	d90c      	bls.n	8009a10 <_free_r+0x4c>
 80099f6:	6821      	ldr	r1, [r4, #0]
 80099f8:	1862      	adds	r2, r4, r1
 80099fa:	4293      	cmp	r3, r2
 80099fc:	bf04      	itt	eq
 80099fe:	681a      	ldreq	r2, [r3, #0]
 8009a00:	685b      	ldreq	r3, [r3, #4]
 8009a02:	6063      	str	r3, [r4, #4]
 8009a04:	bf04      	itt	eq
 8009a06:	1852      	addeq	r2, r2, r1
 8009a08:	6022      	streq	r2, [r4, #0]
 8009a0a:	6004      	str	r4, [r0, #0]
 8009a0c:	e7ec      	b.n	80099e8 <_free_r+0x24>
 8009a0e:	4613      	mov	r3, r2
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	b10a      	cbz	r2, 8009a18 <_free_r+0x54>
 8009a14:	42a2      	cmp	r2, r4
 8009a16:	d9fa      	bls.n	8009a0e <_free_r+0x4a>
 8009a18:	6819      	ldr	r1, [r3, #0]
 8009a1a:	1858      	adds	r0, r3, r1
 8009a1c:	42a0      	cmp	r0, r4
 8009a1e:	d10b      	bne.n	8009a38 <_free_r+0x74>
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	4401      	add	r1, r0
 8009a24:	1858      	adds	r0, r3, r1
 8009a26:	4282      	cmp	r2, r0
 8009a28:	6019      	str	r1, [r3, #0]
 8009a2a:	d1dd      	bne.n	80099e8 <_free_r+0x24>
 8009a2c:	6810      	ldr	r0, [r2, #0]
 8009a2e:	6852      	ldr	r2, [r2, #4]
 8009a30:	605a      	str	r2, [r3, #4]
 8009a32:	4401      	add	r1, r0
 8009a34:	6019      	str	r1, [r3, #0]
 8009a36:	e7d7      	b.n	80099e8 <_free_r+0x24>
 8009a38:	d902      	bls.n	8009a40 <_free_r+0x7c>
 8009a3a:	230c      	movs	r3, #12
 8009a3c:	602b      	str	r3, [r5, #0]
 8009a3e:	e7d3      	b.n	80099e8 <_free_r+0x24>
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	1821      	adds	r1, r4, r0
 8009a44:	428a      	cmp	r2, r1
 8009a46:	bf04      	itt	eq
 8009a48:	6811      	ldreq	r1, [r2, #0]
 8009a4a:	6852      	ldreq	r2, [r2, #4]
 8009a4c:	6062      	str	r2, [r4, #4]
 8009a4e:	bf04      	itt	eq
 8009a50:	1809      	addeq	r1, r1, r0
 8009a52:	6021      	streq	r1, [r4, #0]
 8009a54:	605c      	str	r4, [r3, #4]
 8009a56:	e7c7      	b.n	80099e8 <_free_r+0x24>
 8009a58:	bd38      	pop	{r3, r4, r5, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000304 	.word	0x20000304

08009a60 <_malloc_r>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	1ccd      	adds	r5, r1, #3
 8009a64:	f025 0503 	bic.w	r5, r5, #3
 8009a68:	3508      	adds	r5, #8
 8009a6a:	2d0c      	cmp	r5, #12
 8009a6c:	bf38      	it	cc
 8009a6e:	250c      	movcc	r5, #12
 8009a70:	2d00      	cmp	r5, #0
 8009a72:	4606      	mov	r6, r0
 8009a74:	db01      	blt.n	8009a7a <_malloc_r+0x1a>
 8009a76:	42a9      	cmp	r1, r5
 8009a78:	d903      	bls.n	8009a82 <_malloc_r+0x22>
 8009a7a:	230c      	movs	r3, #12
 8009a7c:	6033      	str	r3, [r6, #0]
 8009a7e:	2000      	movs	r0, #0
 8009a80:	bd70      	pop	{r4, r5, r6, pc}
 8009a82:	f000 f87d 	bl	8009b80 <__malloc_lock>
 8009a86:	4a21      	ldr	r2, [pc, #132]	; (8009b0c <_malloc_r+0xac>)
 8009a88:	6814      	ldr	r4, [r2, #0]
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	b991      	cbnz	r1, 8009ab4 <_malloc_r+0x54>
 8009a8e:	4c20      	ldr	r4, [pc, #128]	; (8009b10 <_malloc_r+0xb0>)
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	b91b      	cbnz	r3, 8009a9c <_malloc_r+0x3c>
 8009a94:	4630      	mov	r0, r6
 8009a96:	f000 f863 	bl	8009b60 <_sbrk_r>
 8009a9a:	6020      	str	r0, [r4, #0]
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f000 f85e 	bl	8009b60 <_sbrk_r>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d124      	bne.n	8009af2 <_malloc_r+0x92>
 8009aa8:	230c      	movs	r3, #12
 8009aaa:	6033      	str	r3, [r6, #0]
 8009aac:	4630      	mov	r0, r6
 8009aae:	f000 f868 	bl	8009b82 <__malloc_unlock>
 8009ab2:	e7e4      	b.n	8009a7e <_malloc_r+0x1e>
 8009ab4:	680b      	ldr	r3, [r1, #0]
 8009ab6:	1b5b      	subs	r3, r3, r5
 8009ab8:	d418      	bmi.n	8009aec <_malloc_r+0x8c>
 8009aba:	2b0b      	cmp	r3, #11
 8009abc:	d90f      	bls.n	8009ade <_malloc_r+0x7e>
 8009abe:	600b      	str	r3, [r1, #0]
 8009ac0:	50cd      	str	r5, [r1, r3]
 8009ac2:	18cc      	adds	r4, r1, r3
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f000 f85c 	bl	8009b82 <__malloc_unlock>
 8009aca:	f104 000b 	add.w	r0, r4, #11
 8009ace:	1d23      	adds	r3, r4, #4
 8009ad0:	f020 0007 	bic.w	r0, r0, #7
 8009ad4:	1ac3      	subs	r3, r0, r3
 8009ad6:	d0d3      	beq.n	8009a80 <_malloc_r+0x20>
 8009ad8:	425a      	negs	r2, r3
 8009ada:	50e2      	str	r2, [r4, r3]
 8009adc:	e7d0      	b.n	8009a80 <_malloc_r+0x20>
 8009ade:	428c      	cmp	r4, r1
 8009ae0:	684b      	ldr	r3, [r1, #4]
 8009ae2:	bf16      	itet	ne
 8009ae4:	6063      	strne	r3, [r4, #4]
 8009ae6:	6013      	streq	r3, [r2, #0]
 8009ae8:	460c      	movne	r4, r1
 8009aea:	e7eb      	b.n	8009ac4 <_malloc_r+0x64>
 8009aec:	460c      	mov	r4, r1
 8009aee:	6849      	ldr	r1, [r1, #4]
 8009af0:	e7cc      	b.n	8009a8c <_malloc_r+0x2c>
 8009af2:	1cc4      	adds	r4, r0, #3
 8009af4:	f024 0403 	bic.w	r4, r4, #3
 8009af8:	42a0      	cmp	r0, r4
 8009afa:	d005      	beq.n	8009b08 <_malloc_r+0xa8>
 8009afc:	1a21      	subs	r1, r4, r0
 8009afe:	4630      	mov	r0, r6
 8009b00:	f000 f82e 	bl	8009b60 <_sbrk_r>
 8009b04:	3001      	adds	r0, #1
 8009b06:	d0cf      	beq.n	8009aa8 <_malloc_r+0x48>
 8009b08:	6025      	str	r5, [r4, #0]
 8009b0a:	e7db      	b.n	8009ac4 <_malloc_r+0x64>
 8009b0c:	20000304 	.word	0x20000304
 8009b10:	20000308 	.word	0x20000308

08009b14 <_realloc_r>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	4607      	mov	r7, r0
 8009b18:	4614      	mov	r4, r2
 8009b1a:	460e      	mov	r6, r1
 8009b1c:	b921      	cbnz	r1, 8009b28 <_realloc_r+0x14>
 8009b1e:	4611      	mov	r1, r2
 8009b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b24:	f7ff bf9c 	b.w	8009a60 <_malloc_r>
 8009b28:	b922      	cbnz	r2, 8009b34 <_realloc_r+0x20>
 8009b2a:	f7ff ff4b 	bl	80099c4 <_free_r>
 8009b2e:	4625      	mov	r5, r4
 8009b30:	4628      	mov	r0, r5
 8009b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b34:	f000 f826 	bl	8009b84 <_malloc_usable_size_r>
 8009b38:	42a0      	cmp	r0, r4
 8009b3a:	d20f      	bcs.n	8009b5c <_realloc_r+0x48>
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f7ff ff8e 	bl	8009a60 <_malloc_r>
 8009b44:	4605      	mov	r5, r0
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d0f2      	beq.n	8009b30 <_realloc_r+0x1c>
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	f7ff ff15 	bl	800997c <memcpy>
 8009b52:	4631      	mov	r1, r6
 8009b54:	4638      	mov	r0, r7
 8009b56:	f7ff ff35 	bl	80099c4 <_free_r>
 8009b5a:	e7e9      	b.n	8009b30 <_realloc_r+0x1c>
 8009b5c:	4635      	mov	r5, r6
 8009b5e:	e7e7      	b.n	8009b30 <_realloc_r+0x1c>

08009b60 <_sbrk_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4c06      	ldr	r4, [pc, #24]	; (8009b7c <_sbrk_r+0x1c>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4605      	mov	r5, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	f7f8 fa9e 	bl	80020ac <_sbrk>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_sbrk_r+0x1a>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_sbrk_r+0x1a>
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	200048f0 	.word	0x200048f0

08009b80 <__malloc_lock>:
 8009b80:	4770      	bx	lr

08009b82 <__malloc_unlock>:
 8009b82:	4770      	bx	lr

08009b84 <_malloc_usable_size_r>:
 8009b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b88:	1f18      	subs	r0, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bfbc      	itt	lt
 8009b8e:	580b      	ldrlt	r3, [r1, r0]
 8009b90:	18c0      	addlt	r0, r0, r3
 8009b92:	4770      	bx	lr

08009b94 <_init>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_fini>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr
